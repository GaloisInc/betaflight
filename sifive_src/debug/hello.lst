
/home/picard/Documents/cleanflight/sifive_src/debug/hello.elf:     file format elf32-littleriscv
/home/picard/Documents/cleanflight/sifive_src/debug/hello.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20010000

Program Header:
    LOAD off    0x00001000 vaddr 0x20010000 paddr 0x20010000 align 2**12
         filesz 0x0000609c memsz 0x0000609c flags rwx
    LOAD off    0x00007ad0 vaddr 0x80000ad0 paddr 0x80000ad0 align 2**12
         filesz 0x00000000 memsz 0x00000c9c flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x200160a0 align 2**12
         filesz 0x00000ad0 memsz 0x00000ad0 flags rw-
    LOAD off    0x00008ad0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00008ad0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20010000  20010000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005244  20010200  20010200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000c4c  20015444  20015444  00006444  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       0000000c  20016090  20016090  00007090  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000ad0  80000000  200160a0  00008000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              0000009c  80000ad0  80000ad0  00007ad0  2**3  ALLOC
  6 .stack            00000400  80000b6c  80000b6c  00007ad0  2**0  ALLOC
  7 .heap             00000800  80000f6c  80000f6c  00007ad0  2**0  ALLOC
  8 .debug_info       00020b68  00000000  00000000  00008ad0  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     00003043  00000000  00000000  00029638  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    000009f0  00000000  00000000  0002c680  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000848  00000000  00000000  0002d070  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00009dff  00000000  00000000  0002d8b8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        0000422f  00000000  00000000  000376b7  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0003b8e6  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0003b90e  2**0  CONTENTS, READONLY
 16 .debug_frame      00002858  00000000  00000000  0003b93c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20010000 l    d  .init	00000000 .init
20010200 l    d  .text	00000000 .text
20015444 l    d  .rodata	00000000 .rodata
20016090 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000ad0 l    d  .bss	00000000 .bss
80000b6c l    d  .stack	00000000 .stack
80000f6c l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__sifive-hifive1-revb_a-entry.o
20010060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20010136 l       .init	00000000 _skip_init
200154b4 l       .rodata	00000000 argv
200154b8 l       .rodata	00000000 envp
200154bc l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 hello.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20010684 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000a90 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80000adc l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
200111d6 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20011280 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
200112a6 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
200112ca l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20011306 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20011466 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20011994 l     F .text	00000024 __metal_driver_cpu_hartid
200119b8 l     F .text	0000002a __metal_driver_cpu_timebase
200119e2 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
2001320e l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20013238 l     F .text	0000002a __metal_driver_sifive_plic0_num_interrupts
20013262 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
2001328a l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
200132b2 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfrosc.c
200137f2 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfrosc_ref
2001380c l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfrosc_config_base
20013822 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfrosc_config_offset
20013836 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfxosc.c
200138ee l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfxosc_ref
20013908 l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfxosc_config_base
2001391e l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfxosc_config_offset
20013932 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_pll.c
200139da l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllsel0
200139f4 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllref
20013a0e l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_divider_base
20013a24 l     F .text	00000014 __metal_driver_sifive_fe310_g000_pll_divider_offset
20013a38 l     F .text	00000012 __metal_driver_sifive_fe310_g000_pll_config_base
20013a4a l     F .text	00000010 __metal_driver_sifive_fe310_g000_pll_config_offset
20013a5a l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_init_rate
20013a70 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
20013a82 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
20015768 l     O .rodata	00000880 pll_configs
20013a94 l     F .text	0000004e get_pll_config_freq
20013ae2 l     F .text	00000028 metal_sifive_fe310_g000_pll_init
20013d1e l     F .text	000000ac find_closest_config
20013dca l     F .text	00000132 configure_pll
20014060 l     F .text	0000002a use_hfxosc
00000000 l    df *ABS*	00000000 sifive_fe310-g000_prci.c
2001408a l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20014102 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20014128 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20014152 l     F .text	0000035e __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20014b66 l     F .text	00000040 __metal_driver_sifive_uart0_control_base
20014ba6 l     F .text	00000042 __metal_driver_sifive_uart0_interrupt_parent
20014be8 l     F .text	0000003c __metal_driver_sifive_uart0_interrupt_line
20014c24 l     F .text	00000048 __metal_driver_sifive_uart0_clock
20014c6c l     F .text	00000040 __metal_driver_sifive_uart0_pinmux
20014cac l     F .text	00000040 __metal_driver_sifive_uart0_pinmux_output_selector
20014cec l     F .text	00000040 __metal_driver_sifive_uart0_pinmux_source_selector
20014efa l     F .text	000000d8 pre_rate_change_callback_func
20014fd2 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__sifive-hifive1-revb_a-vector.o
20015300 l       .text	00000000 IRQ_0
20015304 l       .text	00000000 IRQ_1
20015308 l       .text	00000000 IRQ_2
2001530c l       .text	00000000 IRQ_3
20015310 l       .text	00000000 IRQ_4
20015314 l       .text	00000000 IRQ_5
20015318 l       .text	00000000 IRQ_6
2001531c l       .text	00000000 IRQ_7
20015320 l       .text	00000000 IRQ_8
20015324 l       .text	00000000 IRQ_9
20015328 l       .text	00000000 IRQ_10
2001532c l       .text	00000000 IRQ_11
20015330 l       .text	00000000 IRQ_12
20015334 l       .text	00000000 IRQ_13
20015338 l       .text	00000000 IRQ_14
2001533c l       .text	00000000 IRQ_15
20015340 l       .text	00000000 IRQ_LC0
20015344 l       .text	00000000 IRQ_LC1
20015348 l       .text	00000000 IRQ_LC2
2001534c l       .text	00000000 IRQ_LC3
20015350 l       .text	00000000 IRQ_LC4
20015354 l       .text	00000000 IRQ_LC5
20015358 l       .text	00000000 IRQ_LC6
2001535c l       .text	00000000 IRQ_LC7
20015360 l       .text	00000000 IRQ_LC8
20015364 l       .text	00000000 IRQ_LC9
20015368 l       .text	00000000 IRQ_LC10
2001536c l       .text	00000000 IRQ_LC11
20015370 l       .text	00000000 IRQ_LC12
20015374 l       .text	00000000 IRQ_LC13
20015378 l       .text	00000000 IRQ_LC14
2001537c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20015380 l     F .text	00000070 __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
2001609c l       .init_array	00000000 __fini_array_end
2001609c l       .init_array	00000000 __fini_array_start
2001609c l       .init_array	00000000 __init_array_end
20016090 l       .init_array	00000000 __preinit_array_end
20016090 l       .init_array	00000000 __init_array_start
20016090 l       .init_array	00000000 __preinit_array_start
20016070 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20010d34 g     F .text	00000028 _isatty_r
200121ba  w    F .text	00000092 metal_lc4_interrupt_vector_handler
2001021e g     F .text	000000da _puts_r
20010d5c g     F .text	0000002c _lseek_r
20015168 g     F .text	00000026 metal_clock_get_rate_hz
20014e5a g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20011642 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20012128  w    F .text	00000092 metal_lc3_interrupt_vector_handler
2001297a g     F .text	00000038 __metal_valid_interrupt_id
20012d9c g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001288 g       .data	00000000 __global_pointer$
20015114 g     F .text	00000054 _metal_clock_append_to_callbacks
20013302 g     F .text	00000038 __metal_plic0_complete_interrupt
20012bfa g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20010c7a g     F .text	00000036 __sseek
2001073a g     F .text	0000006a __sinit
20010306 g     F .text	000000c0 __swbuf_r
200106f6 g     F .text	00000044 __sfmoreglue
20010d8a g     F .text	00000002 __malloc_unlock
2001525e g     F .text	0000002a metal_cpu_get
80000a20 g     O .data	00000020 __metal_dt_serial_10013000
20014740 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
200154c8 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80000b6c g       .bss	00000000 metal_segment_bss_target_end
20011336 g     F .text	0000009a __metal_clint0_mtime_get
200131a2 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
200144f0 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20010f5a g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20014d70 g     F .text	00000034 __metal_driver_sifive_uart0_txready
20010070 g     F .init	0000000e __metal_synchronize_harts
80000ad0 g       .bss	00000000 metal_segment_bss_target_start
200113d0 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20010d0a g     F .text	0000002a _fstat_r
20014990 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000b68 g     O .bss	00000004 errno
20013bae g     F .text	00000170 __metal_driver_sifive_fe310_g000_pll_get_rate_hz
00000400 g       *ABS*	00000000 __stack_size
200151d6 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20012494  w    F .text	00000092 metal_lc9_interrupt_vector_handler
80000a40 g     O .data	00000020 __metal_dt_serial_10023000
2001571c g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
200156dc g     O .rodata	00000040 __metal_driver_vtable_cpu
20011252 g     F .text	0000002e metal_uart_set_baud_rate
20015002 g     F .text	000000d2 __metal_driver_sifive_uart0_init
20012e30 g     F .text	00000072 __metal_driver_cpu_mcycle_get
20015fe8 g     O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
80000f6c g       .heap	00000000 metal_segment_heap_target_start
200106ec g     F .text	0000000a _cleanup_r
80000aa0 g     O .data	00000004 __metal_dt_cpu_0
20012402  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20013efc g     F .text	00000164 __metal_driver_sifive_fe310_g000_pll_set_rate_hz
200102f8 g     F .text	0000000e puts
200126dc  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20011b76 g     F .text	00000018 __metal_default_exception_handler
20010dda g     F .text	00000026 _fstat
20011960 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
2001339e g     F .text	00000062 __metal_plic0_set_priority
20012db8 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20011a0c g     F .text	0000002c __metal_driver_cpu_get
20015690 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20011a6a g     F .text	00000018 __metal_interrupt_global_disable
20012370  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20012526  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20010bd4 g     F .text	00000028 _sbrk_r
200137aa g     F .text	00000048 __metal_driver_riscv_plic0_disable
20012a6e g     F .text	0000004e __metal_exception_register
20010d8c g     F .text	0000002c _read_r
20012fc4 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
200145d2 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20011c62 g     F .text	00000064 __metal_default_sw_handler
20015206 g     F .text	00000032 metal_clock_register_post_rate_change_callback
8000006c g     O .data	0000000c __metal_dt_clock_2
20014d2c g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
20010e00 g     F .text	00000020 _isatty
20014698 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80000ac4 g     O .data	00000008 __metal_driver_vtable_fixed_clock
80000a8c g     O .data	00000004 _global_impure_ptr
20011cc6  w    F .text	0000008e metal_timer_interrupt_vector_handler
20010fca g     F .text	0000006a __libc_init_array
20014612 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
200125b8  w    F .text	00000092 metal_lc11_interrupt_vector_handler
200139b8 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
20012d48 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
20010e74 g     F .text	0000006e _sbrk
2001458c g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
200150d4 g     F .text	00000040 _metal_clock_call_all_callbacks
20010174 g     F .init	00000002 _init
20011acc g     F .text	0000001a __metal_interrupt_timer_disable
2001478a g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
2001307a g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20016034 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
200146d8 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20010f92 g     F .text	00000038 __libc_fini_array
80000a78 g     O .data	0000000c __metal_dt_clock_4
20014b18 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20013004 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20011b1e g     F .text	0000002c __metal_interrupt_local_enable
2001192c g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20011184 g     F .text	0000002c metal_tty_putc
200134c0 g     F .text	00000018 __metal_plic0_default_handler
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20015454 g     O .rodata	00000020 __sf_fake_stderr
20011b02 g     F .text	0000001c __metal_interrupt_external_disable
20014d4c g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
20012e14 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20012abc g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
2001315c g     F .text	00000046 __metal_driver_cpu_exception_register
20011a82 g     F .text	00000018 __metal_interrupt_software_enable
20012004  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20010a4a g     F .text	000000ac _free_r
80000ad8 g     O .bss	00000004 _global_atexit
20012892 g     F .text	00000050 __metal_controller_interrupt_vector_mode
200110bc g     F .text	000000c8 __call_exitprocs
80000f6c g       .stack	00000000 _sp
2001007e g     F .init	00000000 _start
20013848 g     F .text	00000084 __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
20010e20 g     F .text	0000002a _lseek
2001313c g     F .text	00000020 __metal_driver_cpu_controller_interrupt
200131d0 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20011ae6 g     F .text	0000001c __metal_interrupt_external_enable
20011034 g     F .text	00000088 __register_exitproc
20014da4 g     F .text	00000040 __metal_driver_sifive_uart0_putc
20013566 g     F .text	0000013c __metal_driver_riscv_plic0_init
20013762 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20014560 g     F .text	0000002c __metal_driver_sifive_gpio0_output
200122de  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20011a38 g     F .text	0000001a __metal_myhart_id
20014b38 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20011bd4  w    F .text	0000008e metal_software_interrupt_vector_handler
20012d72 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
20010ce2 g     F .text	00000028 _close_r
20014e3a g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20011524 g     F .text	000000da __metal_driver_riscv_clint0_register
80000a98 g     O .data	00000008 __metal_dt_clint_2000000
200103c6 g     F .text	00000110 __swsetup_r
200107a4 g     F .text	0000009e __sfp
2001518e g     F .text	00000048 metal_clock_set_rate_hz
20010bfc g     F .text	00000030 __sread
200144b0 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
20010176  w    F .init	00000000 secondary_main
20011ba6  w    F .text	0000002e metal_interrupt_vector_handler
20010d88 g     F .text	00000002 __malloc_lock
20010620 g     F .text	00000064 _fflush_r
20013372 g     F .text	0000002c __metal_plic0_get_threshold
2001409c g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_get_reg
20015474 g     O .rodata	00000020 __sf_fake_stdin
200129b2 g     F .text	000000bc __metal_local_interrupt_enable
200117fa g     F .text	00000132 __metal_driver_riscv_clint0_command_request
200109a2 g     F .text	000000a8 memset
2001224c  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20010200 g     F .text	0000001e main
80000ad0 g       .data	00000000 metal_segment_data_target_end
80000aac g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
20013018 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
200130dc g     F .text	00000060 __metal_driver_cpu_get_msip
200152a2 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
200131ee g     F .text	00000020 __metal_driver_cpu_set_exception_pc
200132d4 g     F .text	0000002e __metal_plic0_claim_interrupt
20010cb0 g     F .text	00000006 __sclose
2001264a  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20010af6 g     F .text	000000de _malloc_r
20011626 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
80000aa8 g     O .data	00000004 __metal_dt_prci_10008000
20012ea2 g     F .text	00000046 __metal_driver_cpu_timebase_get
20010000 g       .init	00000000 _enter
20015288 g     F .text	0000001a metal_cpu_get_current_hartid
20013944 g     F .text	00000074 __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20015300 g       .text	00000000 __metal_vector_table
200160a0 g       *ABS*	00000000 metal_segment_itim_source_start
80000a94  w    O .data	00000004 __metal_cpu_table
80000090 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20010174 g     F .init	00000002 _fini
20011a52 g     F .text	00000018 __metal_interrupt_global_enable
20010f50 g     F .text	0000000a atexit
200111b0 g     F .text	00000026 metal_tty_putc_raw
20010cb6 g     F .text	0000002c _write_r
20011ab2 g     F .text	0000001a __metal_interrupt_timer_enable
20014de4 g     F .text	00000056 __metal_driver_sifive_uart0_getc
20011748 g     F .text	000000b2 __metal_driver_riscv_clint0_disable
80000a88 g     O .data	00000004 _impure_ptr
20012f4e g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
200104d6 g     F .text	0000014a __sflush_r
20013b0a g     F .text	000000a4 __metal_driver_sifive_fe310_g000_pll_init
80000078 g     O .data	0000000c __metal_dt_clock_5
200140ca g     F .text	00000038 __metal_driver_sifive_fe310_g000_prci_set_reg
200153f0 g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20011696 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
200160a0 g       *ABS*	00000000 metal_segment_data_source_start
8000176c g       .heap	00000000 metal_segment_heap_target_end
200128e2 g     F .text	00000098 __metal_controller_interrupt_vector
80000a6c g     O .data	0000000c __metal_dt_clock_1
80000448 g     O .data	000005d8 __metal_dt_interrupt_controller_c000000
200108ae g     F .text	00000058 __swhatbuf_r
20014652 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20011d54 g     F .text	00000066 __metal_default_timer_handler
20010ee2 g     F .text	0000006e _write
200134d8 g     F .text	0000008e __metal_plic0_handler
20012096  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20012800  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20015238 g     F .text	00000026 metal_cpu_interrupt_controller
20010c2c g     F .text	0000004e __swrite
20010f66 g     F .text	0000002c exit
20010842 g     F .text	0000006c _fwalk_reent
2001540e g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20015494 g     O .rodata	00000020 __sf_fake_stdout
80000aa4 g     O .data	00000004 __metal_dt_gpio_10012000
20011b8e g     F .text	00000018 __metal_default_interrupt_handler
20011224 g     F .text	0000002e metal_uart_putc
20010e4a g     F .text	0000002a _read
20014536 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20011e00 g     F .text	0000014c __metal_exception_handler
20011f72  w    F .text	00000092 metal_lc0_interrupt_vector_handler
20015430 g     F .text	00000014 _exit
20012ee8 g     F .text	00000066 __metal_driver_cpu_mtime_get
20010906 g     F .text	0000009c __smakebuf_r
200115fe g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
80000ad4 g     O .bss	00000004 __malloc_sbrk_start
2001276e  w    F .text	00000092 metal_lc14_interrupt_vector_handler
80000ab4 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
2001149c g     F .text	00000088 __metal_driver_riscv_clint0_init
80000ad0 g     O .bss	00000004 __malloc_free_list
20012fda g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20013434 g     F .text	0000008c __metal_plic0_enable
2001006e  w      .init	00000000 __register_frame_info
200138cc g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
20012fee g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20011b4a g     F .text	0000002c __metal_interrupt_local_disable
20011a9a g     F .text	00000018 __metal_interrupt_software_disable
20013400 g     F .text	00000034 __metal_plic0_get_priority
200111f8 g     F .text	0000002c metal_uart_init
80000a60 g     O .data	0000000c __metal_dt_clock_3
80000084 g     O .data	0000000c __metal_dt_clock_6
2001333a g     F .text	00000038 __metal_plic0_set_threshold
20010db8 g     F .text	00000022 _close
80000abc g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
00000000 g       *ABS*	00000000 __metal_boot_hart
200136a2 g     F .text	000000c0 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20010000 <_enter>:
_enter():
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20010000:	5fff1197          	auipc	gp,0x5fff1
20010004:	28818193          	addi	gp,gp,648 # 80001288 <__global_pointer$>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20010008:	00000297          	auipc	t0,0x0
2001000c:	05828293          	addi	t0,t0,88 # 20010060 <early_trap_vector>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20010010:	30529073          	csrw	mtvec,t0
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20010014:	00000293          	li	t0,0
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:33
    beqz t0, 1f
20010018:	00028463          	beqz	t0,20010020 <_enter+0x20>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2001001c:	7c105073          	csrwi	0x7c1,0
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20010020:	dfff0117          	auipc	sp,0xdfff0
20010024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20010028:	dfff0097          	auipc	ra,0xdfff0
2001002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:53
    beqz ra, 1f
20010030:	00008363          	beqz	ra,20010036 <_enter+0x36>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:54
    jalr ra
20010034:	9082                	jalr	ra
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20010036:	f1402573          	csrr	a0,mhartid
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:61
    li a1, 0
2001003a:	4581                	li	a1,0
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:62
    li a2, 0
2001003c:	4601                	li	a2,0
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:63
    call _start
2001003e:	2081                	jal	2001007e <_start>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20010040:	dfff0097          	auipc	ra,0xdfff0
20010044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:69
    beqz ra, 1f
20010048:	00008363          	beqz	ra,2001004e <_enter+0x4e>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:70
    jalr ra
2001004c:	9082                	jalr	ra
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2001004e:	00000297          	auipc	t0,0x0
20010052:	00c28293          	addi	t0,t0,12 # 2001005a <_enter+0x5a>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20010056:	30529073          	csrw	mtvec,t0
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2001005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:79
     j 1b
2001005e:	bff5                	j	2001005a <_enter+0x5a>

20010060 <early_trap_vector>:
early_trap_vector():
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20010060:	342022f3          	csrr	t0,mcause
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:90
    csrr t1, mepc
20010064:	34102373          	csrr	t1,mepc
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:91
    csrr t2, mtval
20010068:	343023f3          	csrr	t2,mtval
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:92
    j early_trap_vector
2001006c:	bfd5                	j	20010060 <early_trap_vector>

2001006e <__register_frame_info>:
__register_frame_info():
/home/picard/Documents/cleanflight/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2001006e:	8082                	ret

20010070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/picard/Documents/cleanflight/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20010070:	1141                	addi	sp,sp,-16
20010072:	c622                	sw	s0,12(sp)
20010074:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20010076:	0001                	nop
20010078:	4432                	lw	s0,12(sp)
2001007a:	0141                	addi	sp,sp,16
2001007c:	8082                	ret

2001007e <_start>:
_start():
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2001007e:	8406                	mv	s0,ra
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20010080:	5fff1197          	auipc	gp,0x5fff1
20010084:	20818193          	addi	gp,gp,520 # 80001288 <__global_pointer$>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20010088:	ce418113          	addi	sp,gp,-796 # 80000f6c <_sp>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2001008c:	4281                	li	t0,0
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2001008e:	40000313          	li	t1,1024
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20010092:	00a28563          	beq	t0,a0,2001009c <_start+0x1e>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20010096:	911a                	add	sp,sp,t1
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20010098:	0285                	addi	t0,t0,1
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:60
  j 1b
2001009a:	bfe5                	j	20010092 <_start+0x14>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2001009c:	ff017113          	andi	sp,sp,-16
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
200100a0:	00000293          	li	t0,0
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
200100a4:	08551963          	bne	a0,t0,20010136 <_skip_init>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
200100a8:	00006297          	auipc	t0,0x6
200100ac:	ff828293          	addi	t0,t0,-8 # 200160a0 <metal_segment_data_source_start>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
200100b0:	5fff0317          	auipc	t1,0x5fff0
200100b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
200100b8:	84818393          	addi	t2,gp,-1976 # 80000ad0 <metal_segment_data_target_end>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
200100bc:	00628c63          	beq	t0,t1,200100d4 <_start+0x56>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
200100c0:	00735a63          	bge	t1,t2,200100d4 <_start+0x56>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200100c4:	0002a503          	lw	a0,0(t0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
200100c8:	0291                	addi	t0,t0,4
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
200100ca:	00a32023          	sw	a0,0(t1)
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
200100ce:	0311                	addi	t1,t1,4
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
200100d0:	fe734ae3          	blt	t1,t2,200100c4 <_start+0x46>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
200100d4:	00006297          	auipc	t0,0x6
200100d8:	fcc28293          	addi	t0,t0,-52 # 200160a0 <metal_segment_data_source_start>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
200100dc:	e7ff0317          	auipc	t1,0xe7ff0
200100e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
200100e4:	e7ff0397          	auipc	t2,0xe7ff0
200100e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
200100ec:	00628c63          	beq	t0,t1,20010104 <_start+0x86>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
200100f0:	00735a63          	bge	t1,t2,20010104 <_start+0x86>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200100f4:	0002a503          	lw	a0,0(t0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
200100f8:	0291                	addi	t0,t0,4
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
200100fa:	00a32023          	sw	a0,0(t1)
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
200100fe:	0311                	addi	t1,t1,4
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20010100:	fe734ae3          	blt	t1,t2,200100f4 <_start+0x76>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20010104:	0000100f          	fence.i
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20010108:	5fff1317          	auipc	t1,0x5fff1
2001010c:	9c830313          	addi	t1,t1,-1592 # 80000ad0 <metal_segment_data_target_end>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20010110:	8e418393          	addi	t2,gp,-1820 # 80000b6c <metal_segment_bss_target_end>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20010114:	00735763          	bge	t1,t2,20010122 <_start+0xa4>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20010118:	00032023          	sw	zero,0(t1)
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2001011c:	0311                	addi	t1,t1,4
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2001011e:	fe734de3          	blt	t1,t2,20010118 <_start+0x9a>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20010122:	c211                	beqz	a2,20010126 <_start+0xa8>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:148
  jalr a2
20010124:	9602                	jalr	a2
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20010126:	00001517          	auipc	a0,0x1
2001012a:	e6c50513          	addi	a0,a0,-404 # 20010f92 <__libc_fini_array>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:153
  call atexit
2001012e:	623000ef          	jal	ra,20010f50 <atexit>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20010132:	699000ef          	jal	ra,20010fca <__libc_init_array>

20010136 <_skip_init>:
_skip_init():
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20010136:	3f2d                	jal	20010070 <__metal_synchronize_harts>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20010138:	301027f3          	csrr	a5,misa
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2001013c:	00010737          	lui	a4,0x10
20010140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20010144:	8ff9                	and	a5,a5,a4
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20010146:	cb89                	beqz	a5,20010158 <_skip_init+0x22>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20010148:	300027f3          	csrr	a5,mstatus
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2001014c:	6709                	lui	a4,0x2
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2001014e:	8fd9                	or	a5,a5,a4
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20010150:	30079073          	csrw	mstatus,a5
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20010154:	00305073          	csrwi	fcsr,0
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20010158:	4505                	li	a0,1
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2001015a:	00005597          	auipc	a1,0x5
2001015e:	35a58593          	addi	a1,a1,858 # 200154b4 <argv>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20010162:	00005617          	auipc	a2,0x5
20010166:	35660613          	addi	a2,a2,854 # 200154b8 <envp>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:180
  call secondary_main
2001016a:	2031                	jal	20010176 <secondary_main>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2001016c:	5fb000ef          	jal	ra,20010f66 <exit>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20010170:	80a2                	mv	ra,s0
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:192
  ret
20010172:	8082                	ret

20010174 <_fini>:
_init():
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20010174:	8082                	ret

20010176 <secondary_main>:
secondary_main():
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20010176:	1141                	addi	sp,sp,-16
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20010178:	c206                	sw	ra,4(sp)
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2001017a:	f14022f3          	csrr	t0,mhartid
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2001017e:	00000313          	li	t1,0
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20010182:	00628563          	beq	t0,t1,2001018c <secondary_main+0x16>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:225
1:
  wfi
20010186:	10500073          	wfi
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:226
  j 1b
2001018a:	bff5                	j	20010186 <secondary_main+0x10>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:228
2:
  call main
2001018c:	2895                	jal	20010200 <main>
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2001018e:	4092                	lw	ra,4(sp)
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20010190:	0141                	addi	sp,sp,16
/home/picard/Documents/cleanflight/freedom-metal/gloss/crt0.S:235
  ret
20010192:	8082                	ret

Disassembly of section .text:

20010200 <main>:
main():
/home/picard/Documents/cleanflight/sifive_src/hello.c:6
/* Copyright 2019 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#include <stdio.h>

int main() {
20010200:	1141                	addi	sp,sp,-16
20010202:	c606                	sw	ra,12(sp)
20010204:	c422                	sw	s0,8(sp)
20010206:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/sifive_src/hello.c:7
    printf("Hello, World!\n");
20010208:	200157b7          	lui	a5,0x20015
2001020c:	44478513          	addi	a0,a5,1092 # 20015444 <_exit+0x14>
20010210:	20e5                	jal	200102f8 <puts>
20010212:	4781                	li	a5,0
/home/picard/Documents/cleanflight/sifive_src/hello.c:8
}
20010214:	853e                	mv	a0,a5
20010216:	40b2                	lw	ra,12(sp)
20010218:	4422                	lw	s0,8(sp)
2001021a:	0141                	addi	sp,sp,16
2001021c:	8082                	ret

2001021e <_puts_r>:
_puts_r():
2001021e:	1101                	addi	sp,sp,-32
20010220:	ca26                	sw	s1,20(sp)
20010222:	c84a                	sw	s2,16(sp)
20010224:	ce06                	sw	ra,28(sp)
20010226:	cc22                	sw	s0,24(sp)
20010228:	c64e                	sw	s3,12(sp)
2001022a:	c452                	sw	s4,8(sp)
2001022c:	84aa                	mv	s1,a0
2001022e:	892e                	mv	s2,a1
20010230:	c501                	beqz	a0,20010238 <_puts_r+0x1a>
20010232:	4d1c                	lw	a5,24(a0)
20010234:	e391                	bnez	a5,20010238 <_puts_r+0x1a>
20010236:	2311                	jal	2001073a <__sinit>
20010238:	4c9c                	lw	a5,24(s1)
2001023a:	4480                	lw	s0,8(s1)
2001023c:	e399                	bnez	a5,20010242 <_puts_r+0x24>
2001023e:	8526                	mv	a0,s1
20010240:	29ed                	jal	2001073a <__sinit>
20010242:	00005797          	auipc	a5,0x5
20010246:	23278793          	addi	a5,a5,562 # 20015474 <__sf_fake_stdin>
2001024a:	02f41c63          	bne	s0,a5,20010282 <_puts_r+0x64>
2001024e:	40c0                	lw	s0,4(s1)
20010250:	00c45783          	lhu	a5,12(s0)
20010254:	8ba1                	andi	a5,a5,8
20010256:	c7b1                	beqz	a5,200102a2 <_puts_r+0x84>
20010258:	481c                	lw	a5,16(s0)
2001025a:	c7a1                	beqz	a5,200102a2 <_puts_r+0x84>
2001025c:	59fd                	li	s3,-1
2001025e:	4a29                	li	s4,10
20010260:	441c                	lw	a5,8(s0)
20010262:	00094583          	lbu	a1,0(s2)
20010266:	17fd                	addi	a5,a5,-1
20010268:	e9b1                	bnez	a1,200102bc <_puts_r+0x9e>
2001026a:	c41c                	sw	a5,8(s0)
2001026c:	0607de63          	bgez	a5,200102e8 <_puts_r+0xca>
20010270:	8622                	mv	a2,s0
20010272:	45a9                	li	a1,10
20010274:	8526                	mv	a0,s1
20010276:	2841                	jal	20010306 <__swbuf_r>
20010278:	57fd                	li	a5,-1
2001027a:	02f50863          	beq	a0,a5,200102aa <_puts_r+0x8c>
2001027e:	4529                	li	a0,10
20010280:	a035                	j	200102ac <_puts_r+0x8e>
20010282:	00005797          	auipc	a5,0x5
20010286:	21278793          	addi	a5,a5,530 # 20015494 <__sf_fake_stdout>
2001028a:	00f41463          	bne	s0,a5,20010292 <_puts_r+0x74>
2001028e:	4480                	lw	s0,8(s1)
20010290:	b7c1                	j	20010250 <_puts_r+0x32>
20010292:	00005797          	auipc	a5,0x5
20010296:	1c278793          	addi	a5,a5,450 # 20015454 <__sf_fake_stderr>
2001029a:	faf41be3          	bne	s0,a5,20010250 <_puts_r+0x32>
2001029e:	44c0                	lw	s0,12(s1)
200102a0:	bf45                	j	20010250 <_puts_r+0x32>
200102a2:	85a2                	mv	a1,s0
200102a4:	8526                	mv	a0,s1
200102a6:	2205                	jal	200103c6 <__swsetup_r>
200102a8:	d955                	beqz	a0,2001025c <_puts_r+0x3e>
200102aa:	557d                	li	a0,-1
200102ac:	40f2                	lw	ra,28(sp)
200102ae:	4462                	lw	s0,24(sp)
200102b0:	44d2                	lw	s1,20(sp)
200102b2:	4942                	lw	s2,16(sp)
200102b4:	49b2                	lw	s3,12(sp)
200102b6:	4a22                	lw	s4,8(sp)
200102b8:	6105                	addi	sp,sp,32
200102ba:	8082                	ret
200102bc:	c41c                	sw	a5,8(s0)
200102be:	0905                	addi	s2,s2,1
200102c0:	0007d763          	bgez	a5,200102ce <_puts_r+0xb0>
200102c4:	4c18                	lw	a4,24(s0)
200102c6:	00e7cb63          	blt	a5,a4,200102dc <_puts_r+0xbe>
200102ca:	01458963          	beq	a1,s4,200102dc <_puts_r+0xbe>
200102ce:	401c                	lw	a5,0(s0)
200102d0:	00178713          	addi	a4,a5,1
200102d4:	c018                	sw	a4,0(s0)
200102d6:	00b78023          	sb	a1,0(a5)
200102da:	b759                	j	20010260 <_puts_r+0x42>
200102dc:	8622                	mv	a2,s0
200102de:	8526                	mv	a0,s1
200102e0:	201d                	jal	20010306 <__swbuf_r>
200102e2:	f7351fe3          	bne	a0,s3,20010260 <_puts_r+0x42>
200102e6:	b7d1                	j	200102aa <_puts_r+0x8c>
200102e8:	401c                	lw	a5,0(s0)
200102ea:	00178713          	addi	a4,a5,1
200102ee:	c018                	sw	a4,0(s0)
200102f0:	4729                	li	a4,10
200102f2:	00e78023          	sb	a4,0(a5)
200102f6:	b761                	j	2001027e <_puts_r+0x60>

200102f8 <puts>:
puts():
200102f8:	5fff0797          	auipc	a5,0x5fff0
200102fc:	79078793          	addi	a5,a5,1936 # 80000a88 <_impure_ptr>
20010300:	85aa                	mv	a1,a0
20010302:	4388                	lw	a0,0(a5)
20010304:	bf29                	j	2001021e <_puts_r>

20010306 <__swbuf_r>:
__swbuf_r():
20010306:	1101                	addi	sp,sp,-32
20010308:	cc22                	sw	s0,24(sp)
2001030a:	ca26                	sw	s1,20(sp)
2001030c:	c84a                	sw	s2,16(sp)
2001030e:	ce06                	sw	ra,28(sp)
20010310:	c64e                	sw	s3,12(sp)
20010312:	84aa                	mv	s1,a0
20010314:	892e                	mv	s2,a1
20010316:	8432                	mv	s0,a2
20010318:	c501                	beqz	a0,20010320 <__swbuf_r+0x1a>
2001031a:	4d1c                	lw	a5,24(a0)
2001031c:	e391                	bnez	a5,20010320 <__swbuf_r+0x1a>
2001031e:	2931                	jal	2001073a <__sinit>
20010320:	00005797          	auipc	a5,0x5
20010324:	15478793          	addi	a5,a5,340 # 20015474 <__sf_fake_stdin>
20010328:	06f41963          	bne	s0,a5,2001039a <__swbuf_r+0x94>
2001032c:	40c0                	lw	s0,4(s1)
2001032e:	4c1c                	lw	a5,24(s0)
20010330:	c41c                	sw	a5,8(s0)
20010332:	00c45783          	lhu	a5,12(s0)
20010336:	8ba1                	andi	a5,a5,8
20010338:	c3c9                	beqz	a5,200103ba <__swbuf_r+0xb4>
2001033a:	481c                	lw	a5,16(s0)
2001033c:	cfbd                	beqz	a5,200103ba <__swbuf_r+0xb4>
2001033e:	481c                	lw	a5,16(s0)
20010340:	4008                	lw	a0,0(s0)
20010342:	0ff97993          	andi	s3,s2,255
20010346:	0ff97913          	andi	s2,s2,255
2001034a:	8d1d                	sub	a0,a0,a5
2001034c:	485c                	lw	a5,20(s0)
2001034e:	00f54663          	blt	a0,a5,2001035a <__swbuf_r+0x54>
20010352:	85a2                	mv	a1,s0
20010354:	8526                	mv	a0,s1
20010356:	24e9                	jal	20010620 <_fflush_r>
20010358:	e52d                	bnez	a0,200103c2 <__swbuf_r+0xbc>
2001035a:	441c                	lw	a5,8(s0)
2001035c:	0505                	addi	a0,a0,1
2001035e:	17fd                	addi	a5,a5,-1
20010360:	c41c                	sw	a5,8(s0)
20010362:	401c                	lw	a5,0(s0)
20010364:	00178713          	addi	a4,a5,1
20010368:	c018                	sw	a4,0(s0)
2001036a:	01378023          	sb	s3,0(a5)
2001036e:	485c                	lw	a5,20(s0)
20010370:	00a78963          	beq	a5,a0,20010382 <__swbuf_r+0x7c>
20010374:	00c45783          	lhu	a5,12(s0)
20010378:	8b85                	andi	a5,a5,1
2001037a:	cb81                	beqz	a5,2001038a <__swbuf_r+0x84>
2001037c:	47a9                	li	a5,10
2001037e:	00f91663          	bne	s2,a5,2001038a <__swbuf_r+0x84>
20010382:	85a2                	mv	a1,s0
20010384:	8526                	mv	a0,s1
20010386:	2c69                	jal	20010620 <_fflush_r>
20010388:	ed0d                	bnez	a0,200103c2 <__swbuf_r+0xbc>
2001038a:	40f2                	lw	ra,28(sp)
2001038c:	4462                	lw	s0,24(sp)
2001038e:	854a                	mv	a0,s2
20010390:	44d2                	lw	s1,20(sp)
20010392:	4942                	lw	s2,16(sp)
20010394:	49b2                	lw	s3,12(sp)
20010396:	6105                	addi	sp,sp,32
20010398:	8082                	ret
2001039a:	00005797          	auipc	a5,0x5
2001039e:	0fa78793          	addi	a5,a5,250 # 20015494 <__sf_fake_stdout>
200103a2:	00f41463          	bne	s0,a5,200103aa <__swbuf_r+0xa4>
200103a6:	4480                	lw	s0,8(s1)
200103a8:	b759                	j	2001032e <__swbuf_r+0x28>
200103aa:	00005797          	auipc	a5,0x5
200103ae:	0aa78793          	addi	a5,a5,170 # 20015454 <__sf_fake_stderr>
200103b2:	f6f41ee3          	bne	s0,a5,2001032e <__swbuf_r+0x28>
200103b6:	44c0                	lw	s0,12(s1)
200103b8:	bf9d                	j	2001032e <__swbuf_r+0x28>
200103ba:	85a2                	mv	a1,s0
200103bc:	8526                	mv	a0,s1
200103be:	2021                	jal	200103c6 <__swsetup_r>
200103c0:	dd3d                	beqz	a0,2001033e <__swbuf_r+0x38>
200103c2:	597d                	li	s2,-1
200103c4:	b7d9                	j	2001038a <__swbuf_r+0x84>

200103c6 <__swsetup_r>:
__swsetup_r():
200103c6:	1141                	addi	sp,sp,-16
200103c8:	5fff0797          	auipc	a5,0x5fff0
200103cc:	6c078793          	addi	a5,a5,1728 # 80000a88 <_impure_ptr>
200103d0:	c226                	sw	s1,4(sp)
200103d2:	4384                	lw	s1,0(a5)
200103d4:	c422                	sw	s0,8(sp)
200103d6:	c04a                	sw	s2,0(sp)
200103d8:	c606                	sw	ra,12(sp)
200103da:	892a                	mv	s2,a0
200103dc:	842e                	mv	s0,a1
200103de:	c489                	beqz	s1,200103e8 <__swsetup_r+0x22>
200103e0:	4c9c                	lw	a5,24(s1)
200103e2:	e399                	bnez	a5,200103e8 <__swsetup_r+0x22>
200103e4:	8526                	mv	a0,s1
200103e6:	2e91                	jal	2001073a <__sinit>
200103e8:	00005797          	auipc	a5,0x5
200103ec:	08c78793          	addi	a5,a5,140 # 20015474 <__sf_fake_stdin>
200103f0:	02f41c63          	bne	s0,a5,20010428 <__swsetup_r+0x62>
200103f4:	40c0                	lw	s0,4(s1)
200103f6:	00c41703          	lh	a4,12(s0)
200103fa:	01071793          	slli	a5,a4,0x10
200103fe:	83c1                	srli	a5,a5,0x10
20010400:	0087f693          	andi	a3,a5,8
20010404:	eeb5                	bnez	a3,20010480 <__swsetup_r+0xba>
20010406:	0107f693          	andi	a3,a5,16
2001040a:	ee9d                	bnez	a3,20010448 <__swsetup_r+0x82>
2001040c:	47a5                	li	a5,9
2001040e:	00f92023          	sw	a5,0(s2)
20010412:	04076713          	ori	a4,a4,64
20010416:	00e41623          	sh	a4,12(s0)
2001041a:	557d                	li	a0,-1
2001041c:	40b2                	lw	ra,12(sp)
2001041e:	4422                	lw	s0,8(sp)
20010420:	4492                	lw	s1,4(sp)
20010422:	4902                	lw	s2,0(sp)
20010424:	0141                	addi	sp,sp,16
20010426:	8082                	ret
20010428:	00005797          	auipc	a5,0x5
2001042c:	06c78793          	addi	a5,a5,108 # 20015494 <__sf_fake_stdout>
20010430:	00f41463          	bne	s0,a5,20010438 <__swsetup_r+0x72>
20010434:	4480                	lw	s0,8(s1)
20010436:	b7c1                	j	200103f6 <__swsetup_r+0x30>
20010438:	00005797          	auipc	a5,0x5
2001043c:	01c78793          	addi	a5,a5,28 # 20015454 <__sf_fake_stderr>
20010440:	faf41be3          	bne	s0,a5,200103f6 <__swsetup_r+0x30>
20010444:	44c0                	lw	s0,12(s1)
20010446:	bf45                	j	200103f6 <__swsetup_r+0x30>
20010448:	8b91                	andi	a5,a5,4
2001044a:	c78d                	beqz	a5,20010474 <__swsetup_r+0xae>
2001044c:	584c                	lw	a1,52(s0)
2001044e:	c989                	beqz	a1,20010460 <__swsetup_r+0x9a>
20010450:	04440793          	addi	a5,s0,68
20010454:	00f58463          	beq	a1,a5,2001045c <__swsetup_r+0x96>
20010458:	854a                	mv	a0,s2
2001045a:	2bc5                	jal	20010a4a <_free_r>
2001045c:	02042a23          	sw	zero,52(s0)
20010460:	00c45783          	lhu	a5,12(s0)
20010464:	00042223          	sw	zero,4(s0)
20010468:	fdb7f793          	andi	a5,a5,-37
2001046c:	00f41623          	sh	a5,12(s0)
20010470:	481c                	lw	a5,16(s0)
20010472:	c01c                	sw	a5,0(s0)
20010474:	00c45783          	lhu	a5,12(s0)
20010478:	0087e793          	ori	a5,a5,8
2001047c:	00f41623          	sh	a5,12(s0)
20010480:	481c                	lw	a5,16(s0)
20010482:	ef81                	bnez	a5,2001049a <__swsetup_r+0xd4>
20010484:	00c45783          	lhu	a5,12(s0)
20010488:	20000713          	li	a4,512
2001048c:	2807f793          	andi	a5,a5,640
20010490:	00e78563          	beq	a5,a4,2001049a <__swsetup_r+0xd4>
20010494:	85a2                	mv	a1,s0
20010496:	854a                	mv	a0,s2
20010498:	21bd                	jal	20010906 <__smakebuf_r>
2001049a:	00c45783          	lhu	a5,12(s0)
2001049e:	0017f713          	andi	a4,a5,1
200104a2:	c705                	beqz	a4,200104ca <__swsetup_r+0x104>
200104a4:	485c                	lw	a5,20(s0)
200104a6:	00042423          	sw	zero,8(s0)
200104aa:	40f007b3          	neg	a5,a5
200104ae:	cc1c                	sw	a5,24(s0)
200104b0:	481c                	lw	a5,16(s0)
200104b2:	4501                	li	a0,0
200104b4:	f7a5                	bnez	a5,2001041c <__swsetup_r+0x56>
200104b6:	00c41783          	lh	a5,12(s0)
200104ba:	0807f713          	andi	a4,a5,128
200104be:	df39                	beqz	a4,2001041c <__swsetup_r+0x56>
200104c0:	0407e793          	ori	a5,a5,64
200104c4:	00f41623          	sh	a5,12(s0)
200104c8:	bf89                	j	2001041a <__swsetup_r+0x54>
200104ca:	8b89                	andi	a5,a5,2
200104cc:	4701                	li	a4,0
200104ce:	e391                	bnez	a5,200104d2 <__swsetup_r+0x10c>
200104d0:	4858                	lw	a4,20(s0)
200104d2:	c418                	sw	a4,8(s0)
200104d4:	bff1                	j	200104b0 <__swsetup_r+0xea>

200104d6 <__sflush_r>:
__sflush_r():
200104d6:	00c5d783          	lhu	a5,12(a1)
200104da:	1101                	addi	sp,sp,-32
200104dc:	cc22                	sw	s0,24(sp)
200104de:	ca26                	sw	s1,20(sp)
200104e0:	ce06                	sw	ra,28(sp)
200104e2:	c84a                	sw	s2,16(sp)
200104e4:	c64e                	sw	s3,12(sp)
200104e6:	0087f713          	andi	a4,a5,8
200104ea:	84aa                	mv	s1,a0
200104ec:	842e                	mv	s0,a1
200104ee:	e765                	bnez	a4,200105d6 <__sflush_r+0x100>
200104f0:	41d8                	lw	a4,4(a1)
200104f2:	00e04763          	bgtz	a4,20010500 <__sflush_r+0x2a>
200104f6:	41b8                	lw	a4,64(a1)
200104f8:	00e04463          	bgtz	a4,20010500 <__sflush_r+0x2a>
200104fc:	4501                	li	a0,0
200104fe:	a0c1                	j	200105be <__sflush_r+0xe8>
20010500:	5458                	lw	a4,44(s0)
20010502:	df6d                	beqz	a4,200104fc <__sflush_r+0x26>
20010504:	0004a903          	lw	s2,0(s1)
20010508:	01379693          	slli	a3,a5,0x13
2001050c:	0004a023          	sw	zero,0(s1)
20010510:	0606de63          	bgez	a3,2001058c <__sflush_r+0xb6>
20010514:	4868                	lw	a0,84(s0)
20010516:	00c45783          	lhu	a5,12(s0)
2001051a:	8b91                	andi	a5,a5,4
2001051c:	c799                	beqz	a5,2001052a <__sflush_r+0x54>
2001051e:	405c                	lw	a5,4(s0)
20010520:	8d1d                	sub	a0,a0,a5
20010522:	585c                	lw	a5,52(s0)
20010524:	c399                	beqz	a5,2001052a <__sflush_r+0x54>
20010526:	403c                	lw	a5,64(s0)
20010528:	8d1d                	sub	a0,a0,a5
2001052a:	545c                	lw	a5,44(s0)
2001052c:	500c                	lw	a1,32(s0)
2001052e:	862a                	mv	a2,a0
20010530:	4681                	li	a3,0
20010532:	8526                	mv	a0,s1
20010534:	9782                	jalr	a5
20010536:	57fd                	li	a5,-1
20010538:	00c45703          	lhu	a4,12(s0)
2001053c:	00f51d63          	bne	a0,a5,20010556 <__sflush_r+0x80>
20010540:	4094                	lw	a3,0(s1)
20010542:	47f5                	li	a5,29
20010544:	08d7e463          	bltu	a5,a3,200105cc <__sflush_r+0xf6>
20010548:	204007b7          	lui	a5,0x20400
2001054c:	0785                	addi	a5,a5,1
2001054e:	00d7d7b3          	srl	a5,a5,a3
20010552:	8b85                	andi	a5,a5,1
20010554:	cfa5                	beqz	a5,200105cc <__sflush_r+0xf6>
20010556:	481c                	lw	a5,16(s0)
20010558:	00042223          	sw	zero,4(s0)
2001055c:	c01c                	sw	a5,0(s0)
2001055e:	01371793          	slli	a5,a4,0x13
20010562:	0007d863          	bgez	a5,20010572 <__sflush_r+0x9c>
20010566:	57fd                	li	a5,-1
20010568:	00f51463          	bne	a0,a5,20010570 <__sflush_r+0x9a>
2001056c:	409c                	lw	a5,0(s1)
2001056e:	e391                	bnez	a5,20010572 <__sflush_r+0x9c>
20010570:	c868                	sw	a0,84(s0)
20010572:	584c                	lw	a1,52(s0)
20010574:	0124a023          	sw	s2,0(s1)
20010578:	d1d1                	beqz	a1,200104fc <__sflush_r+0x26>
2001057a:	04440793          	addi	a5,s0,68
2001057e:	00f58463          	beq	a1,a5,20010586 <__sflush_r+0xb0>
20010582:	8526                	mv	a0,s1
20010584:	21d9                	jal	20010a4a <_free_r>
20010586:	02042a23          	sw	zero,52(s0)
2001058a:	bf8d                	j	200104fc <__sflush_r+0x26>
2001058c:	500c                	lw	a1,32(s0)
2001058e:	4685                	li	a3,1
20010590:	4601                	li	a2,0
20010592:	8526                	mv	a0,s1
20010594:	9702                	jalr	a4
20010596:	57fd                	li	a5,-1
20010598:	f6f51fe3          	bne	a0,a5,20010516 <__sflush_r+0x40>
2001059c:	409c                	lw	a5,0(s1)
2001059e:	dfa5                	beqz	a5,20010516 <__sflush_r+0x40>
200105a0:	4775                	li	a4,29
200105a2:	00e78563          	beq	a5,a4,200105ac <__sflush_r+0xd6>
200105a6:	4759                	li	a4,22
200105a8:	00e79563          	bne	a5,a4,200105b2 <__sflush_r+0xdc>
200105ac:	0124a023          	sw	s2,0(s1)
200105b0:	b7b1                	j	200104fc <__sflush_r+0x26>
200105b2:	00c45783          	lhu	a5,12(s0)
200105b6:	0407e793          	ori	a5,a5,64
200105ba:	00f41623          	sh	a5,12(s0)
200105be:	40f2                	lw	ra,28(sp)
200105c0:	4462                	lw	s0,24(sp)
200105c2:	44d2                	lw	s1,20(sp)
200105c4:	4942                	lw	s2,16(sp)
200105c6:	49b2                	lw	s3,12(sp)
200105c8:	6105                	addi	sp,sp,32
200105ca:	8082                	ret
200105cc:	04076713          	ori	a4,a4,64
200105d0:	00e41623          	sh	a4,12(s0)
200105d4:	b7ed                	j	200105be <__sflush_r+0xe8>
200105d6:	0105a983          	lw	s3,16(a1)
200105da:	f20981e3          	beqz	s3,200104fc <__sflush_r+0x26>
200105de:	0005a903          	lw	s2,0(a1)
200105e2:	8b8d                	andi	a5,a5,3
200105e4:	0135a023          	sw	s3,0(a1)
200105e8:	41390933          	sub	s2,s2,s3
200105ec:	4701                	li	a4,0
200105ee:	e391                	bnez	a5,200105f2 <__sflush_r+0x11c>
200105f0:	49d8                	lw	a4,20(a1)
200105f2:	c418                	sw	a4,8(s0)
200105f4:	f12054e3          	blez	s2,200104fc <__sflush_r+0x26>
200105f8:	541c                	lw	a5,40(s0)
200105fa:	500c                	lw	a1,32(s0)
200105fc:	86ca                	mv	a3,s2
200105fe:	864e                	mv	a2,s3
20010600:	8526                	mv	a0,s1
20010602:	9782                	jalr	a5
20010604:	00a04a63          	bgtz	a0,20010618 <__sflush_r+0x142>
20010608:	00c45783          	lhu	a5,12(s0)
2001060c:	557d                	li	a0,-1
2001060e:	0407e793          	ori	a5,a5,64
20010612:	00f41623          	sh	a5,12(s0)
20010616:	b765                	j	200105be <__sflush_r+0xe8>
20010618:	99aa                	add	s3,s3,a0
2001061a:	40a90933          	sub	s2,s2,a0
2001061e:	bfd9                	j	200105f4 <__sflush_r+0x11e>

20010620 <_fflush_r>:
_fflush_r():
20010620:	499c                	lw	a5,16(a1)
20010622:	cfb9                	beqz	a5,20010680 <_fflush_r+0x60>
20010624:	1101                	addi	sp,sp,-32
20010626:	cc22                	sw	s0,24(sp)
20010628:	ce06                	sw	ra,28(sp)
2001062a:	842a                	mv	s0,a0
2001062c:	c511                	beqz	a0,20010638 <_fflush_r+0x18>
2001062e:	4d1c                	lw	a5,24(a0)
20010630:	e781                	bnez	a5,20010638 <_fflush_r+0x18>
20010632:	c62e                	sw	a1,12(sp)
20010634:	2219                	jal	2001073a <__sinit>
20010636:	45b2                	lw	a1,12(sp)
20010638:	00005797          	auipc	a5,0x5
2001063c:	e3c78793          	addi	a5,a5,-452 # 20015474 <__sf_fake_stdin>
20010640:	00f59b63          	bne	a1,a5,20010656 <_fflush_r+0x36>
20010644:	404c                	lw	a1,4(s0)
20010646:	00c59783          	lh	a5,12(a1)
2001064a:	c795                	beqz	a5,20010676 <_fflush_r+0x56>
2001064c:	8522                	mv	a0,s0
2001064e:	4462                	lw	s0,24(sp)
20010650:	40f2                	lw	ra,28(sp)
20010652:	6105                	addi	sp,sp,32
20010654:	b549                	j	200104d6 <__sflush_r>
20010656:	00005797          	auipc	a5,0x5
2001065a:	e3e78793          	addi	a5,a5,-450 # 20015494 <__sf_fake_stdout>
2001065e:	00f59463          	bne	a1,a5,20010666 <_fflush_r+0x46>
20010662:	440c                	lw	a1,8(s0)
20010664:	b7cd                	j	20010646 <_fflush_r+0x26>
20010666:	00005797          	auipc	a5,0x5
2001066a:	dee78793          	addi	a5,a5,-530 # 20015454 <__sf_fake_stderr>
2001066e:	fcf59ce3          	bne	a1,a5,20010646 <_fflush_r+0x26>
20010672:	444c                	lw	a1,12(s0)
20010674:	bfc9                	j	20010646 <_fflush_r+0x26>
20010676:	40f2                	lw	ra,28(sp)
20010678:	4462                	lw	s0,24(sp)
2001067a:	4501                	li	a0,0
2001067c:	6105                	addi	sp,sp,32
2001067e:	8082                	ret
20010680:	4501                	li	a0,0
20010682:	8082                	ret

20010684 <std>:
std():
20010684:	1141                	addi	sp,sp,-16
20010686:	c422                	sw	s0,8(sp)
20010688:	c606                	sw	ra,12(sp)
2001068a:	842a                	mv	s0,a0
2001068c:	00b51623          	sh	a1,12(a0)
20010690:	00c51723          	sh	a2,14(a0)
20010694:	00052023          	sw	zero,0(a0)
20010698:	00052223          	sw	zero,4(a0)
2001069c:	00052423          	sw	zero,8(a0)
200106a0:	06052223          	sw	zero,100(a0)
200106a4:	00052823          	sw	zero,16(a0)
200106a8:	00052a23          	sw	zero,20(a0)
200106ac:	00052c23          	sw	zero,24(a0)
200106b0:	4621                	li	a2,8
200106b2:	4581                	li	a1,0
200106b4:	05c50513          	addi	a0,a0,92
200106b8:	24ed                	jal	200109a2 <memset>
200106ba:	00000797          	auipc	a5,0x0
200106be:	54278793          	addi	a5,a5,1346 # 20010bfc <__sread>
200106c2:	d05c                	sw	a5,36(s0)
200106c4:	00000797          	auipc	a5,0x0
200106c8:	56878793          	addi	a5,a5,1384 # 20010c2c <__swrite>
200106cc:	d41c                	sw	a5,40(s0)
200106ce:	00000797          	auipc	a5,0x0
200106d2:	5ac78793          	addi	a5,a5,1452 # 20010c7a <__sseek>
200106d6:	d45c                	sw	a5,44(s0)
200106d8:	00000797          	auipc	a5,0x0
200106dc:	5d878793          	addi	a5,a5,1496 # 20010cb0 <__sclose>
200106e0:	d000                	sw	s0,32(s0)
200106e2:	d81c                	sw	a5,48(s0)
200106e4:	40b2                	lw	ra,12(sp)
200106e6:	4422                	lw	s0,8(sp)
200106e8:	0141                	addi	sp,sp,16
200106ea:	8082                	ret

200106ec <_cleanup_r>:
_cleanup_r():
200106ec:	00000597          	auipc	a1,0x0
200106f0:	f3458593          	addi	a1,a1,-204 # 20010620 <_fflush_r>
200106f4:	a2b9                	j	20010842 <_fwalk_reent>

200106f6 <__sfmoreglue>:
__sfmoreglue():
200106f6:	1141                	addi	sp,sp,-16
200106f8:	c226                	sw	s1,4(sp)
200106fa:	06800613          	li	a2,104
200106fe:	fff58493          	addi	s1,a1,-1
20010702:	02c484b3          	mul	s1,s1,a2
20010706:	c04a                	sw	s2,0(sp)
20010708:	892e                	mv	s2,a1
2001070a:	c422                	sw	s0,8(sp)
2001070c:	c606                	sw	ra,12(sp)
2001070e:	07448593          	addi	a1,s1,116
20010712:	26d5                	jal	20010af6 <_malloc_r>
20010714:	842a                	mv	s0,a0
20010716:	c919                	beqz	a0,2001072c <__sfmoreglue+0x36>
20010718:	00052023          	sw	zero,0(a0)
2001071c:	01252223          	sw	s2,4(a0)
20010720:	0531                	addi	a0,a0,12
20010722:	c408                	sw	a0,8(s0)
20010724:	06848613          	addi	a2,s1,104
20010728:	4581                	li	a1,0
2001072a:	2ca5                	jal	200109a2 <memset>
2001072c:	8522                	mv	a0,s0
2001072e:	40b2                	lw	ra,12(sp)
20010730:	4422                	lw	s0,8(sp)
20010732:	4492                	lw	s1,4(sp)
20010734:	4902                	lw	s2,0(sp)
20010736:	0141                	addi	sp,sp,16
20010738:	8082                	ret

2001073a <__sinit>:
__sinit():
2001073a:	4d1c                	lw	a5,24(a0)
2001073c:	e3bd                	bnez	a5,200107a2 <__sinit+0x68>
2001073e:	1141                	addi	sp,sp,-16
20010740:	c606                	sw	ra,12(sp)
20010742:	c422                	sw	s0,8(sp)
20010744:	00000797          	auipc	a5,0x0
20010748:	fa878793          	addi	a5,a5,-88 # 200106ec <_cleanup_r>
2001074c:	d51c                	sw	a5,40(a0)
2001074e:	5fff0797          	auipc	a5,0x5fff0
20010752:	33e78793          	addi	a5,a5,830 # 80000a8c <_global_impure_ptr>
20010756:	439c                	lw	a5,0(a5)
20010758:	04052423          	sw	zero,72(a0)
2001075c:	04052623          	sw	zero,76(a0)
20010760:	04052823          	sw	zero,80(a0)
20010764:	00f51463          	bne	a0,a5,2001076c <__sinit+0x32>
20010768:	4785                	li	a5,1
2001076a:	cd1c                	sw	a5,24(a0)
2001076c:	842a                	mv	s0,a0
2001076e:	281d                	jal	200107a4 <__sfp>
20010770:	c048                	sw	a0,4(s0)
20010772:	8522                	mv	a0,s0
20010774:	2805                	jal	200107a4 <__sfp>
20010776:	c408                	sw	a0,8(s0)
20010778:	8522                	mv	a0,s0
2001077a:	202d                	jal	200107a4 <__sfp>
2001077c:	c448                	sw	a0,12(s0)
2001077e:	4048                	lw	a0,4(s0)
20010780:	4601                	li	a2,0
20010782:	4591                	li	a1,4
20010784:	3701                	jal	20010684 <std>
20010786:	4408                	lw	a0,8(s0)
20010788:	4605                	li	a2,1
2001078a:	45a5                	li	a1,9
2001078c:	3de5                	jal	20010684 <std>
2001078e:	4448                	lw	a0,12(s0)
20010790:	4609                	li	a2,2
20010792:	45c9                	li	a1,18
20010794:	3dc5                	jal	20010684 <std>
20010796:	4785                	li	a5,1
20010798:	cc1c                	sw	a5,24(s0)
2001079a:	40b2                	lw	ra,12(sp)
2001079c:	4422                	lw	s0,8(sp)
2001079e:	0141                	addi	sp,sp,16
200107a0:	8082                	ret
200107a2:	8082                	ret

200107a4 <__sfp>:
__sfp():
200107a4:	1141                	addi	sp,sp,-16
200107a6:	5fff0797          	auipc	a5,0x5fff0
200107aa:	2e678793          	addi	a5,a5,742 # 80000a8c <_global_impure_ptr>
200107ae:	c226                	sw	s1,4(sp)
200107b0:	4384                	lw	s1,0(a5)
200107b2:	c04a                	sw	s2,0(sp)
200107b4:	c606                	sw	ra,12(sp)
200107b6:	4c9c                	lw	a5,24(s1)
200107b8:	c422                	sw	s0,8(sp)
200107ba:	892a                	mv	s2,a0
200107bc:	e399                	bnez	a5,200107c2 <__sfp+0x1e>
200107be:	8526                	mv	a0,s1
200107c0:	3fad                	jal	2001073a <__sinit>
200107c2:	04848493          	addi	s1,s1,72
200107c6:	4480                	lw	s0,8(s1)
200107c8:	40dc                	lw	a5,4(s1)
200107ca:	17fd                	addi	a5,a5,-1
200107cc:	0007d663          	bgez	a5,200107d8 <__sfp+0x34>
200107d0:	409c                	lw	a5,0(s1)
200107d2:	cfb1                	beqz	a5,2001082e <__sfp+0x8a>
200107d4:	4084                	lw	s1,0(s1)
200107d6:	bfc5                	j	200107c6 <__sfp+0x22>
200107d8:	00c41703          	lh	a4,12(s0)
200107dc:	e731                	bnez	a4,20010828 <__sfp+0x84>
200107de:	77c1                	lui	a5,0xffff0
200107e0:	0785                	addi	a5,a5,1
200107e2:	06042223          	sw	zero,100(s0)
200107e6:	00042023          	sw	zero,0(s0)
200107ea:	00042223          	sw	zero,4(s0)
200107ee:	00042423          	sw	zero,8(s0)
200107f2:	c45c                	sw	a5,12(s0)
200107f4:	00042823          	sw	zero,16(s0)
200107f8:	00042a23          	sw	zero,20(s0)
200107fc:	00042c23          	sw	zero,24(s0)
20010800:	4621                	li	a2,8
20010802:	4581                	li	a1,0
20010804:	05c40513          	addi	a0,s0,92
20010808:	2a69                	jal	200109a2 <memset>
2001080a:	02042a23          	sw	zero,52(s0)
2001080e:	02042c23          	sw	zero,56(s0)
20010812:	04042423          	sw	zero,72(s0)
20010816:	04042623          	sw	zero,76(s0)
2001081a:	8522                	mv	a0,s0
2001081c:	40b2                	lw	ra,12(sp)
2001081e:	4422                	lw	s0,8(sp)
20010820:	4492                	lw	s1,4(sp)
20010822:	4902                	lw	s2,0(sp)
20010824:	0141                	addi	sp,sp,16
20010826:	8082                	ret
20010828:	06840413          	addi	s0,s0,104
2001082c:	bf79                	j	200107ca <__sfp+0x26>
2001082e:	4591                	li	a1,4
20010830:	854a                	mv	a0,s2
20010832:	35d1                	jal	200106f6 <__sfmoreglue>
20010834:	c088                	sw	a0,0(s1)
20010836:	842a                	mv	s0,a0
20010838:	fd51                	bnez	a0,200107d4 <__sfp+0x30>
2001083a:	47b1                	li	a5,12
2001083c:	00f92023          	sw	a5,0(s2)
20010840:	bfe9                	j	2001081a <__sfp+0x76>

20010842 <_fwalk_reent>:
_fwalk_reent():
20010842:	7179                	addi	sp,sp,-48
20010844:	d422                	sw	s0,40(sp)
20010846:	d04a                	sw	s2,32(sp)
20010848:	cc52                	sw	s4,24(sp)
2001084a:	ca56                	sw	s5,20(sp)
2001084c:	c85a                	sw	s6,16(sp)
2001084e:	c65e                	sw	s7,12(sp)
20010850:	d606                	sw	ra,44(sp)
20010852:	d226                	sw	s1,36(sp)
20010854:	ce4e                	sw	s3,28(sp)
20010856:	8a2a                	mv	s4,a0
20010858:	8aae                	mv	s5,a1
2001085a:	04850413          	addi	s0,a0,72
2001085e:	4901                	li	s2,0
20010860:	4b05                	li	s6,1
20010862:	5bfd                	li	s7,-1
20010864:	ec09                	bnez	s0,2001087e <_fwalk_reent+0x3c>
20010866:	50b2                	lw	ra,44(sp)
20010868:	5422                	lw	s0,40(sp)
2001086a:	854a                	mv	a0,s2
2001086c:	5492                	lw	s1,36(sp)
2001086e:	5902                	lw	s2,32(sp)
20010870:	49f2                	lw	s3,28(sp)
20010872:	4a62                	lw	s4,24(sp)
20010874:	4ad2                	lw	s5,20(sp)
20010876:	4b42                	lw	s6,16(sp)
20010878:	4bb2                	lw	s7,12(sp)
2001087a:	6145                	addi	sp,sp,48
2001087c:	8082                	ret
2001087e:	4404                	lw	s1,8(s0)
20010880:	00442983          	lw	s3,4(s0)
20010884:	19fd                	addi	s3,s3,-1
20010886:	0009d463          	bgez	s3,2001088e <_fwalk_reent+0x4c>
2001088a:	4000                	lw	s0,0(s0)
2001088c:	bfe1                	j	20010864 <_fwalk_reent+0x22>
2001088e:	00c4d783          	lhu	a5,12(s1)
20010892:	00fb7b63          	bgeu	s6,a5,200108a8 <_fwalk_reent+0x66>
20010896:	00e49783          	lh	a5,14(s1)
2001089a:	01778763          	beq	a5,s7,200108a8 <_fwalk_reent+0x66>
2001089e:	85a6                	mv	a1,s1
200108a0:	8552                	mv	a0,s4
200108a2:	9a82                	jalr	s5
200108a4:	00a96933          	or	s2,s2,a0
200108a8:	06848493          	addi	s1,s1,104
200108ac:	bfe1                	j	20010884 <_fwalk_reent+0x42>

200108ae <__swhatbuf_r>:
__swhatbuf_r():
200108ae:	7119                	addi	sp,sp,-128
200108b0:	daa6                	sw	s1,116(sp)
200108b2:	84ae                	mv	s1,a1
200108b4:	00e59583          	lh	a1,14(a1)
200108b8:	dca2                	sw	s0,120(sp)
200108ba:	de86                	sw	ra,124(sp)
200108bc:	8432                	mv	s0,a2
200108be:	0005dc63          	bgez	a1,200108d6 <__swhatbuf_r+0x28>
200108c2:	00c4d783          	lhu	a5,12(s1)
200108c6:	0006a023          	sw	zero,0(a3)
200108ca:	0807f793          	andi	a5,a5,128
200108ce:	e39d                	bnez	a5,200108f4 <__swhatbuf_r+0x46>
200108d0:	40000793          	li	a5,1024
200108d4:	a015                	j	200108f8 <__swhatbuf_r+0x4a>
200108d6:	0830                	addi	a2,sp,24
200108d8:	c636                	sw	a3,12(sp)
200108da:	2905                	jal	20010d0a <_fstat_r>
200108dc:	46b2                	lw	a3,12(sp)
200108de:	fe0542e3          	bltz	a0,200108c2 <__swhatbuf_r+0x14>
200108e2:	4772                	lw	a4,28(sp)
200108e4:	67bd                	lui	a5,0xf
200108e6:	8ff9                	and	a5,a5,a4
200108e8:	7779                	lui	a4,0xffffe
200108ea:	97ba                	add	a5,a5,a4
200108ec:	0017b793          	seqz	a5,a5
200108f0:	c29c                	sw	a5,0(a3)
200108f2:	bff9                	j	200108d0 <__swhatbuf_r+0x22>
200108f4:	04000793          	li	a5,64
200108f8:	c01c                	sw	a5,0(s0)
200108fa:	50f6                	lw	ra,124(sp)
200108fc:	5466                	lw	s0,120(sp)
200108fe:	54d6                	lw	s1,116(sp)
20010900:	4501                	li	a0,0
20010902:	6109                	addi	sp,sp,128
20010904:	8082                	ret

20010906 <__smakebuf_r>:
__smakebuf_r():
20010906:	00c5d783          	lhu	a5,12(a1)
2001090a:	1101                	addi	sp,sp,-32
2001090c:	cc22                	sw	s0,24(sp)
2001090e:	ce06                	sw	ra,28(sp)
20010910:	ca26                	sw	s1,20(sp)
20010912:	c84a                	sw	s2,16(sp)
20010914:	8b89                	andi	a5,a5,2
20010916:	842e                	mv	s0,a1
20010918:	cf89                	beqz	a5,20010932 <__smakebuf_r+0x2c>
2001091a:	04740793          	addi	a5,s0,71
2001091e:	c01c                	sw	a5,0(s0)
20010920:	c81c                	sw	a5,16(s0)
20010922:	4785                	li	a5,1
20010924:	c85c                	sw	a5,20(s0)
20010926:	40f2                	lw	ra,28(sp)
20010928:	4462                	lw	s0,24(sp)
2001092a:	44d2                	lw	s1,20(sp)
2001092c:	4942                	lw	s2,16(sp)
2001092e:	6105                	addi	sp,sp,32
20010930:	8082                	ret
20010932:	0074                	addi	a3,sp,12
20010934:	0030                	addi	a2,sp,8
20010936:	84aa                	mv	s1,a0
20010938:	3f9d                	jal	200108ae <__swhatbuf_r>
2001093a:	45a2                	lw	a1,8(sp)
2001093c:	892a                	mv	s2,a0
2001093e:	8526                	mv	a0,s1
20010940:	2a5d                	jal	20010af6 <_malloc_r>
20010942:	ed01                	bnez	a0,2001095a <__smakebuf_r+0x54>
20010944:	00c41783          	lh	a5,12(s0)
20010948:	2007f713          	andi	a4,a5,512
2001094c:	ff69                	bnez	a4,20010926 <__smakebuf_r+0x20>
2001094e:	9bf1                	andi	a5,a5,-4
20010950:	0027e793          	ori	a5,a5,2
20010954:	00f41623          	sh	a5,12(s0)
20010958:	b7c9                	j	2001091a <__smakebuf_r+0x14>
2001095a:	00000797          	auipc	a5,0x0
2001095e:	d9278793          	addi	a5,a5,-622 # 200106ec <_cleanup_r>
20010962:	d49c                	sw	a5,40(s1)
20010964:	00c45783          	lhu	a5,12(s0)
20010968:	c008                	sw	a0,0(s0)
2001096a:	c808                	sw	a0,16(s0)
2001096c:	0807e793          	ori	a5,a5,128
20010970:	00f41623          	sh	a5,12(s0)
20010974:	47a2                	lw	a5,8(sp)
20010976:	c85c                	sw	a5,20(s0)
20010978:	47b2                	lw	a5,12(sp)
2001097a:	cf89                	beqz	a5,20010994 <__smakebuf_r+0x8e>
2001097c:	00e41583          	lh	a1,14(s0)
20010980:	8526                	mv	a0,s1
20010982:	2e4d                	jal	20010d34 <_isatty_r>
20010984:	c901                	beqz	a0,20010994 <__smakebuf_r+0x8e>
20010986:	00c45783          	lhu	a5,12(s0)
2001098a:	9bf1                	andi	a5,a5,-4
2001098c:	0017e793          	ori	a5,a5,1
20010990:	00f41623          	sh	a5,12(s0)
20010994:	00c45783          	lhu	a5,12(s0)
20010998:	00f96933          	or	s2,s2,a5
2001099c:	01241623          	sh	s2,12(s0)
200109a0:	b759                	j	20010926 <__smakebuf_r+0x20>

200109a2 <memset>:
memset():
200109a2:	433d                	li	t1,15
200109a4:	872a                	mv	a4,a0
200109a6:	02c37363          	bgeu	t1,a2,200109cc <memset+0x2a>
200109aa:	00f77793          	andi	a5,a4,15
200109ae:	efbd                	bnez	a5,20010a2c <memset+0x8a>
200109b0:	e5ad                	bnez	a1,20010a1a <memset+0x78>
200109b2:	ff067693          	andi	a3,a2,-16
200109b6:	8a3d                	andi	a2,a2,15
200109b8:	96ba                	add	a3,a3,a4
200109ba:	c30c                	sw	a1,0(a4)
200109bc:	c34c                	sw	a1,4(a4)
200109be:	c70c                	sw	a1,8(a4)
200109c0:	c74c                	sw	a1,12(a4)
200109c2:	0741                	addi	a4,a4,16
200109c4:	fed76be3          	bltu	a4,a3,200109ba <memset+0x18>
200109c8:	e211                	bnez	a2,200109cc <memset+0x2a>
200109ca:	8082                	ret
200109cc:	40c306b3          	sub	a3,t1,a2
200109d0:	068a                	slli	a3,a3,0x2
200109d2:	00000297          	auipc	t0,0x0
200109d6:	9696                	add	a3,a3,t0
200109d8:	00a68067          	jr	10(a3)
200109dc:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffc8a2>
200109e0:	00b706a3          	sb	a1,13(a4)
200109e4:	00b70623          	sb	a1,12(a4)
200109e8:	00b705a3          	sb	a1,11(a4)
200109ec:	00b70523          	sb	a1,10(a4)
200109f0:	00b704a3          	sb	a1,9(a4)
200109f4:	00b70423          	sb	a1,8(a4)
200109f8:	00b703a3          	sb	a1,7(a4)
200109fc:	00b70323          	sb	a1,6(a4)
20010a00:	00b702a3          	sb	a1,5(a4)
20010a04:	00b70223          	sb	a1,4(a4)
20010a08:	00b701a3          	sb	a1,3(a4)
20010a0c:	00b70123          	sb	a1,2(a4)
20010a10:	00b700a3          	sb	a1,1(a4)
20010a14:	00b70023          	sb	a1,0(a4)
20010a18:	8082                	ret
20010a1a:	0ff5f593          	andi	a1,a1,255
20010a1e:	00859693          	slli	a3,a1,0x8
20010a22:	8dd5                	or	a1,a1,a3
20010a24:	01059693          	slli	a3,a1,0x10
20010a28:	8dd5                	or	a1,a1,a3
20010a2a:	b761                	j	200109b2 <memset+0x10>
20010a2c:	00279693          	slli	a3,a5,0x2
20010a30:	00000297          	auipc	t0,0x0
20010a34:	9696                	add	a3,a3,t0
20010a36:	8286                	mv	t0,ra
20010a38:	fa8680e7          	jalr	-88(a3)
20010a3c:	8096                	mv	ra,t0
20010a3e:	17c1                	addi	a5,a5,-16
20010a40:	8f1d                	sub	a4,a4,a5
20010a42:	963e                	add	a2,a2,a5
20010a44:	f8c374e3          	bgeu	t1,a2,200109cc <memset+0x2a>
20010a48:	b7a5                	j	200109b0 <memset+0xe>

20010a4a <_free_r>:
_free_r():
20010a4a:	c5cd                	beqz	a1,20010af4 <_free_r+0xaa>
20010a4c:	ffc5a783          	lw	a5,-4(a1)
20010a50:	1141                	addi	sp,sp,-16
20010a52:	c422                	sw	s0,8(sp)
20010a54:	c606                	sw	ra,12(sp)
20010a56:	c226                	sw	s1,4(sp)
20010a58:	ffc58413          	addi	s0,a1,-4
20010a5c:	0007d363          	bgez	a5,20010a62 <_free_r+0x18>
20010a60:	943e                	add	s0,s0,a5
20010a62:	84aa                	mv	s1,a0
20010a64:	2615                	jal	20010d88 <__malloc_lock>
20010a66:	5fff0797          	auipc	a5,0x5fff0
20010a6a:	06a78793          	addi	a5,a5,106 # 80000ad0 <metal_segment_data_target_end>
20010a6e:	439c                	lw	a5,0(a5)
20010a70:	ef89                	bnez	a5,20010a8a <_free_r+0x40>
20010a72:	00042223          	sw	zero,4(s0)
20010a76:	5fff0797          	auipc	a5,0x5fff0
20010a7a:	0487ad23          	sw	s0,90(a5) # 80000ad0 <metal_segment_data_target_end>
20010a7e:	4422                	lw	s0,8(sp)
20010a80:	40b2                	lw	ra,12(sp)
20010a82:	8526                	mv	a0,s1
20010a84:	4492                	lw	s1,4(sp)
20010a86:	0141                	addi	sp,sp,16
20010a88:	a609                	j	20010d8a <__malloc_unlock>
20010a8a:	00f47e63          	bgeu	s0,a5,20010aa6 <_free_r+0x5c>
20010a8e:	4014                	lw	a3,0(s0)
20010a90:	00d40733          	add	a4,s0,a3
20010a94:	00e79663          	bne	a5,a4,20010aa0 <_free_r+0x56>
20010a98:	4398                	lw	a4,0(a5)
20010a9a:	43dc                	lw	a5,4(a5)
20010a9c:	9736                	add	a4,a4,a3
20010a9e:	c018                	sw	a4,0(s0)
20010aa0:	c05c                	sw	a5,4(s0)
20010aa2:	bfd1                	j	20010a76 <_free_r+0x2c>
20010aa4:	87ba                	mv	a5,a4
20010aa6:	43d8                	lw	a4,4(a5)
20010aa8:	c319                	beqz	a4,20010aae <_free_r+0x64>
20010aaa:	fee47de3          	bgeu	s0,a4,20010aa4 <_free_r+0x5a>
20010aae:	4394                	lw	a3,0(a5)
20010ab0:	00d78633          	add	a2,a5,a3
20010ab4:	00861f63          	bne	a2,s0,20010ad2 <_free_r+0x88>
20010ab8:	4010                	lw	a2,0(s0)
20010aba:	96b2                	add	a3,a3,a2
20010abc:	c394                	sw	a3,0(a5)
20010abe:	00d78633          	add	a2,a5,a3
20010ac2:	fac71ee3          	bne	a4,a2,20010a7e <_free_r+0x34>
20010ac6:	4310                	lw	a2,0(a4)
20010ac8:	4358                	lw	a4,4(a4)
20010aca:	96b2                	add	a3,a3,a2
20010acc:	c394                	sw	a3,0(a5)
20010ace:	c3d8                	sw	a4,4(a5)
20010ad0:	b77d                	j	20010a7e <_free_r+0x34>
20010ad2:	00c47563          	bgeu	s0,a2,20010adc <_free_r+0x92>
20010ad6:	47b1                	li	a5,12
20010ad8:	c09c                	sw	a5,0(s1)
20010ada:	b755                	j	20010a7e <_free_r+0x34>
20010adc:	4010                	lw	a2,0(s0)
20010ade:	00c406b3          	add	a3,s0,a2
20010ae2:	00d71663          	bne	a4,a3,20010aee <_free_r+0xa4>
20010ae6:	4314                	lw	a3,0(a4)
20010ae8:	4358                	lw	a4,4(a4)
20010aea:	96b2                	add	a3,a3,a2
20010aec:	c014                	sw	a3,0(s0)
20010aee:	c058                	sw	a4,4(s0)
20010af0:	c3c0                	sw	s0,4(a5)
20010af2:	b771                	j	20010a7e <_free_r+0x34>
20010af4:	8082                	ret

20010af6 <_malloc_r>:
_malloc_r():
20010af6:	1101                	addi	sp,sp,-32
20010af8:	ca26                	sw	s1,20(sp)
20010afa:	00358493          	addi	s1,a1,3
20010afe:	98f1                	andi	s1,s1,-4
20010b00:	ce06                	sw	ra,28(sp)
20010b02:	cc22                	sw	s0,24(sp)
20010b04:	c84a                	sw	s2,16(sp)
20010b06:	c64e                	sw	s3,12(sp)
20010b08:	04a1                	addi	s1,s1,8
20010b0a:	47b1                	li	a5,12
20010b0c:	04f4f763          	bgeu	s1,a5,20010b5a <_malloc_r+0x64>
20010b10:	44b1                	li	s1,12
20010b12:	04b4e663          	bltu	s1,a1,20010b5e <_malloc_r+0x68>
20010b16:	892a                	mv	s2,a0
20010b18:	2c85                	jal	20010d88 <__malloc_lock>
20010b1a:	5fff0797          	auipc	a5,0x5fff0
20010b1e:	fb678793          	addi	a5,a5,-74 # 80000ad0 <metal_segment_data_target_end>
20010b22:	4398                	lw	a4,0(a5)
20010b24:	843a                	mv	s0,a4
20010b26:	e431                	bnez	s0,20010b72 <_malloc_r+0x7c>
20010b28:	5fff0797          	auipc	a5,0x5fff0
20010b2c:	fac78793          	addi	a5,a5,-84 # 80000ad4 <__malloc_sbrk_start>
20010b30:	439c                	lw	a5,0(a5)
20010b32:	eb81                	bnez	a5,20010b42 <_malloc_r+0x4c>
20010b34:	4581                	li	a1,0
20010b36:	854a                	mv	a0,s2
20010b38:	2871                	jal	20010bd4 <_sbrk_r>
20010b3a:	5fff0797          	auipc	a5,0x5fff0
20010b3e:	f8a7ad23          	sw	a0,-102(a5) # 80000ad4 <__malloc_sbrk_start>
20010b42:	85a6                	mv	a1,s1
20010b44:	854a                	mv	a0,s2
20010b46:	2079                	jal	20010bd4 <_sbrk_r>
20010b48:	59fd                	li	s3,-1
20010b4a:	07351963          	bne	a0,s3,20010bbc <_malloc_r+0xc6>
20010b4e:	47b1                	li	a5,12
20010b50:	00f92023          	sw	a5,0(s2)
20010b54:	854a                	mv	a0,s2
20010b56:	2c15                	jal	20010d8a <__malloc_unlock>
20010b58:	a029                	j	20010b62 <_malloc_r+0x6c>
20010b5a:	fa04dce3          	bgez	s1,20010b12 <_malloc_r+0x1c>
20010b5e:	47b1                	li	a5,12
20010b60:	c11c                	sw	a5,0(a0)
20010b62:	4501                	li	a0,0
20010b64:	40f2                	lw	ra,28(sp)
20010b66:	4462                	lw	s0,24(sp)
20010b68:	44d2                	lw	s1,20(sp)
20010b6a:	4942                	lw	s2,16(sp)
20010b6c:	49b2                	lw	s3,12(sp)
20010b6e:	6105                	addi	sp,sp,32
20010b70:	8082                	ret
20010b72:	401c                	lw	a5,0(s0)
20010b74:	8f85                	sub	a5,a5,s1
20010b76:	0407c063          	bltz	a5,20010bb6 <_malloc_r+0xc0>
20010b7a:	46ad                	li	a3,11
20010b7c:	00f6f663          	bgeu	a3,a5,20010b88 <_malloc_r+0x92>
20010b80:	c01c                	sw	a5,0(s0)
20010b82:	943e                	add	s0,s0,a5
20010b84:	c004                	sw	s1,0(s0)
20010b86:	a801                	j	20010b96 <_malloc_r+0xa0>
20010b88:	405c                	lw	a5,4(s0)
20010b8a:	02871463          	bne	a4,s0,20010bb2 <_malloc_r+0xbc>
20010b8e:	5fff0717          	auipc	a4,0x5fff0
20010b92:	f4f72123          	sw	a5,-190(a4) # 80000ad0 <metal_segment_data_target_end>
20010b96:	854a                	mv	a0,s2
20010b98:	2acd                	jal	20010d8a <__malloc_unlock>
20010b9a:	00b40513          	addi	a0,s0,11
20010b9e:	00440793          	addi	a5,s0,4
20010ba2:	9961                	andi	a0,a0,-8
20010ba4:	40f50733          	sub	a4,a0,a5
20010ba8:	df55                	beqz	a4,20010b64 <_malloc_r+0x6e>
20010baa:	943a                	add	s0,s0,a4
20010bac:	8f89                	sub	a5,a5,a0
20010bae:	c01c                	sw	a5,0(s0)
20010bb0:	bf55                	j	20010b64 <_malloc_r+0x6e>
20010bb2:	c35c                	sw	a5,4(a4)
20010bb4:	b7cd                	j	20010b96 <_malloc_r+0xa0>
20010bb6:	8722                	mv	a4,s0
20010bb8:	4040                	lw	s0,4(s0)
20010bba:	b7b5                	j	20010b26 <_malloc_r+0x30>
20010bbc:	00350413          	addi	s0,a0,3
20010bc0:	9871                	andi	s0,s0,-4
20010bc2:	fc8501e3          	beq	a0,s0,20010b84 <_malloc_r+0x8e>
20010bc6:	40a405b3          	sub	a1,s0,a0
20010bca:	854a                	mv	a0,s2
20010bcc:	2021                	jal	20010bd4 <_sbrk_r>
20010bce:	fb351be3          	bne	a0,s3,20010b84 <_malloc_r+0x8e>
20010bd2:	bfb5                	j	20010b4e <_malloc_r+0x58>

20010bd4 <_sbrk_r>:
_sbrk_r():
20010bd4:	1141                	addi	sp,sp,-16
20010bd6:	c422                	sw	s0,8(sp)
20010bd8:	842a                	mv	s0,a0
20010bda:	852e                	mv	a0,a1
20010bdc:	8e01a023          	sw	zero,-1824(gp) # 80000b68 <errno>
20010be0:	c606                	sw	ra,12(sp)
20010be2:	2c49                	jal	20010e74 <_sbrk>
20010be4:	57fd                	li	a5,-1
20010be6:	00f51763          	bne	a0,a5,20010bf4 <_sbrk_r+0x20>
20010bea:	8e018793          	addi	a5,gp,-1824 # 80000b68 <errno>
20010bee:	439c                	lw	a5,0(a5)
20010bf0:	c391                	beqz	a5,20010bf4 <_sbrk_r+0x20>
20010bf2:	c01c                	sw	a5,0(s0)
20010bf4:	40b2                	lw	ra,12(sp)
20010bf6:	4422                	lw	s0,8(sp)
20010bf8:	0141                	addi	sp,sp,16
20010bfa:	8082                	ret

20010bfc <__sread>:
__sread():
20010bfc:	1141                	addi	sp,sp,-16
20010bfe:	c422                	sw	s0,8(sp)
20010c00:	842e                	mv	s0,a1
20010c02:	00e59583          	lh	a1,14(a1)
20010c06:	c606                	sw	ra,12(sp)
20010c08:	2251                	jal	20010d8c <_read_r>
20010c0a:	00054963          	bltz	a0,20010c1c <__sread+0x20>
20010c0e:	487c                	lw	a5,84(s0)
20010c10:	97aa                	add	a5,a5,a0
20010c12:	c87c                	sw	a5,84(s0)
20010c14:	40b2                	lw	ra,12(sp)
20010c16:	4422                	lw	s0,8(sp)
20010c18:	0141                	addi	sp,sp,16
20010c1a:	8082                	ret
20010c1c:	00c45783          	lhu	a5,12(s0)
20010c20:	777d                	lui	a4,0xfffff
20010c22:	177d                	addi	a4,a4,-1
20010c24:	8ff9                	and	a5,a5,a4
20010c26:	00f41623          	sh	a5,12(s0)
20010c2a:	b7ed                	j	20010c14 <__sread+0x18>

20010c2c <__swrite>:
__swrite():
20010c2c:	00c5d783          	lhu	a5,12(a1)
20010c30:	1101                	addi	sp,sp,-32
20010c32:	cc22                	sw	s0,24(sp)
20010c34:	ca26                	sw	s1,20(sp)
20010c36:	c84a                	sw	s2,16(sp)
20010c38:	c64e                	sw	s3,12(sp)
20010c3a:	ce06                	sw	ra,28(sp)
20010c3c:	1007f793          	andi	a5,a5,256
20010c40:	84aa                	mv	s1,a0
20010c42:	842e                	mv	s0,a1
20010c44:	8932                	mv	s2,a2
20010c46:	89b6                	mv	s3,a3
20010c48:	c791                	beqz	a5,20010c54 <__swrite+0x28>
20010c4a:	00e59583          	lh	a1,14(a1)
20010c4e:	4689                	li	a3,2
20010c50:	4601                	li	a2,0
20010c52:	2229                	jal	20010d5c <_lseek_r>
20010c54:	00c45783          	lhu	a5,12(s0)
20010c58:	777d                	lui	a4,0xfffff
20010c5a:	177d                	addi	a4,a4,-1
20010c5c:	8ff9                	and	a5,a5,a4
20010c5e:	00f41623          	sh	a5,12(s0)
20010c62:	00e41583          	lh	a1,14(s0)
20010c66:	4462                	lw	s0,24(sp)
20010c68:	40f2                	lw	ra,28(sp)
20010c6a:	86ce                	mv	a3,s3
20010c6c:	864a                	mv	a2,s2
20010c6e:	49b2                	lw	s3,12(sp)
20010c70:	4942                	lw	s2,16(sp)
20010c72:	8526                	mv	a0,s1
20010c74:	44d2                	lw	s1,20(sp)
20010c76:	6105                	addi	sp,sp,32
20010c78:	a83d                	j	20010cb6 <_write_r>

20010c7a <__sseek>:
__sseek():
20010c7a:	1141                	addi	sp,sp,-16
20010c7c:	c422                	sw	s0,8(sp)
20010c7e:	842e                	mv	s0,a1
20010c80:	00e59583          	lh	a1,14(a1)
20010c84:	c606                	sw	ra,12(sp)
20010c86:	28d9                	jal	20010d5c <_lseek_r>
20010c88:	57fd                	li	a5,-1
20010c8a:	00c45703          	lhu	a4,12(s0)
20010c8e:	00f51b63          	bne	a0,a5,20010ca4 <__sseek+0x2a>
20010c92:	77fd                	lui	a5,0xfffff
20010c94:	17fd                	addi	a5,a5,-1
20010c96:	8ff9                	and	a5,a5,a4
20010c98:	00f41623          	sh	a5,12(s0)
20010c9c:	40b2                	lw	ra,12(sp)
20010c9e:	4422                	lw	s0,8(sp)
20010ca0:	0141                	addi	sp,sp,16
20010ca2:	8082                	ret
20010ca4:	6785                	lui	a5,0x1
20010ca6:	8fd9                	or	a5,a5,a4
20010ca8:	00f41623          	sh	a5,12(s0)
20010cac:	c868                	sw	a0,84(s0)
20010cae:	b7fd                	j	20010c9c <__sseek+0x22>

20010cb0 <__sclose>:
__sclose():
20010cb0:	00e59583          	lh	a1,14(a1)
20010cb4:	a03d                	j	20010ce2 <_close_r>

20010cb6 <_write_r>:
_write_r():
20010cb6:	1141                	addi	sp,sp,-16
20010cb8:	c422                	sw	s0,8(sp)
20010cba:	842a                	mv	s0,a0
20010cbc:	852e                	mv	a0,a1
20010cbe:	85b2                	mv	a1,a2
20010cc0:	8636                	mv	a2,a3
20010cc2:	8e01a023          	sw	zero,-1824(gp) # 80000b68 <errno>
20010cc6:	c606                	sw	ra,12(sp)
20010cc8:	2c29                	jal	20010ee2 <_write>
20010cca:	57fd                	li	a5,-1
20010ccc:	00f51763          	bne	a0,a5,20010cda <_write_r+0x24>
20010cd0:	8e018793          	addi	a5,gp,-1824 # 80000b68 <errno>
20010cd4:	439c                	lw	a5,0(a5)
20010cd6:	c391                	beqz	a5,20010cda <_write_r+0x24>
20010cd8:	c01c                	sw	a5,0(s0)
20010cda:	40b2                	lw	ra,12(sp)
20010cdc:	4422                	lw	s0,8(sp)
20010cde:	0141                	addi	sp,sp,16
20010ce0:	8082                	ret

20010ce2 <_close_r>:
_close_r():
20010ce2:	1141                	addi	sp,sp,-16
20010ce4:	c422                	sw	s0,8(sp)
20010ce6:	842a                	mv	s0,a0
20010ce8:	852e                	mv	a0,a1
20010cea:	8e01a023          	sw	zero,-1824(gp) # 80000b68 <errno>
20010cee:	c606                	sw	ra,12(sp)
20010cf0:	20e1                	jal	20010db8 <_close>
20010cf2:	57fd                	li	a5,-1
20010cf4:	00f51763          	bne	a0,a5,20010d02 <_close_r+0x20>
20010cf8:	8e018793          	addi	a5,gp,-1824 # 80000b68 <errno>
20010cfc:	439c                	lw	a5,0(a5)
20010cfe:	c391                	beqz	a5,20010d02 <_close_r+0x20>
20010d00:	c01c                	sw	a5,0(s0)
20010d02:	40b2                	lw	ra,12(sp)
20010d04:	4422                	lw	s0,8(sp)
20010d06:	0141                	addi	sp,sp,16
20010d08:	8082                	ret

20010d0a <_fstat_r>:
_fstat_r():
20010d0a:	1141                	addi	sp,sp,-16
20010d0c:	c422                	sw	s0,8(sp)
20010d0e:	842a                	mv	s0,a0
20010d10:	852e                	mv	a0,a1
20010d12:	85b2                	mv	a1,a2
20010d14:	8e01a023          	sw	zero,-1824(gp) # 80000b68 <errno>
20010d18:	c606                	sw	ra,12(sp)
20010d1a:	20c1                	jal	20010dda <_fstat>
20010d1c:	57fd                	li	a5,-1
20010d1e:	00f51763          	bne	a0,a5,20010d2c <_fstat_r+0x22>
20010d22:	8e018793          	addi	a5,gp,-1824 # 80000b68 <errno>
20010d26:	439c                	lw	a5,0(a5)
20010d28:	c391                	beqz	a5,20010d2c <_fstat_r+0x22>
20010d2a:	c01c                	sw	a5,0(s0)
20010d2c:	40b2                	lw	ra,12(sp)
20010d2e:	4422                	lw	s0,8(sp)
20010d30:	0141                	addi	sp,sp,16
20010d32:	8082                	ret

20010d34 <_isatty_r>:
_isatty_r():
20010d34:	1141                	addi	sp,sp,-16
20010d36:	c422                	sw	s0,8(sp)
20010d38:	842a                	mv	s0,a0
20010d3a:	852e                	mv	a0,a1
20010d3c:	8e01a023          	sw	zero,-1824(gp) # 80000b68 <errno>
20010d40:	c606                	sw	ra,12(sp)
20010d42:	287d                	jal	20010e00 <_isatty>
20010d44:	57fd                	li	a5,-1
20010d46:	00f51763          	bne	a0,a5,20010d54 <_isatty_r+0x20>
20010d4a:	8e018793          	addi	a5,gp,-1824 # 80000b68 <errno>
20010d4e:	439c                	lw	a5,0(a5)
20010d50:	c391                	beqz	a5,20010d54 <_isatty_r+0x20>
20010d52:	c01c                	sw	a5,0(s0)
20010d54:	40b2                	lw	ra,12(sp)
20010d56:	4422                	lw	s0,8(sp)
20010d58:	0141                	addi	sp,sp,16
20010d5a:	8082                	ret

20010d5c <_lseek_r>:
_lseek_r():
20010d5c:	1141                	addi	sp,sp,-16
20010d5e:	c422                	sw	s0,8(sp)
20010d60:	842a                	mv	s0,a0
20010d62:	852e                	mv	a0,a1
20010d64:	85b2                	mv	a1,a2
20010d66:	8636                	mv	a2,a3
20010d68:	8e01a023          	sw	zero,-1824(gp) # 80000b68 <errno>
20010d6c:	c606                	sw	ra,12(sp)
20010d6e:	284d                	jal	20010e20 <_lseek>
20010d70:	57fd                	li	a5,-1
20010d72:	00f51763          	bne	a0,a5,20010d80 <_lseek_r+0x24>
20010d76:	8e018793          	addi	a5,gp,-1824 # 80000b68 <errno>
20010d7a:	439c                	lw	a5,0(a5)
20010d7c:	c391                	beqz	a5,20010d80 <_lseek_r+0x24>
20010d7e:	c01c                	sw	a5,0(s0)
20010d80:	40b2                	lw	ra,12(sp)
20010d82:	4422                	lw	s0,8(sp)
20010d84:	0141                	addi	sp,sp,16
20010d86:	8082                	ret

20010d88 <__malloc_lock>:
__malloc_lock():
20010d88:	8082                	ret

20010d8a <__malloc_unlock>:
__malloc_unlock():
20010d8a:	8082                	ret

20010d8c <_read_r>:
_read_r():
20010d8c:	1141                	addi	sp,sp,-16
20010d8e:	c422                	sw	s0,8(sp)
20010d90:	842a                	mv	s0,a0
20010d92:	852e                	mv	a0,a1
20010d94:	85b2                	mv	a1,a2
20010d96:	8636                	mv	a2,a3
20010d98:	8e01a023          	sw	zero,-1824(gp) # 80000b68 <errno>
20010d9c:	c606                	sw	ra,12(sp)
20010d9e:	2075                	jal	20010e4a <_read>
20010da0:	57fd                	li	a5,-1
20010da2:	00f51763          	bne	a0,a5,20010db0 <_read_r+0x24>
20010da6:	8e018793          	addi	a5,gp,-1824 # 80000b68 <errno>
20010daa:	439c                	lw	a5,0(a5)
20010dac:	c391                	beqz	a5,20010db0 <_read_r+0x24>
20010dae:	c01c                	sw	a5,0(s0)
20010db0:	40b2                	lw	ra,12(sp)
20010db2:	4422                	lw	s0,8(sp)
20010db4:	0141                	addi	sp,sp,16
20010db6:	8082                	ret

20010db8 <_close>:
_close():
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20010db8:	1101                	addi	sp,sp,-32
20010dba:	ce06                	sw	ra,28(sp)
20010dbc:	cc22                	sw	s0,24(sp)
20010dbe:	1000                	addi	s0,sp,32
20010dc0:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20010dc4:	2a59                	jal	20010f5a <__errno>
20010dc6:	872a                	mv	a4,a0
20010dc8:	05800793          	li	a5,88
20010dcc:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_close.c:7
  return -1;
20010dce:	57fd                	li	a5,-1
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_close.c:8
}
20010dd0:	853e                	mv	a0,a5
20010dd2:	40f2                	lw	ra,28(sp)
20010dd4:	4462                	lw	s0,24(sp)
20010dd6:	6105                	addi	sp,sp,32
20010dd8:	8082                	ret

20010dda <_fstat>:
_fstat():
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20010dda:	1101                	addi	sp,sp,-32
20010ddc:	ce06                	sw	ra,28(sp)
20010dde:	cc22                	sw	s0,24(sp)
20010de0:	1000                	addi	s0,sp,32
20010de2:	fea42623          	sw	a0,-20(s0)
20010de6:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20010dea:	2a85                	jal	20010f5a <__errno>
20010dec:	872a                	mv	a4,a0
20010dee:	fa800793          	li	a5,-88
20010df2:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20010df4:	57fd                	li	a5,-1
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_fstat.c:9
}
20010df6:	853e                	mv	a0,a5
20010df8:	40f2                	lw	ra,28(sp)
20010dfa:	4462                	lw	s0,24(sp)
20010dfc:	6105                	addi	sp,sp,32
20010dfe:	8082                	ret

20010e00 <_isatty>:
_isatty():
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20010e00:	1101                	addi	sp,sp,-32
20010e02:	ce22                	sw	s0,28(sp)
20010e04:	1000                	addi	s0,sp,32
20010e06:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20010e0a:	fec42783          	lw	a5,-20(s0)
20010e0e:	17fd                	addi	a5,a5,-1
20010e10:	0017b793          	seqz	a5,a5
20010e14:	0ff7f793          	andi	a5,a5,255
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_isatty.c:7
}
20010e18:	853e                	mv	a0,a5
20010e1a:	4472                	lw	s0,28(sp)
20010e1c:	6105                	addi	sp,sp,32
20010e1e:	8082                	ret

20010e20 <_lseek>:
_lseek():
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20010e20:	1101                	addi	sp,sp,-32
20010e22:	ce06                	sw	ra,28(sp)
20010e24:	cc22                	sw	s0,24(sp)
20010e26:	1000                	addi	s0,sp,32
20010e28:	fea42623          	sw	a0,-20(s0)
20010e2c:	feb42423          	sw	a1,-24(s0)
20010e30:	fec42223          	sw	a2,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20010e34:	221d                	jal	20010f5a <__errno>
20010e36:	872a                	mv	a4,a0
20010e38:	05800793          	li	a5,88
20010e3c:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20010e3e:	57fd                	li	a5,-1
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_lseek.c:9
}
20010e40:	853e                	mv	a0,a5
20010e42:	40f2                	lw	ra,28(sp)
20010e44:	4462                	lw	s0,24(sp)
20010e46:	6105                	addi	sp,sp,32
20010e48:	8082                	ret

20010e4a <_read>:
_read():
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20010e4a:	1101                	addi	sp,sp,-32
20010e4c:	ce06                	sw	ra,28(sp)
20010e4e:	cc22                	sw	s0,24(sp)
20010e50:	1000                	addi	s0,sp,32
20010e52:	fea42623          	sw	a0,-20(s0)
20010e56:	feb42423          	sw	a1,-24(s0)
20010e5a:	fec42223          	sw	a2,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20010e5e:	28f5                	jal	20010f5a <__errno>
20010e60:	872a                	mv	a4,a0
20010e62:	05800793          	li	a5,88
20010e66:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_read.c:8
  return -1;
20010e68:	57fd                	li	a5,-1
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_read.c:9
}
20010e6a:	853e                	mv	a0,a5
20010e6c:	40f2                	lw	ra,28(sp)
20010e6e:	4462                	lw	s0,24(sp)
20010e70:	6105                	addi	sp,sp,32
20010e72:	8082                	ret

20010e74 <_sbrk>:
_sbrk():
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20010e74:	7179                	addi	sp,sp,-48
20010e76:	d622                	sw	s0,44(sp)
20010e78:	1800                	addi	s0,sp,48
20010e7a:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20010e7e:	800017b7          	lui	a5,0x80001
20010e82:	a907a783          	lw	a5,-1392(a5) # 80000a90 <metal_segment_heap_target_end+0xfffff324>
20010e86:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20010e8a:	ce418713          	addi	a4,gp,-796 # 80000f6c <_sp>
20010e8e:	4e418793          	addi	a5,gp,1252 # 8000176c <metal_segment_heap_target_end>
20010e92:	00f71463          	bne	a4,a5,20010e9a <_sbrk+0x26>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20010e96:	57fd                	li	a5,-1
20010e98:	a089                	j	20010eda <_sbrk+0x66>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20010e9a:	800017b7          	lui	a5,0x80001
20010e9e:	a907a703          	lw	a4,-1392(a5) # 80000a90 <metal_segment_heap_target_end+0xfffff324>
20010ea2:	fdc42783          	lw	a5,-36(s0)
20010ea6:	973e                	add	a4,a4,a5
20010ea8:	4e418793          	addi	a5,gp,1252 # 8000176c <metal_segment_heap_target_end>
20010eac:	02f77063          	bgeu	a4,a5,20010ecc <_sbrk+0x58>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20010eb0:	800017b7          	lui	a5,0x80001
20010eb4:	a907a703          	lw	a4,-1392(a5) # 80000a90 <metal_segment_heap_target_end+0xfffff324>
20010eb8:	fdc42783          	lw	a5,-36(s0)
20010ebc:	973e                	add	a4,a4,a5
20010ebe:	800017b7          	lui	a5,0x80001
20010ec2:	a8e7a823          	sw	a4,-1392(a5) # 80000a90 <metal_segment_heap_target_end+0xfffff324>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20010ec6:	fec42783          	lw	a5,-20(s0)
20010eca:	a801                	j	20010eda <_sbrk+0x66>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20010ecc:	800017b7          	lui	a5,0x80001
20010ed0:	4e418713          	addi	a4,gp,1252 # 8000176c <metal_segment_heap_target_end>
20010ed4:	a8e7a823          	sw	a4,-1392(a5) # 80000a90 <metal_segment_heap_target_end+0xfffff324>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20010ed8:	57fd                	li	a5,-1
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_sbrk.c:39
}
20010eda:	853e                	mv	a0,a5
20010edc:	5432                	lw	s0,44(sp)
20010ede:	6145                	addi	sp,sp,48
20010ee0:	8082                	ret

20010ee2 <_write>:
_write():
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20010ee2:	7179                	addi	sp,sp,-48
20010ee4:	d606                	sw	ra,44(sp)
20010ee6:	d422                	sw	s0,40(sp)
20010ee8:	1800                	addi	s0,sp,48
20010eea:	fca42e23          	sw	a0,-36(s0)
20010eee:	fcb42c23          	sw	a1,-40(s0)
20010ef2:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20010ef6:	fdc42703          	lw	a4,-36(s0)
20010efa:	4785                	li	a5,1
20010efc:	00f70963          	beq	a4,a5,20010f0e <_write+0x2c>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20010f00:	28a9                	jal	20010f5a <__errno>
20010f02:	872a                	mv	a4,a0
20010f04:	05800793          	li	a5,88
20010f08:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:12
    return -1;
20010f0a:	57fd                	li	a5,-1
20010f0c:	a82d                	j	20010f46 <_write+0x64>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20010f0e:	fd842783          	lw	a5,-40(s0)
20010f12:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20010f16:	fe042623          	sw	zero,-20(s0)
20010f1a:	a839                	j	20010f38 <_write+0x56>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20010f1c:	fe842703          	lw	a4,-24(s0)
20010f20:	fec42783          	lw	a5,-20(s0)
20010f24:	97ba                	add	a5,a5,a4
20010f26:	0007c783          	lbu	a5,0(a5)
20010f2a:	853e                	mv	a0,a5
20010f2c:	2ca1                	jal	20011184 <metal_tty_putc>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20010f2e:	fec42783          	lw	a5,-20(s0)
20010f32:	0785                	addi	a5,a5,1
20010f34:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20010f38:	fec42703          	lw	a4,-20(s0)
20010f3c:	fd442783          	lw	a5,-44(s0)
20010f40:	fcf76ee3          	bltu	a4,a5,20010f1c <_write+0x3a>
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:18
  return 0;
20010f44:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_write.c:19
}
20010f46:	853e                	mv	a0,a5
20010f48:	50b2                	lw	ra,44(sp)
20010f4a:	5422                	lw	s0,40(sp)
20010f4c:	6145                	addi	sp,sp,48
20010f4e:	8082                	ret

20010f50 <atexit>:
atexit():
20010f50:	85aa                	mv	a1,a0
20010f52:	4681                	li	a3,0
20010f54:	4601                	li	a2,0
20010f56:	4501                	li	a0,0
20010f58:	a8f1                	j	20011034 <__register_exitproc>

20010f5a <__errno>:
__errno():
20010f5a:	5fff0797          	auipc	a5,0x5fff0
20010f5e:	b2e78793          	addi	a5,a5,-1234 # 80000a88 <_impure_ptr>
20010f62:	4388                	lw	a0,0(a5)
20010f64:	8082                	ret

20010f66 <exit>:
exit():
20010f66:	1141                	addi	sp,sp,-16
20010f68:	c422                	sw	s0,8(sp)
20010f6a:	c606                	sw	ra,12(sp)
20010f6c:	00000797          	auipc	a5,0x0
20010f70:	15078793          	addi	a5,a5,336 # 200110bc <__call_exitprocs>
20010f74:	842a                	mv	s0,a0
20010f76:	c399                	beqz	a5,20010f7c <exit+0x16>
20010f78:	4581                	li	a1,0
20010f7a:	2289                	jal	200110bc <__call_exitprocs>
20010f7c:	5fff0797          	auipc	a5,0x5fff0
20010f80:	b1078793          	addi	a5,a5,-1264 # 80000a8c <_global_impure_ptr>
20010f84:	4388                	lw	a0,0(a5)
20010f86:	551c                	lw	a5,40(a0)
20010f88:	c391                	beqz	a5,20010f8c <exit+0x26>
20010f8a:	9782                	jalr	a5
20010f8c:	8522                	mv	a0,s0
20010f8e:	4a2040ef          	jal	ra,20015430 <_exit>

20010f92 <__libc_fini_array>:
__libc_fini_array():
20010f92:	1141                	addi	sp,sp,-16
20010f94:	00005797          	auipc	a5,0x5
20010f98:	10878793          	addi	a5,a5,264 # 2001609c <__fini_array_end>
20010f9c:	c422                	sw	s0,8(sp)
20010f9e:	00005417          	auipc	s0,0x5
20010fa2:	0fe40413          	addi	s0,s0,254 # 2001609c <__fini_array_end>
20010fa6:	8c1d                	sub	s0,s0,a5
20010fa8:	c226                	sw	s1,4(sp)
20010faa:	c606                	sw	ra,12(sp)
20010fac:	8409                	srai	s0,s0,0x2
20010fae:	84be                	mv	s1,a5
20010fb0:	e411                	bnez	s0,20010fbc <__libc_fini_array+0x2a>
20010fb2:	40b2                	lw	ra,12(sp)
20010fb4:	4422                	lw	s0,8(sp)
20010fb6:	4492                	lw	s1,4(sp)
20010fb8:	0141                	addi	sp,sp,16
20010fba:	8082                	ret
20010fbc:	147d                	addi	s0,s0,-1
20010fbe:	00241793          	slli	a5,s0,0x2
20010fc2:	97a6                	add	a5,a5,s1
20010fc4:	439c                	lw	a5,0(a5)
20010fc6:	9782                	jalr	a5
20010fc8:	b7e5                	j	20010fb0 <__libc_fini_array+0x1e>

20010fca <__libc_init_array>:
__libc_init_array():
20010fca:	1141                	addi	sp,sp,-16
20010fcc:	00005797          	auipc	a5,0x5
20010fd0:	0c478793          	addi	a5,a5,196 # 20016090 <__init_array_start>
20010fd4:	c422                	sw	s0,8(sp)
20010fd6:	00005417          	auipc	s0,0x5
20010fda:	0ba40413          	addi	s0,s0,186 # 20016090 <__init_array_start>
20010fde:	8c1d                	sub	s0,s0,a5
20010fe0:	c226                	sw	s1,4(sp)
20010fe2:	c04a                	sw	s2,0(sp)
20010fe4:	c606                	sw	ra,12(sp)
20010fe6:	8409                	srai	s0,s0,0x2
20010fe8:	4481                	li	s1,0
20010fea:	893e                	mv	s2,a5
20010fec:	02849663          	bne	s1,s0,20011018 <__libc_init_array+0x4e>
20010ff0:	00005797          	auipc	a5,0x5
20010ff4:	0a078793          	addi	a5,a5,160 # 20016090 <__init_array_start>
20010ff8:	00005417          	auipc	s0,0x5
20010ffc:	0a440413          	addi	s0,s0,164 # 2001609c <__fini_array_end>
20011000:	8c1d                	sub	s0,s0,a5
20011002:	8409                	srai	s0,s0,0x2
20011004:	4481                	li	s1,0
20011006:	893e                	mv	s2,a5
20011008:	00849f63          	bne	s1,s0,20011026 <__libc_init_array+0x5c>
2001100c:	40b2                	lw	ra,12(sp)
2001100e:	4422                	lw	s0,8(sp)
20011010:	4492                	lw	s1,4(sp)
20011012:	4902                	lw	s2,0(sp)
20011014:	0141                	addi	sp,sp,16
20011016:	8082                	ret
20011018:	00249793          	slli	a5,s1,0x2
2001101c:	97ca                	add	a5,a5,s2
2001101e:	439c                	lw	a5,0(a5)
20011020:	0485                	addi	s1,s1,1
20011022:	9782                	jalr	a5
20011024:	b7e1                	j	20010fec <__libc_init_array+0x22>
20011026:	00249793          	slli	a5,s1,0x2
2001102a:	97ca                	add	a5,a5,s2
2001102c:	439c                	lw	a5,0(a5)
2001102e:	0485                	addi	s1,s1,1
20011030:	9782                	jalr	a5
20011032:	bfd9                	j	20011008 <__libc_init_array+0x3e>

20011034 <__register_exitproc>:
__register_exitproc():
20011034:	5fff0797          	auipc	a5,0x5fff0
20011038:	aa478793          	addi	a5,a5,-1372 # 80000ad8 <_global_atexit>
2001103c:	439c                	lw	a5,0(a5)
2001103e:	8e2a                	mv	t3,a0
20011040:	e39d                	bnez	a5,20011066 <__register_exitproc+0x32>
20011042:	5fff0717          	auipc	a4,0x5fff0
20011046:	a9a70713          	addi	a4,a4,-1382 # 80000adc <_global_atexit0>
2001104a:	5fff0797          	auipc	a5,0x5fff0
2001104e:	a8e7a723          	sw	a4,-1394(a5) # 80000ad8 <_global_atexit>
20011052:	dffef517          	auipc	a0,0xdffef
20011056:	fae50513          	addi	a0,a0,-82 # 0 <__metal_boot_hart>
2001105a:	87ba                	mv	a5,a4
2001105c:	c509                	beqz	a0,20011066 <__register_exitproc+0x32>
2001105e:	411c                	lw	a5,0(a0)
20011060:	8cf1ae23          	sw	a5,-1828(gp) # 80000b64 <_global_atexit0+0x88>
20011064:	87ba                	mv	a5,a4
20011066:	43d8                	lw	a4,4(a5)
20011068:	487d                	li	a6,31
2001106a:	557d                	li	a0,-1
2001106c:	04e84763          	blt	a6,a4,200110ba <__register_exitproc+0x86>
20011070:	020e0e63          	beqz	t3,200110ac <__register_exitproc+0x78>
20011074:	0887a803          	lw	a6,136(a5)
20011078:	04080163          	beqz	a6,200110ba <__register_exitproc+0x86>
2001107c:	00271893          	slli	a7,a4,0x2
20011080:	98c2                	add	a7,a7,a6
20011082:	00c8a023          	sw	a2,0(a7)
20011086:	10082303          	lw	t1,256(a6)
2001108a:	4605                	li	a2,1
2001108c:	00e61633          	sll	a2,a2,a4
20011090:	00c36333          	or	t1,t1,a2
20011094:	10682023          	sw	t1,256(a6)
20011098:	08d8a023          	sw	a3,128(a7)
2001109c:	4689                	li	a3,2
2001109e:	00de1763          	bne	t3,a3,200110ac <__register_exitproc+0x78>
200110a2:	10482683          	lw	a3,260(a6)
200110a6:	8e55                	or	a2,a2,a3
200110a8:	10c82223          	sw	a2,260(a6)
200110ac:	00170693          	addi	a3,a4,1
200110b0:	070a                	slli	a4,a4,0x2
200110b2:	c3d4                	sw	a3,4(a5)
200110b4:	97ba                	add	a5,a5,a4
200110b6:	c78c                	sw	a1,8(a5)
200110b8:	4501                	li	a0,0
200110ba:	8082                	ret

200110bc <__call_exitprocs>:
__call_exitprocs():
200110bc:	7179                	addi	sp,sp,-48
200110be:	cc52                	sw	s4,24(sp)
200110c0:	ca56                	sw	s5,20(sp)
200110c2:	c85a                	sw	s6,16(sp)
200110c4:	c65e                	sw	s7,12(sp)
200110c6:	d606                	sw	ra,44(sp)
200110c8:	d422                	sw	s0,40(sp)
200110ca:	d226                	sw	s1,36(sp)
200110cc:	d04a                	sw	s2,32(sp)
200110ce:	ce4e                	sw	s3,28(sp)
200110d0:	c462                	sw	s8,8(sp)
200110d2:	8b2a                	mv	s6,a0
200110d4:	8a2e                	mv	s4,a1
200110d6:	5fff0a97          	auipc	s5,0x5fff0
200110da:	a02a8a93          	addi	s5,s5,-1534 # 80000ad8 <_global_atexit>
200110de:	4b85                	li	s7,1
200110e0:	000aa403          	lw	s0,0(s5)
200110e4:	c811                	beqz	s0,200110f8 <__call_exitprocs+0x3c>
200110e6:	4044                	lw	s1,4(s0)
200110e8:	08842983          	lw	s3,136(s0)
200110ec:	fff48913          	addi	s2,s1,-1
200110f0:	048a                	slli	s1,s1,0x2
200110f2:	94a2                	add	s1,s1,s0
200110f4:	00095e63          	bgez	s2,20011110 <__call_exitprocs+0x54>
200110f8:	50b2                	lw	ra,44(sp)
200110fa:	5422                	lw	s0,40(sp)
200110fc:	5492                	lw	s1,36(sp)
200110fe:	5902                	lw	s2,32(sp)
20011100:	49f2                	lw	s3,28(sp)
20011102:	4a62                	lw	s4,24(sp)
20011104:	4ad2                	lw	s5,20(sp)
20011106:	4b42                	lw	s6,16(sp)
20011108:	4bb2                	lw	s7,12(sp)
2001110a:	4c22                	lw	s8,8(sp)
2001110c:	6145                	addi	sp,sp,48
2001110e:	8082                	ret
20011110:	000a0e63          	beqz	s4,2001112c <__call_exitprocs+0x70>
20011114:	00099563          	bnez	s3,2001111e <__call_exitprocs+0x62>
20011118:	197d                	addi	s2,s2,-1
2001111a:	14f1                	addi	s1,s1,-4
2001111c:	bfe1                	j	200110f4 <__call_exitprocs+0x38>
2001111e:	00291793          	slli	a5,s2,0x2
20011122:	97ce                	add	a5,a5,s3
20011124:	0807a783          	lw	a5,128(a5)
20011128:	ff4798e3          	bne	a5,s4,20011118 <__call_exitprocs+0x5c>
2001112c:	4058                	lw	a4,4(s0)
2001112e:	40dc                	lw	a5,4(s1)
20011130:	177d                	addi	a4,a4,-1
20011132:	03271863          	bne	a4,s2,20011162 <__call_exitprocs+0xa6>
20011136:	01242223          	sw	s2,4(s0)
2001113a:	dff9                	beqz	a5,20011118 <__call_exitprocs+0x5c>
2001113c:	00442c03          	lw	s8,4(s0)
20011140:	00098863          	beqz	s3,20011150 <__call_exitprocs+0x94>
20011144:	1009a683          	lw	a3,256(s3)
20011148:	012b9733          	sll	a4,s7,s2
2001114c:	8ef9                	and	a3,a3,a4
2001114e:	ee89                	bnez	a3,20011168 <__call_exitprocs+0xac>
20011150:	9782                	jalr	a5
20011152:	4058                	lw	a4,4(s0)
20011154:	000aa783          	lw	a5,0(s5)
20011158:	f98714e3          	bne	a4,s8,200110e0 <__call_exitprocs+0x24>
2001115c:	faf40ee3          	beq	s0,a5,20011118 <__call_exitprocs+0x5c>
20011160:	b741                	j	200110e0 <__call_exitprocs+0x24>
20011162:	0004a223          	sw	zero,4(s1)
20011166:	bfd1                	j	2001113a <__call_exitprocs+0x7e>
20011168:	00291693          	slli	a3,s2,0x2
2001116c:	96ce                	add	a3,a3,s3
2001116e:	428c                	lw	a1,0(a3)
20011170:	1049a683          	lw	a3,260(s3)
20011174:	8f75                	and	a4,a4,a3
20011176:	e701                	bnez	a4,2001117e <__call_exitprocs+0xc2>
20011178:	855a                	mv	a0,s6
2001117a:	9782                	jalr	a5
2001117c:	bfd9                	j	20011152 <__call_exitprocs+0x96>
2001117e:	852e                	mv	a0,a1
20011180:	9782                	jalr	a5
20011182:	bfc1                	j	20011152 <__call_exitprocs+0x96>

20011184 <metal_tty_putc>:
metal_tty_putc():
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20011184:	1101                	addi	sp,sp,-32
20011186:	ce06                	sw	ra,28(sp)
20011188:	cc22                	sw	s0,24(sp)
2001118a:	1000                	addi	s0,sp,32
2001118c:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:13
    if (c == '\n') {
20011190:	fec42703          	lw	a4,-20(s0)
20011194:	47a9                	li	a5,10
20011196:	00f71463          	bne	a4,a5,2001119e <metal_tty_putc+0x1a>
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
2001119a:	4535                	li	a0,13
2001119c:	2811                	jal	200111b0 <metal_tty_putc_raw>
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
2001119e:	fec42503          	lw	a0,-20(s0)
200111a2:	2039                	jal	200111b0 <metal_tty_putc_raw>
200111a4:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:17
}
200111a6:	853e                	mv	a0,a5
200111a8:	40f2                	lw	ra,28(sp)
200111aa:	4462                	lw	s0,24(sp)
200111ac:	6105                	addi	sp,sp,32
200111ae:	8082                	ret

200111b0 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
200111b0:	1101                	addi	sp,sp,-32
200111b2:	ce06                	sw	ra,28(sp)
200111b4:	cc22                	sw	s0,24(sp)
200111b6:	1000                	addi	s0,sp,32
200111b8:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
200111bc:	fec42583          	lw	a1,-20(s0)
200111c0:	800017b7          	lui	a5,0x80001
200111c4:	a2078513          	addi	a0,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2b4>
200111c8:	28b1                	jal	20011224 <metal_uart_putc>
200111ca:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:22
}
200111cc:	853e                	mv	a0,a5
200111ce:	40f2                	lw	ra,28(sp)
200111d0:	4462                	lw	s0,24(sp)
200111d2:	6105                	addi	sp,sp,32
200111d4:	8082                	ret

200111d6 <metal_tty_init>:
metal_tty_init():
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
200111d6:	1141                	addi	sp,sp,-16
200111d8:	c606                	sw	ra,12(sp)
200111da:	c422                	sw	s0,8(sp)
200111dc:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
200111de:	67f1                	lui	a5,0x1c
200111e0:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
200111e4:	800017b7          	lui	a5,0x80001
200111e8:	a2078513          	addi	a0,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2b4>
200111ec:	2031                	jal	200111f8 <metal_uart_init>
/home/picard/Documents/cleanflight/freedom-metal/src/tty.c:42
}
200111ee:	0001                	nop
200111f0:	40b2                	lw	ra,12(sp)
200111f2:	4422                	lw	s0,8(sp)
200111f4:	0141                	addi	sp,sp,16
200111f6:	8082                	ret

200111f8 <metal_uart_init>:
metal_uart_init():
/home/picard/Documents/cleanflight/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
200111f8:	1101                	addi	sp,sp,-32
200111fa:	ce06                	sw	ra,28(sp)
200111fc:	cc22                	sw	s0,24(sp)
200111fe:	1000                	addi	s0,sp,32
20011200:	fea42623          	sw	a0,-20(s0)
20011204:	feb42423          	sw	a1,-24(s0)
20011208:	fec42783          	lw	a5,-20(s0)
2001120c:	439c                	lw	a5,0(a5)
2001120e:	439c                	lw	a5,0(a5)
20011210:	fe842583          	lw	a1,-24(s0)
20011214:	fec42503          	lw	a0,-20(s0)
20011218:	9782                	jalr	a5
2001121a:	0001                	nop
2001121c:	40f2                	lw	ra,28(sp)
2001121e:	4462                	lw	s0,24(sp)
20011220:	6105                	addi	sp,sp,32
20011222:	8082                	ret

20011224 <metal_uart_putc>:
metal_uart_putc():
/home/picard/Documents/cleanflight/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20011224:	1101                	addi	sp,sp,-32
20011226:	ce06                	sw	ra,28(sp)
20011228:	cc22                	sw	s0,24(sp)
2001122a:	1000                	addi	s0,sp,32
2001122c:	fea42623          	sw	a0,-20(s0)
20011230:	feb42423          	sw	a1,-24(s0)
20011234:	fec42783          	lw	a5,-20(s0)
20011238:	439c                	lw	a5,0(a5)
2001123a:	43dc                	lw	a5,4(a5)
2001123c:	fe842583          	lw	a1,-24(s0)
20011240:	fec42503          	lw	a0,-20(s0)
20011244:	9782                	jalr	a5
20011246:	87aa                	mv	a5,a0
20011248:	853e                	mv	a0,a5
2001124a:	40f2                	lw	ra,28(sp)
2001124c:	4462                	lw	s0,24(sp)
2001124e:	6105                	addi	sp,sp,32
20011250:	8082                	ret

20011252 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/picard/Documents/cleanflight/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20011252:	1101                	addi	sp,sp,-32
20011254:	ce06                	sw	ra,28(sp)
20011256:	cc22                	sw	s0,24(sp)
20011258:	1000                	addi	s0,sp,32
2001125a:	fea42623          	sw	a0,-20(s0)
2001125e:	feb42423          	sw	a1,-24(s0)
20011262:	fec42783          	lw	a5,-20(s0)
20011266:	439c                	lw	a5,0(a5)
20011268:	4bdc                	lw	a5,20(a5)
2001126a:	fe842583          	lw	a1,-24(s0)
2001126e:	fec42503          	lw	a0,-20(s0)
20011272:	9782                	jalr	a5
20011274:	87aa                	mv	a5,a0
20011276:	853e                	mv	a0,a5
20011278:	40f2                	lw	ra,28(sp)
2001127a:	4462                	lw	s0,24(sp)
2001127c:	6105                	addi	sp,sp,32
2001127e:	8082                	ret

20011280 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:203
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20011280:	1101                	addi	sp,sp,-32
20011282:	ce22                	sw	s0,28(sp)
20011284:	1000                	addi	s0,sp,32
20011286:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:204
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
2001128a:	fec42703          	lw	a4,-20(s0)
2001128e:	81018793          	addi	a5,gp,-2032 # 80000a98 <__metal_dt_clint_2000000>
20011292:	00f71563          	bne	a4,a5,2001129c <__metal_driver_sifive_clint0_control_base+0x1c>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:205
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20011296:	020007b7          	lui	a5,0x2000
2001129a:	a011                	j	2001129e <__metal_driver_sifive_clint0_control_base+0x1e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:208
	}
	else {
		return 0;
2001129c:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:210
	}
}
2001129e:	853e                	mv	a0,a5
200112a0:	4472                	lw	s0,28(sp)
200112a2:	6105                	addi	sp,sp,32
200112a4:	8082                	ret

200112a6 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:223
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
200112a6:	1101                	addi	sp,sp,-32
200112a8:	ce22                	sw	s0,28(sp)
200112aa:	1000                	addi	s0,sp,32
200112ac:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:224
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
200112b0:	fec42703          	lw	a4,-20(s0)
200112b4:	81018793          	addi	a5,gp,-2032 # 80000a98 <__metal_dt_clint_2000000>
200112b8:	00f71463          	bne	a4,a5,200112c0 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:225
		return METAL_MAX_CLINT_INTERRUPTS;
200112bc:	4789                	li	a5,2
200112be:	a011                	j	200112c2 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:228
	}
	else {
		return 0;
200112c0:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:230
	}
}
200112c2:	853e                	mv	a0,a5
200112c4:	4472                	lw	s0,28(sp)
200112c6:	6105                	addi	sp,sp,32
200112c8:	8082                	ret

200112ca <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:233

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
200112ca:	1101                	addi	sp,sp,-32
200112cc:	ce22                	sw	s0,28(sp)
200112ce:	1000                	addi	s0,sp,32
200112d0:	fea42623          	sw	a0,-20(s0)
200112d4:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:234
	if (idx == 0) {
200112d8:	fe842783          	lw	a5,-24(s0)
200112dc:	e791                	bnez	a5,200112e8 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:235
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
200112de:	800007b7          	lui	a5,0x80000
200112e2:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffe924>
200112e6:	a821                	j	200112fe <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:237
	}
	else if (idx == 1) {
200112e8:	fe842703          	lw	a4,-24(s0)
200112ec:	4785                	li	a5,1
200112ee:	00f71763          	bne	a4,a5,200112fc <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:238
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
200112f2:	800007b7          	lui	a5,0x80000
200112f6:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffe924>
200112fa:	a011                	j	200112fe <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:241
	}
	else {
		return NULL;
200112fc:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:243
	}
}
200112fe:	853e                	mv	a0,a5
20011300:	4472                	lw	s0,28(sp)
20011302:	6105                	addi	sp,sp,32
20011304:	8082                	ret

20011306 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:246

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20011306:	1101                	addi	sp,sp,-32
20011308:	ce22                	sw	s0,28(sp)
2001130a:	1000                	addi	s0,sp,32
2001130c:	fea42623          	sw	a0,-20(s0)
20011310:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:247
	if (idx == 0) {
20011314:	fe842783          	lw	a5,-24(s0)
20011318:	e399                	bnez	a5,2001131e <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:248
		return 3;
2001131a:	478d                	li	a5,3
2001131c:	a809                	j	2001132e <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:250
	}
	else if (idx == 1) {
2001131e:	fe842703          	lw	a4,-24(s0)
20011322:	4785                	li	a5,1
20011324:	00f71463          	bne	a4,a5,2001132c <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:251
		return 7;
20011328:	479d                	li	a5,7
2001132a:	a011                	j	2001132e <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:254
	}
	else {
		return 0;
2001132c:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:256
	}
}
2001132e:	853e                	mv	a0,a5
20011330:	4472                	lw	s0,28(sp)
20011332:	6105                	addi	sp,sp,32
20011334:	8082                	ret

20011336 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20011336:	715d                	addi	sp,sp,-80
20011338:	c686                	sw	ra,76(sp)
2001133a:	c4a2                	sw	s0,72(sp)
2001133c:	c2ca                	sw	s2,68(sp)
2001133e:	c0ce                	sw	s3,64(sp)
20011340:	de52                	sw	s4,60(sp)
20011342:	dc56                	sw	s5,56(sp)
20011344:	da5a                	sw	s6,52(sp)
20011346:	d85e                	sw	s7,48(sp)
20011348:	d662                	sw	s8,44(sp)
2001134a:	d466                	sw	s9,40(sp)
2001134c:	0880                	addi	s0,sp,80
2001134e:	faa42e23          	sw	a0,-68(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20011352:	fbc42783          	lw	a5,-68(s0)
20011356:	853e                	mv	a0,a5
20011358:	3725                	jal	20011280 <__metal_driver_sifive_clint0_control_base>
2001135a:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
2001135e:	fcc42703          	lw	a4,-52(s0)
20011362:	67b1                	lui	a5,0xc
20011364:	17f1                	addi	a5,a5,-4
20011366:	97ba                	add	a5,a5,a4
20011368:	439c                	lw	a5,0(a5)
2001136a:	fcf42423          	sw	a5,-56(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
2001136e:	fcc42703          	lw	a4,-52(s0)
20011372:	67b1                	lui	a5,0xc
20011374:	17e1                	addi	a5,a5,-8
20011376:	97ba                	add	a5,a5,a4
20011378:	439c                	lw	a5,0(a5)
2001137a:	fcf42223          	sw	a5,-60(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
2001137e:	fcc42703          	lw	a4,-52(s0)
20011382:	67b1                	lui	a5,0xc
20011384:	17f1                	addi	a5,a5,-4
20011386:	97ba                	add	a5,a5,a4
20011388:	439c                	lw	a5,0(a5)
2001138a:	fc842703          	lw	a4,-56(s0)
2001138e:	fcf718e3          	bne	a4,a5,2001135e <__metal_clint0_mtime_get+0x28>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20011392:	fc842783          	lw	a5,-56(s0)
20011396:	8c3e                	mv	s8,a5
20011398:	4c81                	li	s9,0
2001139a:	000c1993          	slli	s3,s8,0x0
2001139e:	4901                	li	s2,0
200113a0:	fc442783          	lw	a5,-60(s0)
200113a4:	8a3e                	mv	s4,a5
200113a6:	4a81                	li	s5,0
200113a8:	01496b33          	or	s6,s2,s4
200113ac:	0159ebb3          	or	s7,s3,s5
200113b0:	87da                	mv	a5,s6
200113b2:	885e                	mv	a6,s7
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:25
}
200113b4:	853e                	mv	a0,a5
200113b6:	85c2                	mv	a1,a6
200113b8:	40b6                	lw	ra,76(sp)
200113ba:	4426                	lw	s0,72(sp)
200113bc:	4916                	lw	s2,68(sp)
200113be:	4986                	lw	s3,64(sp)
200113c0:	5a72                	lw	s4,60(sp)
200113c2:	5ae2                	lw	s5,56(sp)
200113c4:	5b52                	lw	s6,52(sp)
200113c6:	5bc2                	lw	s7,48(sp)
200113c8:	5c32                	lw	s8,44(sp)
200113ca:	5ca2                	lw	s9,40(sp)
200113cc:	6161                	addi	sp,sp,80
200113ce:	8082                	ret

200113d0 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
200113d0:	7179                	addi	sp,sp,-48
200113d2:	d606                	sw	ra,44(sp)
200113d4:	d422                	sw	s0,40(sp)
200113d6:	d24a                	sw	s2,36(sp)
200113d8:	d04e                	sw	s3,32(sp)
200113da:	1800                	addi	s0,sp,48
200113dc:	fca42e23          	sw	a0,-36(s0)
200113e0:	fcb42c23          	sw	a1,-40(s0)
200113e4:	fcc42823          	sw	a2,-48(s0)
200113e8:	fcd42a23          	sw	a3,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
200113ec:	fdc42783          	lw	a5,-36(s0)
200113f0:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
200113f4:	fec42783          	lw	a5,-20(s0)
200113f8:	853e                	mv	a0,a5
200113fa:	3559                	jal	20011280 <__metal_driver_sifive_clint0_control_base>
200113fc:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20011400:	fd842783          	lw	a5,-40(s0)
20011404:	078e                	slli	a5,a5,0x3
20011406:	873e                	mv	a4,a5
20011408:	fe842783          	lw	a5,-24(s0)
2001140c:	973e                	add	a4,a4,a5
2001140e:	6791                	lui	a5,0x4
20011410:	0791                	addi	a5,a5,4
20011412:	97ba                	add	a5,a5,a4
20011414:	873e                	mv	a4,a5
20011416:	57fd                	li	a5,-1
20011418:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
2001141a:	fd842783          	lw	a5,-40(s0)
2001141e:	078e                	slli	a5,a5,0x3
20011420:	873e                	mv	a4,a5
20011422:	fe842783          	lw	a5,-24(s0)
20011426:	973e                	add	a4,a4,a5
20011428:	6791                	lui	a5,0x4
2001142a:	97ba                	add	a5,a5,a4
2001142c:	873e                	mv	a4,a5
2001142e:	fd042783          	lw	a5,-48(s0)
20011432:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20011434:	fd442783          	lw	a5,-44(s0)
20011438:	0007d913          	srli	s2,a5,0x0
2001143c:	4981                	li	s3,0
2001143e:	fd842783          	lw	a5,-40(s0)
20011442:	078e                	slli	a5,a5,0x3
20011444:	873e                	mv	a4,a5
20011446:	fe842783          	lw	a5,-24(s0)
2001144a:	973e                	add	a4,a4,a5
2001144c:	6791                	lui	a5,0x4
2001144e:	0791                	addi	a5,a5,4
20011450:	97ba                	add	a5,a5,a4
20011452:	874a                	mv	a4,s2
20011454:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20011456:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:44
}
20011458:	853e                	mv	a0,a5
2001145a:	50b2                	lw	ra,44(sp)
2001145c:	5422                	lw	s0,40(sp)
2001145e:	5912                	lw	s2,36(sp)
20011460:	5982                	lw	s3,32(sp)
20011462:	6145                	addi	sp,sp,48
20011464:	8082                	ret

20011466 <_get_cpu_intc>:
_get_cpu_intc():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20011466:	1101                	addi	sp,sp,-32
20011468:	ce06                	sw	ra,28(sp)
2001146a:	cc22                	sw	s0,24(sp)
2001146c:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
2001146e:	fe042623          	sw	zero,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20011472:	f14027f3          	csrr	a5,mhartid
20011476:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
2001147a:	fec42783          	lw	a5,-20(s0)
2001147e:	853e                	mv	a0,a5
20011480:	5df030ef          	jal	ra,2001525e <metal_cpu_get>
20011484:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20011488:	fe842503          	lw	a0,-24(s0)
2001148c:	5ad030ef          	jal	ra,20015238 <metal_cpu_interrupt_controller>
20011490:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:55
}
20011492:	853e                	mv	a0,a5
20011494:	40f2                	lw	ra,28(sp)
20011496:	4462                	lw	s0,24(sp)
20011498:	6105                	addi	sp,sp,32
2001149a:	8082                	ret

2001149c <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
2001149c:	7139                	addi	sp,sp,-64
2001149e:	de06                	sw	ra,60(sp)
200114a0:	dc22                	sw	s0,56(sp)
200114a2:	0080                	addi	s0,sp,64
200114a4:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
200114a8:	fcc42503          	lw	a0,-52(s0)
200114ac:	3bed                	jal	200112a6 <__metal_driver_sifive_clint0_num_interrupts>
200114ae:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
200114b2:	fcc42783          	lw	a5,-52(s0)
200114b6:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
200114ba:	fe442783          	lw	a5,-28(s0)
200114be:	43dc                	lw	a5,4(a5)
200114c0:	efa9                	bnez	a5,2001151a <__metal_driver_riscv_clint0_init+0x7e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
200114c2:	fe042623          	sw	zero,-20(s0)
200114c6:	a081                	j	20011506 <__metal_driver_riscv_clint0_init+0x6a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
200114c8:	fec42583          	lw	a1,-20(s0)
200114cc:	fcc42503          	lw	a0,-52(s0)
200114d0:	3bed                	jal	200112ca <__metal_driver_sifive_clint0_interrupt_parents>
200114d2:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
200114d6:	fec42583          	lw	a1,-20(s0)
200114da:	fcc42503          	lw	a0,-52(s0)
200114de:	3525                	jal	20011306 <__metal_driver_sifive_clint0_interrupt_lines>
200114e0:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
200114e4:	fe042783          	lw	a5,-32(s0)
200114e8:	439c                	lw	a5,0(a5)
200114ea:	4fdc                	lw	a5,28(a5)
200114ec:	fcc42683          	lw	a3,-52(s0)
200114f0:	4601                	li	a2,0
200114f2:	fdc42583          	lw	a1,-36(s0)
200114f6:	fe042503          	lw	a0,-32(s0)
200114fa:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
200114fc:	fec42783          	lw	a5,-20(s0)
20011500:	0785                	addi	a5,a5,1
20011502:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20011506:	fec42703          	lw	a4,-20(s0)
2001150a:	fe842783          	lw	a5,-24(s0)
2001150e:	faf74de3          	blt	a4,a5,200114c8 <__metal_driver_riscv_clint0_init+0x2c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20011512:	fe442783          	lw	a5,-28(s0)
20011516:	4705                	li	a4,1
20011518:	c3d8                	sw	a4,4(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
2001151a:	0001                	nop
2001151c:	50f2                	lw	ra,60(sp)
2001151e:	5462                	lw	s0,56(sp)
20011520:	6121                	addi	sp,sp,64
20011522:	8082                	ret

20011524 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20011524:	7139                	addi	sp,sp,-64
20011526:	de06                	sw	ra,60(sp)
20011528:	dc22                	sw	s0,56(sp)
2001152a:	0080                	addi	s0,sp,64
2001152c:	fca42623          	sw	a0,-52(s0)
20011530:	fcb42423          	sw	a1,-56(s0)
20011534:	fcc42223          	sw	a2,-60(s0)
20011538:	fcd42023          	sw	a3,-64(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
2001153c:	57fd                	li	a5,-1
2001153e:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20011542:	350010ef          	jal	ra,20012892 <__metal_controller_interrupt_vector_mode>
20011546:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
2001154a:	fe042423          	sw	zero,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
2001154e:	3f21                	jal	20011466 <_get_cpu_intc>
20011550:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20011554:	fcc42503          	lw	a0,-52(s0)
20011558:	33b9                	jal	200112a6 <__metal_driver_sifive_clint0_num_interrupts>
2001155a:	fca42c23          	sw	a0,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
2001155e:	fe042703          	lw	a4,-32(s0)
20011562:	4785                	li	a5,1
20011564:	00f70863          	beq	a4,a5,20011574 <__metal_driver_riscv_clint0_register+0x50>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20011568:	fe042783          	lw	a5,-32(s0)
2001156c:	c781                	beqz	a5,20011574 <__metal_driver_riscv_clint0_register+0x50>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
2001156e:	fec42783          	lw	a5,-20(s0)
20011572:	a049                	j	200115f4 <__metal_driver_riscv_clint0_register+0xd0>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20011574:	fe042223          	sw	zero,-28(s0)
20011578:	a091                	j	200115bc <__metal_driver_riscv_clint0_register+0x98>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2001157a:	fe442583          	lw	a1,-28(s0)
2001157e:	fcc42503          	lw	a0,-52(s0)
20011582:	3351                	jal	20011306 <__metal_driver_sifive_clint0_interrupt_lines>
20011584:	fca42a23          	sw	a0,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20011588:	fe442583          	lw	a1,-28(s0)
2001158c:	fcc42503          	lw	a0,-52(s0)
20011590:	3b2d                	jal	200112ca <__metal_driver_sifive_clint0_interrupt_parents>
20011592:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20011596:	fdc42703          	lw	a4,-36(s0)
2001159a:	fe842783          	lw	a5,-24(s0)
2001159e:	00f71863          	bne	a4,a5,200115ae <__metal_driver_riscv_clint0_register+0x8a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
200115a2:	fc842703          	lw	a4,-56(s0)
200115a6:	fd442783          	lw	a5,-44(s0)
200115aa:	02f70063          	beq	a4,a5,200115ca <__metal_driver_riscv_clint0_register+0xa6>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
200115ae:	fe042423          	sw	zero,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
200115b2:	fe442783          	lw	a5,-28(s0)
200115b6:	0785                	addi	a5,a5,1
200115b8:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
200115bc:	fe442703          	lw	a4,-28(s0)
200115c0:	fd842783          	lw	a5,-40(s0)
200115c4:	faf74be3          	blt	a4,a5,2001157a <__metal_driver_riscv_clint0_register+0x56>
200115c8:	a011                	j	200115cc <__metal_driver_riscv_clint0_register+0xa8>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
200115ca:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
200115cc:	fe842783          	lw	a5,-24(s0)
200115d0:	c385                	beqz	a5,200115f0 <__metal_driver_riscv_clint0_register+0xcc>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
200115d2:	fe842783          	lw	a5,-24(s0)
200115d6:	439c                	lw	a5,0(a5)
200115d8:	4fdc                	lw	a5,28(a5)
200115da:	fc042683          	lw	a3,-64(s0)
200115de:	fc442603          	lw	a2,-60(s0)
200115e2:	fc842583          	lw	a1,-56(s0)
200115e6:	fe842503          	lw	a0,-24(s0)
200115ea:	9782                	jalr	a5
200115ec:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
200115f0:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:102
}
200115f4:	853e                	mv	a0,a5
200115f6:	50f2                	lw	ra,60(sp)
200115f8:	5462                	lw	s0,56(sp)
200115fa:	6121                	addi	sp,sp,64
200115fc:	8082                	ret

200115fe <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
200115fe:	7179                	addi	sp,sp,-48
20011600:	d622                	sw	s0,44(sp)
20011602:	1800                	addi	s0,sp,48
20011604:	fca42e23          	sw	a0,-36(s0)
20011608:	fcb42c23          	sw	a1,-40(s0)
2001160c:	fcc42a23          	sw	a2,-44(s0)
20011610:	fcd42823          	sw	a3,-48(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20011614:	57fd                	li	a5,-1
20011616:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
2001161a:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:111
}
2001161e:	853e                	mv	a0,a5
20011620:	5432                	lw	s0,44(sp)
20011622:	6145                	addi	sp,sp,48
20011624:	8082                	ret

20011626 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20011626:	1101                	addi	sp,sp,-32
20011628:	ce06                	sw	ra,28(sp)
2001162a:	cc22                	sw	s0,24(sp)
2001162c:	1000                	addi	s0,sp,32
2001162e:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20011632:	260010ef          	jal	ra,20012892 <__metal_controller_interrupt_vector_mode>
20011636:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:116
}
20011638:	853e                	mv	a0,a5
2001163a:	40f2                	lw	ra,28(sp)
2001163c:	4462                	lw	s0,24(sp)
2001163e:	6105                	addi	sp,sp,32
20011640:	8082                	ret

20011642 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20011642:	7179                	addi	sp,sp,-48
20011644:	d606                	sw	ra,44(sp)
20011646:	d422                	sw	s0,40(sp)
20011648:	1800                	addi	s0,sp,48
2001164a:	fca42e23          	sw	a0,-36(s0)
2001164e:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20011652:	57fd                	li	a5,-1
20011654:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20011658:	3539                	jal	20011466 <_get_cpu_intc>
2001165a:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
2001165e:	fe842783          	lw	a5,-24(s0)
20011662:	c395                	beqz	a5,20011686 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20011664:	fd842703          	lw	a4,-40(s0)
20011668:	4785                	li	a5,1
2001166a:	00e7ef63          	bltu	a5,a4,20011688 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
2001166e:	fe842783          	lw	a5,-24(s0)
20011672:	439c                	lw	a5,0(a5)
20011674:	43dc                	lw	a5,4(a5)
20011676:	fd842583          	lw	a1,-40(s0)
2001167a:	fe842503          	lw	a0,-24(s0)
2001167e:	9782                	jalr	a5
20011680:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20011684:	a011                	j	20011688 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20011686:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20011688:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:133
}
2001168c:	853e                	mv	a0,a5
2001168e:	50b2                	lw	ra,44(sp)
20011690:	5422                	lw	s0,40(sp)
20011692:	6145                	addi	sp,sp,48
20011694:	8082                	ret

20011696 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20011696:	7139                	addi	sp,sp,-64
20011698:	de06                	sw	ra,60(sp)
2001169a:	dc22                	sw	s0,56(sp)
2001169c:	0080                	addi	s0,sp,64
2001169e:	fca42623          	sw	a0,-52(s0)
200116a2:	fcb42423          	sw	a1,-56(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
200116a6:	57fd                	li	a5,-1
200116a8:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
200116ac:	fc842783          	lw	a5,-56(s0)
200116b0:	c7c9                	beqz	a5,2001173a <__metal_driver_riscv_clint0_enable+0xa4>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
200116b2:	fe042423          	sw	zero,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
200116b6:	3b45                	jal	20011466 <_get_cpu_intc>
200116b8:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
200116bc:	fcc42503          	lw	a0,-52(s0)
200116c0:	36dd                	jal	200112a6 <__metal_driver_sifive_clint0_num_interrupts>
200116c2:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
200116c6:	fe042223          	sw	zero,-28(s0)
200116ca:	a091                	j	2001170e <__metal_driver_riscv_clint0_enable+0x78>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
200116cc:	fe442583          	lw	a1,-28(s0)
200116d0:	fcc42503          	lw	a0,-52(s0)
200116d4:	390d                	jal	20011306 <__metal_driver_sifive_clint0_interrupt_lines>
200116d6:	fca42c23          	sw	a0,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
200116da:	fe442583          	lw	a1,-28(s0)
200116de:	fcc42503          	lw	a0,-52(s0)
200116e2:	36e5                	jal	200112ca <__metal_driver_sifive_clint0_interrupt_parents>
200116e4:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
200116e8:	fe042703          	lw	a4,-32(s0)
200116ec:	fe842783          	lw	a5,-24(s0)
200116f0:	00f71863          	bne	a4,a5,20011700 <__metal_driver_riscv_clint0_enable+0x6a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
200116f4:	fc842703          	lw	a4,-56(s0)
200116f8:	fd842783          	lw	a5,-40(s0)
200116fc:	02f70063          	beq	a4,a5,2001171c <__metal_driver_riscv_clint0_enable+0x86>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20011700:	fe042423          	sw	zero,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20011704:	fe442783          	lw	a5,-28(s0)
20011708:	0785                	addi	a5,a5,1
2001170a:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
2001170e:	fe442703          	lw	a4,-28(s0)
20011712:	fdc42783          	lw	a5,-36(s0)
20011716:	faf74be3          	blt	a4,a5,200116cc <__metal_driver_riscv_clint0_enable+0x36>
2001171a:	a011                	j	2001171e <__metal_driver_riscv_clint0_enable+0x88>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
2001171c:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
2001171e:	fe842783          	lw	a5,-24(s0)
20011722:	cf81                	beqz	a5,2001173a <__metal_driver_riscv_clint0_enable+0xa4>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20011724:	fe842783          	lw	a5,-24(s0)
20011728:	439c                	lw	a5,0(a5)
2001172a:	53dc                	lw	a5,36(a5)
2001172c:	fc842583          	lw	a1,-56(s0)
20011730:	fe842503          	lw	a0,-24(s0)
20011734:	9782                	jalr	a5
20011736:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
2001173a:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:160
}
2001173e:	853e                	mv	a0,a5
20011740:	50f2                	lw	ra,60(sp)
20011742:	5462                	lw	s0,56(sp)
20011744:	6121                	addi	sp,sp,64
20011746:	8082                	ret

20011748 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20011748:	7139                	addi	sp,sp,-64
2001174a:	de06                	sw	ra,60(sp)
2001174c:	dc22                	sw	s0,56(sp)
2001174e:	0080                	addi	s0,sp,64
20011750:	fca42623          	sw	a0,-52(s0)
20011754:	fcb42423          	sw	a1,-56(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20011758:	57fd                	li	a5,-1
2001175a:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
2001175e:	fc842783          	lw	a5,-56(s0)
20011762:	c7c9                	beqz	a5,200117ec <__metal_driver_riscv_clint0_disable+0xa4>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20011764:	fe042423          	sw	zero,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20011768:	39fd                	jal	20011466 <_get_cpu_intc>
2001176a:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2001176e:	fcc42503          	lw	a0,-52(s0)
20011772:	3e15                	jal	200112a6 <__metal_driver_sifive_clint0_num_interrupts>
20011774:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20011778:	fe042223          	sw	zero,-28(s0)
2001177c:	a091                	j	200117c0 <__metal_driver_riscv_clint0_disable+0x78>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2001177e:	fe442583          	lw	a1,-28(s0)
20011782:	fcc42503          	lw	a0,-52(s0)
20011786:	3641                	jal	20011306 <__metal_driver_sifive_clint0_interrupt_lines>
20011788:	fca42c23          	sw	a0,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2001178c:	fe442583          	lw	a1,-28(s0)
20011790:	fcc42503          	lw	a0,-52(s0)
20011794:	3e1d                	jal	200112ca <__metal_driver_sifive_clint0_interrupt_parents>
20011796:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
2001179a:	fe042703          	lw	a4,-32(s0)
2001179e:	fe842783          	lw	a5,-24(s0)
200117a2:	00f71863          	bne	a4,a5,200117b2 <__metal_driver_riscv_clint0_disable+0x6a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
200117a6:	fc842703          	lw	a4,-56(s0)
200117aa:	fd842783          	lw	a5,-40(s0)
200117ae:	02f70063          	beq	a4,a5,200117ce <__metal_driver_riscv_clint0_disable+0x86>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
200117b2:	fe042423          	sw	zero,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
200117b6:	fe442783          	lw	a5,-28(s0)
200117ba:	0785                	addi	a5,a5,1
200117bc:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
200117c0:	fe442703          	lw	a4,-28(s0)
200117c4:	fdc42783          	lw	a5,-36(s0)
200117c8:	faf74be3          	blt	a4,a5,2001177e <__metal_driver_riscv_clint0_disable+0x36>
200117cc:	a011                	j	200117d0 <__metal_driver_riscv_clint0_disable+0x88>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
200117ce:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
200117d0:	fe842783          	lw	a5,-24(s0)
200117d4:	cf81                	beqz	a5,200117ec <__metal_driver_riscv_clint0_disable+0xa4>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
200117d6:	fe842783          	lw	a5,-24(s0)
200117da:	439c                	lw	a5,0(a5)
200117dc:	579c                	lw	a5,40(a5)
200117de:	fc842583          	lw	a1,-56(s0)
200117e2:	fe842503          	lw	a0,-24(s0)
200117e6:	9782                	jalr	a5
200117e8:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
200117ec:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:187
}
200117f0:	853e                	mv	a0,a5
200117f2:	50f2                	lw	ra,60(sp)
200117f4:	5462                	lw	s0,56(sp)
200117f6:	6121                	addi	sp,sp,64
200117f8:	8082                	ret

200117fa <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
200117fa:	7179                	addi	sp,sp,-48
200117fc:	d606                	sw	ra,44(sp)
200117fe:	d422                	sw	s0,40(sp)
20011800:	1800                	addi	s0,sp,48
20011802:	fca42e23          	sw	a0,-36(s0)
20011806:	fcb42c23          	sw	a1,-40(s0)
2001180a:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
2001180e:	57fd                	li	a5,-1
20011810:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20011814:	fdc42783          	lw	a5,-36(s0)
20011818:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
2001181c:	fdc42503          	lw	a0,-36(s0)
20011820:	3485                	jal	20011280 <__metal_driver_sifive_clint0_control_base>
20011822:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20011826:	fd842703          	lw	a4,-40(s0)
2001182a:	4789                	li	a5,2
2001182c:	04f70863          	beq	a4,a5,2001187c <__metal_driver_riscv_clint0_command_request+0x82>
20011830:	fd842703          	lw	a4,-40(s0)
20011834:	4789                	li	a5,2
20011836:	00e7c863          	blt	a5,a4,20011846 <__metal_driver_riscv_clint0_command_request+0x4c>
2001183a:	fd842703          	lw	a4,-40(s0)
2001183e:	4785                	li	a5,1
20011840:	00f70e63          	beq	a4,a5,2001185c <__metal_driver_riscv_clint0_command_request+0x62>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20011844:	a8e9                	j	2001191e <__metal_driver_riscv_clint0_command_request+0x124>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20011846:	fd842703          	lw	a4,-40(s0)
2001184a:	478d                	li	a5,3
2001184c:	04f70c63          	beq	a4,a5,200118a4 <__metal_driver_riscv_clint0_command_request+0xaa>
20011850:	fd842703          	lw	a4,-40(s0)
20011854:	4791                	li	a5,4
20011856:	08f70863          	beq	a4,a5,200118e6 <__metal_driver_riscv_clint0_command_request+0xec>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
2001185a:	a0d1                	j	2001191e <__metal_driver_riscv_clint0_command_request+0x124>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
2001185c:	fd442783          	lw	a5,-44(s0)
20011860:	cbc5                	beqz	a5,20011910 <__metal_driver_riscv_clint0_command_request+0x116>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20011862:	fe842503          	lw	a0,-24(s0)
20011866:	3cc1                	jal	20011336 <__metal_clint0_mtime_get>
20011868:	87aa                	mv	a5,a0
2001186a:	882e                	mv	a6,a1
2001186c:	fd442703          	lw	a4,-44(s0)
20011870:	c31c                	sw	a5,0(a4)
20011872:	01072223          	sw	a6,4(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20011876:	fe042623          	sw	zero,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
2001187a:	a859                	j	20011910 <__metal_driver_riscv_clint0_command_request+0x116>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
2001187c:	fd442783          	lw	a5,-44(s0)
20011880:	cbd1                	beqz	a5,20011914 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20011882:	fd442783          	lw	a5,-44(s0)
20011886:	439c                	lw	a5,0(a5)
20011888:	fef42023          	sw	a5,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2001188c:	fe042783          	lw	a5,-32(s0)
20011890:	078a                	slli	a5,a5,0x2
20011892:	873e                	mv	a4,a5
20011894:	fe442783          	lw	a5,-28(s0)
20011898:	97ba                	add	a5,a5,a4
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
2001189a:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
2001189e:	fe042623          	sw	zero,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
200118a2:	a88d                	j	20011914 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
200118a4:	fd442783          	lw	a5,-44(s0)
200118a8:	cba5                	beqz	a5,20011918 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
200118aa:	fd442783          	lw	a5,-44(s0)
200118ae:	439c                	lw	a5,0(a5)
200118b0:	fef42023          	sw	a5,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200118b4:	fe042783          	lw	a5,-32(s0)
200118b8:	078a                	slli	a5,a5,0x2
200118ba:	873e                	mv	a4,a5
200118bc:	fe442783          	lw	a5,-28(s0)
200118c0:	97ba                	add	a5,a5,a4
200118c2:	873e                	mv	a4,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
200118c4:	4785                	li	a5,1
200118c6:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
200118c8:	0480000f          	fence	o,i
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200118cc:	fe042783          	lw	a5,-32(s0)
200118d0:	078a                	slli	a5,a5,0x2
200118d2:	873e                	mv	a4,a5
200118d4:	fe442783          	lw	a5,-28(s0)
200118d8:	97ba                	add	a5,a5,a4
200118da:	439c                	lw	a5,0(a5)
200118dc:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
200118e0:	fe042623          	sw	zero,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
200118e4:	a815                	j	20011918 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
200118e6:	fe042623          	sw	zero,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
200118ea:	fd442783          	lw	a5,-44(s0)
200118ee:	c79d                	beqz	a5,2001191c <__metal_driver_riscv_clint0_command_request+0x122>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
200118f0:	fd442783          	lw	a5,-44(s0)
200118f4:	439c                	lw	a5,0(a5)
200118f6:	fef42023          	sw	a5,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200118fa:	fe042783          	lw	a5,-32(s0)
200118fe:	078a                	slli	a5,a5,0x2
20011900:	873e                	mv	a4,a5
20011902:	fe442783          	lw	a5,-28(s0)
20011906:	97ba                	add	a5,a5,a4
20011908:	439c                	lw	a5,0(a5)
2001190a:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2001190e:	a039                	j	2001191c <__metal_driver_riscv_clint0_command_request+0x122>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20011910:	0001                	nop
20011912:	a031                	j	2001191e <__metal_driver_riscv_clint0_command_request+0x124>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20011914:	0001                	nop
20011916:	a021                	j	2001191e <__metal_driver_riscv_clint0_command_request+0x124>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20011918:	0001                	nop
2001191a:	a011                	j	2001191e <__metal_driver_riscv_clint0_command_request+0x124>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2001191c:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
2001191e:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:246
}
20011922:	853e                	mv	a0,a5
20011924:	50b2                	lw	ra,44(sp)
20011926:	5422                	lw	s0,40(sp)
20011928:	6145                	addi	sp,sp,48
2001192a:	8082                	ret

2001192c <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
2001192c:	7179                	addi	sp,sp,-48
2001192e:	d606                	sw	ra,44(sp)
20011930:	d422                	sw	s0,40(sp)
20011932:	1800                	addi	s0,sp,48
20011934:	fca42e23          	sw	a0,-36(s0)
20011938:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
2001193c:	14d030ef          	jal	ra,20015288 <metal_cpu_get_current_hartid>
20011940:	87aa                	mv	a5,a0
20011942:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20011946:	fec40793          	addi	a5,s0,-20
2001194a:	863e                	mv	a2,a5
2001194c:	4589                	li	a1,2
2001194e:	fdc42503          	lw	a0,-36(s0)
20011952:	3565                	jal	200117fa <__metal_driver_riscv_clint0_command_request>
20011954:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20011956:	853e                	mv	a0,a5
20011958:	50b2                	lw	ra,44(sp)
2001195a:	5422                	lw	s0,40(sp)
2001195c:	6145                	addi	sp,sp,48
2001195e:	8082                	ret

20011960 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20011960:	7179                	addi	sp,sp,-48
20011962:	d606                	sw	ra,44(sp)
20011964:	d422                	sw	s0,40(sp)
20011966:	1800                	addi	s0,sp,48
20011968:	fca42e23          	sw	a0,-36(s0)
2001196c:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20011970:	119030ef          	jal	ra,20015288 <metal_cpu_get_current_hartid>
20011974:	87aa                	mv	a5,a0
20011976:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
2001197a:	fec40793          	addi	a5,s0,-20
2001197e:	863e                	mv	a2,a5
20011980:	458d                	li	a1,3
20011982:	fdc42503          	lw	a0,-36(s0)
20011986:	3d95                	jal	200117fa <__metal_driver_riscv_clint0_command_request>
20011988:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
2001198a:	853e                	mv	a0,a5
2001198c:	50b2                	lw	ra,44(sp)
2001198e:	5422                	lw	s0,40(sp)
20011990:	6145                	addi	sp,sp,48
20011992:	8082                	ret

20011994 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:262



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20011994:	1101                	addi	sp,sp,-32
20011996:	ce22                	sw	s0,28(sp)
20011998:	1000                	addi	s0,sp,32
2001199a:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:263
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2001199e:	fec42703          	lw	a4,-20(s0)
200119a2:	81818793          	addi	a5,gp,-2024 # 80000aa0 <__metal_dt_cpu_0>
200119a6:	00f71463          	bne	a4,a5,200119ae <__metal_driver_cpu_hartid+0x1a>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:264
		return 0;
200119aa:	4781                	li	a5,0
200119ac:	a011                	j	200119b0 <__metal_driver_cpu_hartid+0x1c>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:267
	}
	else {
		return -1;
200119ae:	57fd                	li	a5,-1
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:269
	}
}
200119b0:	853e                	mv	a0,a5
200119b2:	4472                	lw	s0,28(sp)
200119b4:	6105                	addi	sp,sp,32
200119b6:	8082                	ret

200119b8 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:272

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
200119b8:	1101                	addi	sp,sp,-32
200119ba:	ce22                	sw	s0,28(sp)
200119bc:	1000                	addi	s0,sp,32
200119be:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:273
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
200119c2:	fec42703          	lw	a4,-20(s0)
200119c6:	81818793          	addi	a5,gp,-2024 # 80000aa0 <__metal_dt_cpu_0>
200119ca:	00f71763          	bne	a4,a5,200119d8 <__metal_driver_cpu_timebase+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:274
		return 16000000;
200119ce:	00f427b7          	lui	a5,0xf42
200119d2:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
200119d6:	a011                	j	200119da <__metal_driver_cpu_timebase+0x22>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:277
	}
	else {
		return 0;
200119d8:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:279
	}
}
200119da:	853e                	mv	a0,a5
200119dc:	4472                	lw	s0,28(sp)
200119de:	6105                	addi	sp,sp,32
200119e0:	8082                	ret

200119e2 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:282

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
200119e2:	1101                	addi	sp,sp,-32
200119e4:	ce22                	sw	s0,28(sp)
200119e6:	1000                	addi	s0,sp,32
200119e8:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:283
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
200119ec:	fec42703          	lw	a4,-20(s0)
200119f0:	81818793          	addi	a5,gp,-2024 # 80000aa0 <__metal_dt_cpu_0>
200119f4:	00f71763          	bne	a4,a5,20011a02 <__metal_driver_cpu_interrupt_controller+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:284
		return &__metal_dt_cpu_0_interrupt_controller.controller;
200119f8:	800007b7          	lui	a5,0x80000
200119fc:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffe924>
20011a00:	a011                	j	20011a04 <__metal_driver_cpu_interrupt_controller+0x22>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:287
	}
	else {
		return NULL;
20011a02:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:289
	}
}
20011a04:	853e                	mv	a0,a5
20011a06:	4472                	lw	s0,28(sp)
20011a08:	6105                	addi	sp,sp,32
20011a0a:	8082                	ret

20011a0c <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20011a0c:	1101                	addi	sp,sp,-32
20011a0e:	ce22                	sw	s0,28(sp)
20011a10:	1000                	addi	s0,sp,32
20011a12:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20011a16:	fec42783          	lw	a5,-20(s0)
20011a1a:	00f04a63          	bgtz	a5,20011a2e <__metal_driver_cpu_get+0x22>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20011a1e:	fec42703          	lw	a4,-20(s0)
20011a22:	070a                	slli	a4,a4,0x2
20011a24:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20011a28:	97ba                	add	a5,a5,a4
20011a2a:	439c                	lw	a5,0(a5)
20011a2c:	a011                	j	20011a30 <__metal_driver_cpu_get+0x24>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20011a2e:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:19
}
20011a30:	853e                	mv	a0,a5
20011a32:	4472                	lw	s0,28(sp)
20011a34:	6105                	addi	sp,sp,32
20011a36:	8082                	ret

20011a38 <__metal_myhart_id>:
__metal_myhart_id():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20011a38:	1101                	addi	sp,sp,-32
20011a3a:	ce22                	sw	s0,28(sp)
20011a3c:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20011a3e:	f14027f3          	csrr	a5,mhartid
20011a42:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20011a46:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:26
}
20011a4a:	853e                	mv	a0,a5
20011a4c:	4472                	lw	s0,28(sp)
20011a4e:	6105                	addi	sp,sp,32
20011a50:	8082                	ret

20011a52 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20011a52:	1101                	addi	sp,sp,-32
20011a54:	ce22                	sw	s0,28(sp)
20011a56:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20011a58:	47a1                	li	a5,8
20011a5a:	3007a7f3          	csrrs	a5,mstatus,a5
20011a5e:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:39
}
20011a62:	0001                	nop
20011a64:	4472                	lw	s0,28(sp)
20011a66:	6105                	addi	sp,sp,32
20011a68:	8082                	ret

20011a6a <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20011a6a:	1101                	addi	sp,sp,-32
20011a6c:	ce22                	sw	s0,28(sp)
20011a6e:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20011a70:	47a1                	li	a5,8
20011a72:	3007b7f3          	csrrc	a5,mstatus,a5
20011a76:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:44
}
20011a7a:	0001                	nop
20011a7c:	4472                	lw	s0,28(sp)
20011a7e:	6105                	addi	sp,sp,32
20011a80:	8082                	ret

20011a82 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20011a82:	1101                	addi	sp,sp,-32
20011a84:	ce22                	sw	s0,28(sp)
20011a86:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20011a88:	47a1                	li	a5,8
20011a8a:	3047a7f3          	csrrs	a5,mie,a5
20011a8e:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:49
}
20011a92:	0001                	nop
20011a94:	4472                	lw	s0,28(sp)
20011a96:	6105                	addi	sp,sp,32
20011a98:	8082                	ret

20011a9a <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20011a9a:	1101                	addi	sp,sp,-32
20011a9c:	ce22                	sw	s0,28(sp)
20011a9e:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20011aa0:	47a1                	li	a5,8
20011aa2:	3047b7f3          	csrrc	a5,mie,a5
20011aa6:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:54
}
20011aaa:	0001                	nop
20011aac:	4472                	lw	s0,28(sp)
20011aae:	6105                	addi	sp,sp,32
20011ab0:	8082                	ret

20011ab2 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20011ab2:	1101                	addi	sp,sp,-32
20011ab4:	ce22                	sw	s0,28(sp)
20011ab6:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20011ab8:	08000793          	li	a5,128
20011abc:	3047a7f3          	csrrs	a5,mie,a5
20011ac0:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:59
}
20011ac4:	0001                	nop
20011ac6:	4472                	lw	s0,28(sp)
20011ac8:	6105                	addi	sp,sp,32
20011aca:	8082                	ret

20011acc <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20011acc:	1101                	addi	sp,sp,-32
20011ace:	ce22                	sw	s0,28(sp)
20011ad0:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20011ad2:	08000793          	li	a5,128
20011ad6:	3047b7f3          	csrrc	a5,mie,a5
20011ada:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:64
}
20011ade:	0001                	nop
20011ae0:	4472                	lw	s0,28(sp)
20011ae2:	6105                	addi	sp,sp,32
20011ae4:	8082                	ret

20011ae6 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20011ae6:	1101                	addi	sp,sp,-32
20011ae8:	ce22                	sw	s0,28(sp)
20011aea:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20011aec:	6785                	lui	a5,0x1
20011aee:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20011af2:	3047a7f3          	csrrs	a5,mie,a5
20011af6:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:69
}
20011afa:	0001                	nop
20011afc:	4472                	lw	s0,28(sp)
20011afe:	6105                	addi	sp,sp,32
20011b00:	8082                	ret

20011b02 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20011b02:	1101                	addi	sp,sp,-32
20011b04:	ce22                	sw	s0,28(sp)
20011b06:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20011b08:	6785                	lui	a5,0x1
20011b0a:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20011b0e:	3047b7f3          	csrrc	a5,mie,a5
20011b12:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:74
}
20011b16:	0001                	nop
20011b18:	4472                	lw	s0,28(sp)
20011b1a:	6105                	addi	sp,sp,32
20011b1c:	8082                	ret

20011b1e <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20011b1e:	7179                	addi	sp,sp,-48
20011b20:	d622                	sw	s0,44(sp)
20011b22:	1800                	addi	s0,sp,48
20011b24:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20011b28:	fdc42783          	lw	a5,-36(s0)
20011b2c:	4705                	li	a4,1
20011b2e:	00f717b3          	sll	a5,a4,a5
20011b32:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20011b36:	fec42783          	lw	a5,-20(s0)
20011b3a:	3047a7f3          	csrrs	a5,mie,a5
20011b3e:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:80
}
20011b42:	0001                	nop
20011b44:	5432                	lw	s0,44(sp)
20011b46:	6145                	addi	sp,sp,48
20011b48:	8082                	ret

20011b4a <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20011b4a:	7179                	addi	sp,sp,-48
20011b4c:	d622                	sw	s0,44(sp)
20011b4e:	1800                	addi	s0,sp,48
20011b50:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20011b54:	fdc42783          	lw	a5,-36(s0)
20011b58:	4705                	li	a4,1
20011b5a:	00f717b3          	sll	a5,a4,a5
20011b5e:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20011b62:	fec42783          	lw	a5,-20(s0)
20011b66:	3047b7f3          	csrrc	a5,mie,a5
20011b6a:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:86
}
20011b6e:	0001                	nop
20011b70:	5432                	lw	s0,44(sp)
20011b72:	6145                	addi	sp,sp,48
20011b74:	8082                	ret

20011b76 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20011b76:	1101                	addi	sp,sp,-32
20011b78:	ce06                	sw	ra,28(sp)
20011b7a:	cc22                	sw	s0,24(sp)
20011b7c:	1000                	addi	s0,sp,32
20011b7e:	fea42623          	sw	a0,-20(s0)
20011b82:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20011b86:	06400513          	li	a0,100
20011b8a:	718030ef          	jal	ra,200152a2 <metal_shutdown>

20011b8e <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20011b8e:	1101                	addi	sp,sp,-32
20011b90:	ce06                	sw	ra,28(sp)
20011b92:	cc22                	sw	s0,24(sp)
20011b94:	1000                	addi	s0,sp,32
20011b96:	fea42623          	sw	a0,-20(s0)
20011b9a:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20011b9e:	0c800513          	li	a0,200
20011ba2:	700030ef          	jal	ra,200152a2 <metal_shutdown>

20011ba6 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20011ba6:	715d                	addi	sp,sp,-80
20011ba8:	c686                	sw	ra,76(sp)
20011baa:	c496                	sw	t0,72(sp)
20011bac:	c29a                	sw	t1,68(sp)
20011bae:	c09e                	sw	t2,64(sp)
20011bb0:	de22                	sw	s0,60(sp)
20011bb2:	dc2a                	sw	a0,56(sp)
20011bb4:	da2e                	sw	a1,52(sp)
20011bb6:	d832                	sw	a2,48(sp)
20011bb8:	d636                	sw	a3,44(sp)
20011bba:	d43a                	sw	a4,40(sp)
20011bbc:	d23e                	sw	a5,36(sp)
20011bbe:	d042                	sw	a6,32(sp)
20011bc0:	ce46                	sw	a7,28(sp)
20011bc2:	cc72                	sw	t3,24(sp)
20011bc4:	ca76                	sw	t4,20(sp)
20011bc6:	c87a                	sw	t5,16(sp)
20011bc8:	c67e                	sw	t6,12(sp)
20011bca:	0880                	addi	s0,sp,80
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20011bcc:	12c00513          	li	a0,300
20011bd0:	6d2030ef          	jal	ra,200152a2 <metal_shutdown>

20011bd4 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20011bd4:	711d                	addi	sp,sp,-96
20011bd6:	ce86                	sw	ra,92(sp)
20011bd8:	cc96                	sw	t0,88(sp)
20011bda:	ca9a                	sw	t1,84(sp)
20011bdc:	c89e                	sw	t2,80(sp)
20011bde:	c6a2                	sw	s0,76(sp)
20011be0:	c4aa                	sw	a0,72(sp)
20011be2:	c2ae                	sw	a1,68(sp)
20011be4:	c0b2                	sw	a2,64(sp)
20011be6:	de36                	sw	a3,60(sp)
20011be8:	dc3a                	sw	a4,56(sp)
20011bea:	da3e                	sw	a5,52(sp)
20011bec:	d842                	sw	a6,48(sp)
20011bee:	d646                	sw	a7,44(sp)
20011bf0:	d472                	sw	t3,40(sp)
20011bf2:	d276                	sw	t4,36(sp)
20011bf4:	d07a                	sw	t5,32(sp)
20011bf6:	ce7e                	sw	t6,28(sp)
20011bf8:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20011bfa:	3d3d                	jal	20011a38 <__metal_myhart_id>
20011bfc:	872a                	mv	a4,a0
20011bfe:	070a                	slli	a4,a4,0x2
20011c00:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20011c04:	97ba                	add	a5,a5,a4
20011c06:	439c                	lw	a5,0(a5)
20011c08:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20011c0c:	fac42783          	lw	a5,-84(s0)
20011c10:	c785                	beqz	a5,20011c38 <metal_software_interrupt_vector_handler+0x64>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20011c12:	fac42503          	lw	a0,-84(s0)
20011c16:	33f1                	jal	200119e2 <__metal_driver_cpu_interrupt_controller>
20011c18:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20011c1c:	fa842783          	lw	a5,-88(s0)
20011c20:	0e07a783          	lw	a5,224(a5)
20011c24:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20011c28:	fa842783          	lw	a5,-88(s0)
20011c2c:	0d87a783          	lw	a5,216(a5)
20011c30:	fa442583          	lw	a1,-92(s0)
20011c34:	450d                	li	a0,3
20011c36:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20011c38:	0001                	nop
20011c3a:	40f6                	lw	ra,92(sp)
20011c3c:	42e6                	lw	t0,88(sp)
20011c3e:	4356                	lw	t1,84(sp)
20011c40:	43c6                	lw	t2,80(sp)
20011c42:	4436                	lw	s0,76(sp)
20011c44:	4526                	lw	a0,72(sp)
20011c46:	4596                	lw	a1,68(sp)
20011c48:	4606                	lw	a2,64(sp)
20011c4a:	56f2                	lw	a3,60(sp)
20011c4c:	5762                	lw	a4,56(sp)
20011c4e:	57d2                	lw	a5,52(sp)
20011c50:	5842                	lw	a6,48(sp)
20011c52:	58b2                	lw	a7,44(sp)
20011c54:	5e22                	lw	t3,40(sp)
20011c56:	5e92                	lw	t4,36(sp)
20011c58:	5f02                	lw	t5,32(sp)
20011c5a:	4ff2                	lw	t6,28(sp)
20011c5c:	6125                	addi	sp,sp,96
20011c5e:	30200073          	mret

20011c62 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20011c62:	7179                	addi	sp,sp,-48
20011c64:	d606                	sw	ra,44(sp)
20011c66:	d422                	sw	s0,40(sp)
20011c68:	1800                	addi	s0,sp,48
20011c6a:	fca42e23          	sw	a0,-36(s0)
20011c6e:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20011c72:	33d9                	jal	20011a38 <__metal_myhart_id>
20011c74:	872a                	mv	a4,a0
20011c76:	070a                	slli	a4,a4,0x2
20011c78:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20011c7c:	97ba                	add	a5,a5,a4
20011c7e:	439c                	lw	a5,0(a5)
20011c80:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20011c84:	342027f3          	csrr	a5,mcause
20011c88:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20011c8c:	fec42783          	lw	a5,-20(s0)
20011c90:	c795                	beqz	a5,20011cbc <__metal_default_sw_handler+0x5a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20011c92:	fec42503          	lw	a0,-20(s0)
20011c96:	33b1                	jal	200119e2 <__metal_driver_cpu_interrupt_controller>
20011c98:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20011c9c:	fe842783          	lw	a5,-24(s0)
20011ca0:	3ff7f793          	andi	a5,a5,1023
20011ca4:	fe442703          	lw	a4,-28(s0)
20011ca8:	0e078793          	addi	a5,a5,224
20011cac:	078a                	slli	a5,a5,0x2
20011cae:	97ba                	add	a5,a5,a4
20011cb0:	479c                	lw	a5,8(a5)
20011cb2:	fdc42583          	lw	a1,-36(s0)
20011cb6:	fec42503          	lw	a0,-20(s0)
20011cba:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20011cbc:	0001                	nop
20011cbe:	50b2                	lw	ra,44(sp)
20011cc0:	5422                	lw	s0,40(sp)
20011cc2:	6145                	addi	sp,sp,48
20011cc4:	8082                	ret

20011cc6 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20011cc6:	711d                	addi	sp,sp,-96
20011cc8:	ce86                	sw	ra,92(sp)
20011cca:	cc96                	sw	t0,88(sp)
20011ccc:	ca9a                	sw	t1,84(sp)
20011cce:	c89e                	sw	t2,80(sp)
20011cd0:	c6a2                	sw	s0,76(sp)
20011cd2:	c4aa                	sw	a0,72(sp)
20011cd4:	c2ae                	sw	a1,68(sp)
20011cd6:	c0b2                	sw	a2,64(sp)
20011cd8:	de36                	sw	a3,60(sp)
20011cda:	dc3a                	sw	a4,56(sp)
20011cdc:	da3e                	sw	a5,52(sp)
20011cde:	d842                	sw	a6,48(sp)
20011ce0:	d646                	sw	a7,44(sp)
20011ce2:	d472                	sw	t3,40(sp)
20011ce4:	d276                	sw	t4,36(sp)
20011ce6:	d07a                	sw	t5,32(sp)
20011ce8:	ce7e                	sw	t6,28(sp)
20011cea:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20011cec:	33b1                	jal	20011a38 <__metal_myhart_id>
20011cee:	872a                	mv	a4,a0
20011cf0:	070a                	slli	a4,a4,0x2
20011cf2:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20011cf6:	97ba                	add	a5,a5,a4
20011cf8:	439c                	lw	a5,0(a5)
20011cfa:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20011cfe:	fac42783          	lw	a5,-84(s0)
20011d02:	c785                	beqz	a5,20011d2a <metal_timer_interrupt_vector_handler+0x64>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20011d04:	fac42503          	lw	a0,-84(s0)
20011d08:	39e9                	jal	200119e2 <__metal_driver_cpu_interrupt_controller>
20011d0a:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20011d0e:	fa842783          	lw	a5,-88(s0)
20011d12:	1407a783          	lw	a5,320(a5)
20011d16:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20011d1a:	fa842783          	lw	a5,-88(s0)
20011d1e:	1387a783          	lw	a5,312(a5)
20011d22:	fa442583          	lw	a1,-92(s0)
20011d26:	451d                	li	a0,7
20011d28:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20011d2a:	0001                	nop
20011d2c:	40f6                	lw	ra,92(sp)
20011d2e:	42e6                	lw	t0,88(sp)
20011d30:	4356                	lw	t1,84(sp)
20011d32:	43c6                	lw	t2,80(sp)
20011d34:	4436                	lw	s0,76(sp)
20011d36:	4526                	lw	a0,72(sp)
20011d38:	4596                	lw	a1,68(sp)
20011d3a:	4606                	lw	a2,64(sp)
20011d3c:	56f2                	lw	a3,60(sp)
20011d3e:	5762                	lw	a4,56(sp)
20011d40:	57d2                	lw	a5,52(sp)
20011d42:	5842                	lw	a6,48(sp)
20011d44:	58b2                	lw	a7,44(sp)
20011d46:	5e22                	lw	t3,40(sp)
20011d48:	5e92                	lw	t4,36(sp)
20011d4a:	5f02                	lw	t5,32(sp)
20011d4c:	4ff2                	lw	t6,28(sp)
20011d4e:	6125                	addi	sp,sp,96
20011d50:	30200073          	mret

20011d54 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20011d54:	7179                	addi	sp,sp,-48
20011d56:	d606                	sw	ra,44(sp)
20011d58:	d422                	sw	s0,40(sp)
20011d5a:	1800                	addi	s0,sp,48
20011d5c:	fca42e23          	sw	a0,-36(s0)
20011d60:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20011d64:	39d1                	jal	20011a38 <__metal_myhart_id>
20011d66:	87aa                	mv	a5,a0
20011d68:	853e                	mv	a0,a5
20011d6a:	314d                	jal	20011a0c <__metal_driver_cpu_get>
20011d6c:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20011d70:	fec42503          	lw	a0,-20(s0)
20011d74:	174010ef          	jal	ra,20012ee8 <__metal_driver_cpu_mtime_get>
20011d78:	fea42023          	sw	a0,-32(s0)
20011d7c:	feb42223          	sw	a1,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20011d80:	fe042783          	lw	a5,-32(s0)
20011d84:	fe442803          	lw	a6,-28(s0)
20011d88:	45a9                	li	a1,10
20011d8a:	4601                	li	a2,0
20011d8c:	00b786b3          	add	a3,a5,a1
20011d90:	8536                	mv	a0,a3
20011d92:	00f53533          	sltu	a0,a0,a5
20011d96:	00c80733          	add	a4,a6,a2
20011d9a:	00e507b3          	add	a5,a0,a4
20011d9e:	873e                	mv	a4,a5
20011da0:	87b6                	mv	a5,a3
20011da2:	883a                	mv	a6,a4
20011da4:	85be                	mv	a1,a5
20011da6:	8642                	mv	a2,a6
20011da8:	fec42503          	lw	a0,-20(s0)
20011dac:	1a2010ef          	jal	ra,20012f4e <__metal_driver_cpu_mtimecmp_set>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:148
}
20011db0:	0001                	nop
20011db2:	50b2                	lw	ra,44(sp)
20011db4:	5422                	lw	s0,40(sp)
20011db6:	6145                	addi	sp,sp,48
20011db8:	8082                	ret
	...

20011e00 <__metal_exception_handler>:
__metal_exception_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20011e00:	7119                	addi	sp,sp,-128
20011e02:	de86                	sw	ra,124(sp)
20011e04:	dc96                	sw	t0,120(sp)
20011e06:	da9a                	sw	t1,116(sp)
20011e08:	d89e                	sw	t2,112(sp)
20011e0a:	d6a2                	sw	s0,108(sp)
20011e0c:	d4aa                	sw	a0,104(sp)
20011e0e:	d2ae                	sw	a1,100(sp)
20011e10:	d0b2                	sw	a2,96(sp)
20011e12:	ceb6                	sw	a3,92(sp)
20011e14:	ccba                	sw	a4,88(sp)
20011e16:	cabe                	sw	a5,84(sp)
20011e18:	c8c2                	sw	a6,80(sp)
20011e1a:	c6c6                	sw	a7,76(sp)
20011e1c:	c4f2                	sw	t3,72(sp)
20011e1e:	c2f6                	sw	t4,68(sp)
20011e20:	c0fa                	sw	t5,64(sp)
20011e22:	de7e                	sw	t6,60(sp)
20011e24:	0100                	addi	s0,sp,128
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20011e26:	3909                	jal	20011a38 <__metal_myhart_id>
20011e28:	872a                	mv	a4,a0
20011e2a:	070a                	slli	a4,a4,0x2
20011e2c:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20011e30:	97ba                	add	a5,a5,a4
20011e32:	439c                	lw	a5,0(a5)
20011e34:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20011e38:	342027f3          	csrr	a5,mcause
20011e3c:	faf42423          	sw	a5,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20011e40:	341027f3          	csrr	a5,mepc
20011e44:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20011e48:	343027f3          	csrr	a5,mtval
20011e4c:	faf42023          	sw	a5,-96(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20011e50:	305027f3          	csrr	a5,mtvec
20011e54:	f8f42e23          	sw	a5,-100(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20011e58:	fac42783          	lw	a5,-84(s0)
20011e5c:	c7e1                	beqz	a5,20011f24 <__metal_exception_handler+0x124>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20011e5e:	fac42503          	lw	a0,-84(s0)
20011e62:	3641                	jal	200119e2 <__metal_driver_cpu_interrupt_controller>
20011e64:	f8a42c23          	sw	a0,-104(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20011e68:	fa842783          	lw	a5,-88(s0)
20011e6c:	3ff7f793          	andi	a5,a5,1023
20011e70:	f8f42a23          	sw	a5,-108(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20011e74:	fa842783          	lw	a5,-88(s0)
20011e78:	0807d863          	bgez	a5,20011f08 <__metal_exception_handler+0x108>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20011e7c:	f9442703          	lw	a4,-108(s0)
20011e80:	47ad                	li	a5,11
20011e82:	00e7d763          	bge	a5,a4,20011e90 <__metal_exception_handler+0x90>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20011e86:	f9c42783          	lw	a5,-100(s0)
20011e8a:	03f7f793          	andi	a5,a5,63
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20011e8e:	ef9d                	bnez	a5,20011ecc <__metal_exception_handler+0xcc>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20011e90:	f9842683          	lw	a3,-104(s0)
20011e94:	f9442703          	lw	a4,-108(s0)
20011e98:	87ba                	mv	a5,a4
20011e9a:	0786                	slli	a5,a5,0x1
20011e9c:	97ba                	add	a5,a5,a4
20011e9e:	078e                	slli	a5,a5,0x3
20011ea0:	97b6                	add	a5,a5,a3
20011ea2:	0987a783          	lw	a5,152(a5)
20011ea6:	f8f42623          	sw	a5,-116(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20011eaa:	f9842683          	lw	a3,-104(s0)
20011eae:	f9442703          	lw	a4,-108(s0)
20011eb2:	87ba                	mv	a5,a4
20011eb4:	0786                	slli	a5,a5,0x1
20011eb6:	97ba                	add	a5,a5,a4
20011eb8:	078e                	slli	a5,a5,0x3
20011eba:	97b6                	add	a5,a5,a3
20011ebc:	0907a783          	lw	a5,144(a5)
20011ec0:	f8c42583          	lw	a1,-116(s0)
20011ec4:	f9442503          	lw	a0,-108(s0)
20011ec8:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20011eca:	a8a9                	j	20011f24 <__metal_exception_handler+0x124>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20011ecc:	f9c42783          	lw	a5,-100(s0)
20011ed0:	03f7f713          	andi	a4,a5,63
20011ed4:	4789                	li	a5,2
20011ed6:	04f71763          	bne	a4,a5,20011f24 <__metal_exception_handler+0x124>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20011eda:	307027f3          	csrr	a5,mtvt
20011ede:	f8f42823          	sw	a5,-112(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20011ee2:	f9842783          	lw	a5,-104(s0)
20011ee6:	0dc7a783          	lw	a5,220(a5)
20011eea:	f8f42623          	sw	a5,-116(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20011eee:	f9042783          	lw	a5,-112(s0)
20011ef2:	439c                	lw	a5,0(a5)
20011ef4:	f8f42423          	sw	a5,-120(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20011ef8:	f8842783          	lw	a5,-120(s0)
20011efc:	f8c42583          	lw	a1,-116(s0)
20011f00:	f9442503          	lw	a0,-108(s0)
20011f04:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20011f06:	a839                	j	20011f24 <__metal_exception_handler+0x124>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20011f08:	f9842703          	lw	a4,-104(s0)
20011f0c:	f9442783          	lw	a5,-108(s0)
20011f10:	0e078793          	addi	a5,a5,224
20011f14:	078a                	slli	a5,a5,0x2
20011f16:	97ba                	add	a5,a5,a4
20011f18:	479c                	lw	a5,8(a5)
20011f1a:	f9442583          	lw	a1,-108(s0)
20011f1e:	fac42503          	lw	a0,-84(s0)
20011f22:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20011f24:	50f6                	lw	ra,124(sp)
20011f26:	52e6                	lw	t0,120(sp)
20011f28:	5356                	lw	t1,116(sp)
20011f2a:	53c6                	lw	t2,112(sp)
20011f2c:	5436                	lw	s0,108(sp)
20011f2e:	5526                	lw	a0,104(sp)
20011f30:	5596                	lw	a1,100(sp)
20011f32:	5606                	lw	a2,96(sp)
20011f34:	46f6                	lw	a3,92(sp)
20011f36:	4766                	lw	a4,88(sp)
20011f38:	47d6                	lw	a5,84(sp)
20011f3a:	4846                	lw	a6,80(sp)
20011f3c:	48b6                	lw	a7,76(sp)
20011f3e:	4e26                	lw	t3,72(sp)
20011f40:	4e96                	lw	t4,68(sp)
20011f42:	4f06                	lw	t5,64(sp)
20011f44:	5ff2                	lw	t6,60(sp)
20011f46:	6109                	addi	sp,sp,128
20011f48:	30200073          	mret
	...

20011f72 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20011f72:	711d                	addi	sp,sp,-96
20011f74:	ce86                	sw	ra,92(sp)
20011f76:	cc96                	sw	t0,88(sp)
20011f78:	ca9a                	sw	t1,84(sp)
20011f7a:	c89e                	sw	t2,80(sp)
20011f7c:	c6a2                	sw	s0,76(sp)
20011f7e:	c4aa                	sw	a0,72(sp)
20011f80:	c2ae                	sw	a1,68(sp)
20011f82:	c0b2                	sw	a2,64(sp)
20011f84:	de36                	sw	a3,60(sp)
20011f86:	dc3a                	sw	a4,56(sp)
20011f88:	da3e                	sw	a5,52(sp)
20011f8a:	d842                	sw	a6,48(sp)
20011f8c:	d646                	sw	a7,44(sp)
20011f8e:	d472                	sw	t3,40(sp)
20011f90:	d276                	sw	t4,36(sp)
20011f92:	d07a                	sw	t5,32(sp)
20011f94:	ce7e                	sw	t6,28(sp)
20011f96:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20011f98:	aa1ff0ef          	jal	ra,20011a38 <__metal_myhart_id>
20011f9c:	872a                	mv	a4,a0
20011f9e:	070a                	slli	a4,a4,0x2
20011fa0:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20011fa4:	97ba                	add	a5,a5,a4
20011fa6:	439c                	lw	a5,0(a5)
20011fa8:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20011fac:	fac42783          	lw	a5,-84(s0)
20011fb0:	c78d                	beqz	a5,20011fda <metal_lc0_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20011fb2:	fac42503          	lw	a0,-84(s0)
20011fb6:	a2dff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20011fba:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20011fbe:	fa842783          	lw	a5,-88(s0)
20011fc2:	2187a783          	lw	a5,536(a5)
20011fc6:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20011fca:	fa842783          	lw	a5,-88(s0)
20011fce:	2107a783          	lw	a5,528(a5)
20011fd2:	fa442583          	lw	a1,-92(s0)
20011fd6:	4541                	li	a0,16
20011fd8:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20011fda:	0001                	nop
20011fdc:	40f6                	lw	ra,92(sp)
20011fde:	42e6                	lw	t0,88(sp)
20011fe0:	4356                	lw	t1,84(sp)
20011fe2:	43c6                	lw	t2,80(sp)
20011fe4:	4436                	lw	s0,76(sp)
20011fe6:	4526                	lw	a0,72(sp)
20011fe8:	4596                	lw	a1,68(sp)
20011fea:	4606                	lw	a2,64(sp)
20011fec:	56f2                	lw	a3,60(sp)
20011fee:	5762                	lw	a4,56(sp)
20011ff0:	57d2                	lw	a5,52(sp)
20011ff2:	5842                	lw	a6,48(sp)
20011ff4:	58b2                	lw	a7,44(sp)
20011ff6:	5e22                	lw	t3,40(sp)
20011ff8:	5e92                	lw	t4,36(sp)
20011ffa:	5f02                	lw	t5,32(sp)
20011ffc:	4ff2                	lw	t6,28(sp)
20011ffe:	6125                	addi	sp,sp,96
20012000:	30200073          	mret

20012004 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20012004:	711d                	addi	sp,sp,-96
20012006:	ce86                	sw	ra,92(sp)
20012008:	cc96                	sw	t0,88(sp)
2001200a:	ca9a                	sw	t1,84(sp)
2001200c:	c89e                	sw	t2,80(sp)
2001200e:	c6a2                	sw	s0,76(sp)
20012010:	c4aa                	sw	a0,72(sp)
20012012:	c2ae                	sw	a1,68(sp)
20012014:	c0b2                	sw	a2,64(sp)
20012016:	de36                	sw	a3,60(sp)
20012018:	dc3a                	sw	a4,56(sp)
2001201a:	da3e                	sw	a5,52(sp)
2001201c:	d842                	sw	a6,48(sp)
2001201e:	d646                	sw	a7,44(sp)
20012020:	d472                	sw	t3,40(sp)
20012022:	d276                	sw	t4,36(sp)
20012024:	d07a                	sw	t5,32(sp)
20012026:	ce7e                	sw	t6,28(sp)
20012028:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2001202a:	a0fff0ef          	jal	ra,20011a38 <__metal_myhart_id>
2001202e:	872a                	mv	a4,a0
20012030:	070a                	slli	a4,a4,0x2
20012032:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20012036:	97ba                	add	a5,a5,a4
20012038:	439c                	lw	a5,0(a5)
2001203a:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
2001203e:	fac42783          	lw	a5,-84(s0)
20012042:	c78d                	beqz	a5,2001206c <metal_lc1_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20012044:	fac42503          	lw	a0,-84(s0)
20012048:	99bff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
2001204c:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20012050:	fa842783          	lw	a5,-88(s0)
20012054:	2307a783          	lw	a5,560(a5)
20012058:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
2001205c:	fa842783          	lw	a5,-88(s0)
20012060:	2287a783          	lw	a5,552(a5)
20012064:	fa442583          	lw	a1,-92(s0)
20012068:	4545                	li	a0,17
2001206a:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
2001206c:	0001                	nop
2001206e:	40f6                	lw	ra,92(sp)
20012070:	42e6                	lw	t0,88(sp)
20012072:	4356                	lw	t1,84(sp)
20012074:	43c6                	lw	t2,80(sp)
20012076:	4436                	lw	s0,76(sp)
20012078:	4526                	lw	a0,72(sp)
2001207a:	4596                	lw	a1,68(sp)
2001207c:	4606                	lw	a2,64(sp)
2001207e:	56f2                	lw	a3,60(sp)
20012080:	5762                	lw	a4,56(sp)
20012082:	57d2                	lw	a5,52(sp)
20012084:	5842                	lw	a6,48(sp)
20012086:	58b2                	lw	a7,44(sp)
20012088:	5e22                	lw	t3,40(sp)
2001208a:	5e92                	lw	t4,36(sp)
2001208c:	5f02                	lw	t5,32(sp)
2001208e:	4ff2                	lw	t6,28(sp)
20012090:	6125                	addi	sp,sp,96
20012092:	30200073          	mret

20012096 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20012096:	711d                	addi	sp,sp,-96
20012098:	ce86                	sw	ra,92(sp)
2001209a:	cc96                	sw	t0,88(sp)
2001209c:	ca9a                	sw	t1,84(sp)
2001209e:	c89e                	sw	t2,80(sp)
200120a0:	c6a2                	sw	s0,76(sp)
200120a2:	c4aa                	sw	a0,72(sp)
200120a4:	c2ae                	sw	a1,68(sp)
200120a6:	c0b2                	sw	a2,64(sp)
200120a8:	de36                	sw	a3,60(sp)
200120aa:	dc3a                	sw	a4,56(sp)
200120ac:	da3e                	sw	a5,52(sp)
200120ae:	d842                	sw	a6,48(sp)
200120b0:	d646                	sw	a7,44(sp)
200120b2:	d472                	sw	t3,40(sp)
200120b4:	d276                	sw	t4,36(sp)
200120b6:	d07a                	sw	t5,32(sp)
200120b8:	ce7e                	sw	t6,28(sp)
200120ba:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200120bc:	97dff0ef          	jal	ra,20011a38 <__metal_myhart_id>
200120c0:	872a                	mv	a4,a0
200120c2:	070a                	slli	a4,a4,0x2
200120c4:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
200120c8:	97ba                	add	a5,a5,a4
200120ca:	439c                	lw	a5,0(a5)
200120cc:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
200120d0:	fac42783          	lw	a5,-84(s0)
200120d4:	c78d                	beqz	a5,200120fe <metal_lc2_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200120d6:	fac42503          	lw	a0,-84(s0)
200120da:	909ff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
200120de:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
200120e2:	fa842783          	lw	a5,-88(s0)
200120e6:	2487a783          	lw	a5,584(a5)
200120ea:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
200120ee:	fa842783          	lw	a5,-88(s0)
200120f2:	2407a783          	lw	a5,576(a5)
200120f6:	fa442583          	lw	a1,-92(s0)
200120fa:	4549                	li	a0,18
200120fc:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
200120fe:	0001                	nop
20012100:	40f6                	lw	ra,92(sp)
20012102:	42e6                	lw	t0,88(sp)
20012104:	4356                	lw	t1,84(sp)
20012106:	43c6                	lw	t2,80(sp)
20012108:	4436                	lw	s0,76(sp)
2001210a:	4526                	lw	a0,72(sp)
2001210c:	4596                	lw	a1,68(sp)
2001210e:	4606                	lw	a2,64(sp)
20012110:	56f2                	lw	a3,60(sp)
20012112:	5762                	lw	a4,56(sp)
20012114:	57d2                	lw	a5,52(sp)
20012116:	5842                	lw	a6,48(sp)
20012118:	58b2                	lw	a7,44(sp)
2001211a:	5e22                	lw	t3,40(sp)
2001211c:	5e92                	lw	t4,36(sp)
2001211e:	5f02                	lw	t5,32(sp)
20012120:	4ff2                	lw	t6,28(sp)
20012122:	6125                	addi	sp,sp,96
20012124:	30200073          	mret

20012128 <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20012128:	711d                	addi	sp,sp,-96
2001212a:	ce86                	sw	ra,92(sp)
2001212c:	cc96                	sw	t0,88(sp)
2001212e:	ca9a                	sw	t1,84(sp)
20012130:	c89e                	sw	t2,80(sp)
20012132:	c6a2                	sw	s0,76(sp)
20012134:	c4aa                	sw	a0,72(sp)
20012136:	c2ae                	sw	a1,68(sp)
20012138:	c0b2                	sw	a2,64(sp)
2001213a:	de36                	sw	a3,60(sp)
2001213c:	dc3a                	sw	a4,56(sp)
2001213e:	da3e                	sw	a5,52(sp)
20012140:	d842                	sw	a6,48(sp)
20012142:	d646                	sw	a7,44(sp)
20012144:	d472                	sw	t3,40(sp)
20012146:	d276                	sw	t4,36(sp)
20012148:	d07a                	sw	t5,32(sp)
2001214a:	ce7e                	sw	t6,28(sp)
2001214c:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2001214e:	8ebff0ef          	jal	ra,20011a38 <__metal_myhart_id>
20012152:	872a                	mv	a4,a0
20012154:	070a                	slli	a4,a4,0x2
20012156:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
2001215a:	97ba                	add	a5,a5,a4
2001215c:	439c                	lw	a5,0(a5)
2001215e:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20012162:	fac42783          	lw	a5,-84(s0)
20012166:	c78d                	beqz	a5,20012190 <metal_lc3_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20012168:	fac42503          	lw	a0,-84(s0)
2001216c:	877ff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20012170:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20012174:	fa842783          	lw	a5,-88(s0)
20012178:	2607a783          	lw	a5,608(a5)
2001217c:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20012180:	fa842783          	lw	a5,-88(s0)
20012184:	2587a783          	lw	a5,600(a5)
20012188:	fa442583          	lw	a1,-92(s0)
2001218c:	454d                	li	a0,19
2001218e:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20012190:	0001                	nop
20012192:	40f6                	lw	ra,92(sp)
20012194:	42e6                	lw	t0,88(sp)
20012196:	4356                	lw	t1,84(sp)
20012198:	43c6                	lw	t2,80(sp)
2001219a:	4436                	lw	s0,76(sp)
2001219c:	4526                	lw	a0,72(sp)
2001219e:	4596                	lw	a1,68(sp)
200121a0:	4606                	lw	a2,64(sp)
200121a2:	56f2                	lw	a3,60(sp)
200121a4:	5762                	lw	a4,56(sp)
200121a6:	57d2                	lw	a5,52(sp)
200121a8:	5842                	lw	a6,48(sp)
200121aa:	58b2                	lw	a7,44(sp)
200121ac:	5e22                	lw	t3,40(sp)
200121ae:	5e92                	lw	t4,36(sp)
200121b0:	5f02                	lw	t5,32(sp)
200121b2:	4ff2                	lw	t6,28(sp)
200121b4:	6125                	addi	sp,sp,96
200121b6:	30200073          	mret

200121ba <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
200121ba:	711d                	addi	sp,sp,-96
200121bc:	ce86                	sw	ra,92(sp)
200121be:	cc96                	sw	t0,88(sp)
200121c0:	ca9a                	sw	t1,84(sp)
200121c2:	c89e                	sw	t2,80(sp)
200121c4:	c6a2                	sw	s0,76(sp)
200121c6:	c4aa                	sw	a0,72(sp)
200121c8:	c2ae                	sw	a1,68(sp)
200121ca:	c0b2                	sw	a2,64(sp)
200121cc:	de36                	sw	a3,60(sp)
200121ce:	dc3a                	sw	a4,56(sp)
200121d0:	da3e                	sw	a5,52(sp)
200121d2:	d842                	sw	a6,48(sp)
200121d4:	d646                	sw	a7,44(sp)
200121d6:	d472                	sw	t3,40(sp)
200121d8:	d276                	sw	t4,36(sp)
200121da:	d07a                	sw	t5,32(sp)
200121dc:	ce7e                	sw	t6,28(sp)
200121de:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200121e0:	859ff0ef          	jal	ra,20011a38 <__metal_myhart_id>
200121e4:	872a                	mv	a4,a0
200121e6:	070a                	slli	a4,a4,0x2
200121e8:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
200121ec:	97ba                	add	a5,a5,a4
200121ee:	439c                	lw	a5,0(a5)
200121f0:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
200121f4:	fac42783          	lw	a5,-84(s0)
200121f8:	c78d                	beqz	a5,20012222 <metal_lc4_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200121fa:	fac42503          	lw	a0,-84(s0)
200121fe:	fe4ff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20012202:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20012206:	fa842783          	lw	a5,-88(s0)
2001220a:	2787a783          	lw	a5,632(a5)
2001220e:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20012212:	fa842783          	lw	a5,-88(s0)
20012216:	2707a783          	lw	a5,624(a5)
2001221a:	fa442583          	lw	a1,-92(s0)
2001221e:	4551                	li	a0,20
20012220:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20012222:	0001                	nop
20012224:	40f6                	lw	ra,92(sp)
20012226:	42e6                	lw	t0,88(sp)
20012228:	4356                	lw	t1,84(sp)
2001222a:	43c6                	lw	t2,80(sp)
2001222c:	4436                	lw	s0,76(sp)
2001222e:	4526                	lw	a0,72(sp)
20012230:	4596                	lw	a1,68(sp)
20012232:	4606                	lw	a2,64(sp)
20012234:	56f2                	lw	a3,60(sp)
20012236:	5762                	lw	a4,56(sp)
20012238:	57d2                	lw	a5,52(sp)
2001223a:	5842                	lw	a6,48(sp)
2001223c:	58b2                	lw	a7,44(sp)
2001223e:	5e22                	lw	t3,40(sp)
20012240:	5e92                	lw	t4,36(sp)
20012242:	5f02                	lw	t5,32(sp)
20012244:	4ff2                	lw	t6,28(sp)
20012246:	6125                	addi	sp,sp,96
20012248:	30200073          	mret

2001224c <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
2001224c:	711d                	addi	sp,sp,-96
2001224e:	ce86                	sw	ra,92(sp)
20012250:	cc96                	sw	t0,88(sp)
20012252:	ca9a                	sw	t1,84(sp)
20012254:	c89e                	sw	t2,80(sp)
20012256:	c6a2                	sw	s0,76(sp)
20012258:	c4aa                	sw	a0,72(sp)
2001225a:	c2ae                	sw	a1,68(sp)
2001225c:	c0b2                	sw	a2,64(sp)
2001225e:	de36                	sw	a3,60(sp)
20012260:	dc3a                	sw	a4,56(sp)
20012262:	da3e                	sw	a5,52(sp)
20012264:	d842                	sw	a6,48(sp)
20012266:	d646                	sw	a7,44(sp)
20012268:	d472                	sw	t3,40(sp)
2001226a:	d276                	sw	t4,36(sp)
2001226c:	d07a                	sw	t5,32(sp)
2001226e:	ce7e                	sw	t6,28(sp)
20012270:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012272:	fc6ff0ef          	jal	ra,20011a38 <__metal_myhart_id>
20012276:	872a                	mv	a4,a0
20012278:	070a                	slli	a4,a4,0x2
2001227a:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
2001227e:	97ba                	add	a5,a5,a4
20012280:	439c                	lw	a5,0(a5)
20012282:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20012286:	fac42783          	lw	a5,-84(s0)
2001228a:	c78d                	beqz	a5,200122b4 <metal_lc5_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001228c:	fac42503          	lw	a0,-84(s0)
20012290:	f52ff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20012294:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20012298:	fa842783          	lw	a5,-88(s0)
2001229c:	2907a783          	lw	a5,656(a5)
200122a0:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
200122a4:	fa842783          	lw	a5,-88(s0)
200122a8:	2887a783          	lw	a5,648(a5)
200122ac:	fa442583          	lw	a1,-92(s0)
200122b0:	4555                	li	a0,21
200122b2:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
200122b4:	0001                	nop
200122b6:	40f6                	lw	ra,92(sp)
200122b8:	42e6                	lw	t0,88(sp)
200122ba:	4356                	lw	t1,84(sp)
200122bc:	43c6                	lw	t2,80(sp)
200122be:	4436                	lw	s0,76(sp)
200122c0:	4526                	lw	a0,72(sp)
200122c2:	4596                	lw	a1,68(sp)
200122c4:	4606                	lw	a2,64(sp)
200122c6:	56f2                	lw	a3,60(sp)
200122c8:	5762                	lw	a4,56(sp)
200122ca:	57d2                	lw	a5,52(sp)
200122cc:	5842                	lw	a6,48(sp)
200122ce:	58b2                	lw	a7,44(sp)
200122d0:	5e22                	lw	t3,40(sp)
200122d2:	5e92                	lw	t4,36(sp)
200122d4:	5f02                	lw	t5,32(sp)
200122d6:	4ff2                	lw	t6,28(sp)
200122d8:	6125                	addi	sp,sp,96
200122da:	30200073          	mret

200122de <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
200122de:	711d                	addi	sp,sp,-96
200122e0:	ce86                	sw	ra,92(sp)
200122e2:	cc96                	sw	t0,88(sp)
200122e4:	ca9a                	sw	t1,84(sp)
200122e6:	c89e                	sw	t2,80(sp)
200122e8:	c6a2                	sw	s0,76(sp)
200122ea:	c4aa                	sw	a0,72(sp)
200122ec:	c2ae                	sw	a1,68(sp)
200122ee:	c0b2                	sw	a2,64(sp)
200122f0:	de36                	sw	a3,60(sp)
200122f2:	dc3a                	sw	a4,56(sp)
200122f4:	da3e                	sw	a5,52(sp)
200122f6:	d842                	sw	a6,48(sp)
200122f8:	d646                	sw	a7,44(sp)
200122fa:	d472                	sw	t3,40(sp)
200122fc:	d276                	sw	t4,36(sp)
200122fe:	d07a                	sw	t5,32(sp)
20012300:	ce7e                	sw	t6,28(sp)
20012302:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012304:	f34ff0ef          	jal	ra,20011a38 <__metal_myhart_id>
20012308:	872a                	mv	a4,a0
2001230a:	070a                	slli	a4,a4,0x2
2001230c:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20012310:	97ba                	add	a5,a5,a4
20012312:	439c                	lw	a5,0(a5)
20012314:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20012318:	fac42783          	lw	a5,-84(s0)
2001231c:	c78d                	beqz	a5,20012346 <metal_lc6_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001231e:	fac42503          	lw	a0,-84(s0)
20012322:	ec0ff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20012326:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
2001232a:	fa842783          	lw	a5,-88(s0)
2001232e:	2a87a783          	lw	a5,680(a5)
20012332:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20012336:	fa842783          	lw	a5,-88(s0)
2001233a:	2a07a783          	lw	a5,672(a5)
2001233e:	fa442583          	lw	a1,-92(s0)
20012342:	4559                	li	a0,22
20012344:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20012346:	0001                	nop
20012348:	40f6                	lw	ra,92(sp)
2001234a:	42e6                	lw	t0,88(sp)
2001234c:	4356                	lw	t1,84(sp)
2001234e:	43c6                	lw	t2,80(sp)
20012350:	4436                	lw	s0,76(sp)
20012352:	4526                	lw	a0,72(sp)
20012354:	4596                	lw	a1,68(sp)
20012356:	4606                	lw	a2,64(sp)
20012358:	56f2                	lw	a3,60(sp)
2001235a:	5762                	lw	a4,56(sp)
2001235c:	57d2                	lw	a5,52(sp)
2001235e:	5842                	lw	a6,48(sp)
20012360:	58b2                	lw	a7,44(sp)
20012362:	5e22                	lw	t3,40(sp)
20012364:	5e92                	lw	t4,36(sp)
20012366:	5f02                	lw	t5,32(sp)
20012368:	4ff2                	lw	t6,28(sp)
2001236a:	6125                	addi	sp,sp,96
2001236c:	30200073          	mret

20012370 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20012370:	711d                	addi	sp,sp,-96
20012372:	ce86                	sw	ra,92(sp)
20012374:	cc96                	sw	t0,88(sp)
20012376:	ca9a                	sw	t1,84(sp)
20012378:	c89e                	sw	t2,80(sp)
2001237a:	c6a2                	sw	s0,76(sp)
2001237c:	c4aa                	sw	a0,72(sp)
2001237e:	c2ae                	sw	a1,68(sp)
20012380:	c0b2                	sw	a2,64(sp)
20012382:	de36                	sw	a3,60(sp)
20012384:	dc3a                	sw	a4,56(sp)
20012386:	da3e                	sw	a5,52(sp)
20012388:	d842                	sw	a6,48(sp)
2001238a:	d646                	sw	a7,44(sp)
2001238c:	d472                	sw	t3,40(sp)
2001238e:	d276                	sw	t4,36(sp)
20012390:	d07a                	sw	t5,32(sp)
20012392:	ce7e                	sw	t6,28(sp)
20012394:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012396:	ea2ff0ef          	jal	ra,20011a38 <__metal_myhart_id>
2001239a:	872a                	mv	a4,a0
2001239c:	070a                	slli	a4,a4,0x2
2001239e:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
200123a2:	97ba                	add	a5,a5,a4
200123a4:	439c                	lw	a5,0(a5)
200123a6:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
200123aa:	fac42783          	lw	a5,-84(s0)
200123ae:	c78d                	beqz	a5,200123d8 <metal_lc7_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200123b0:	fac42503          	lw	a0,-84(s0)
200123b4:	e2eff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
200123b8:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
200123bc:	fa842783          	lw	a5,-88(s0)
200123c0:	2c07a783          	lw	a5,704(a5)
200123c4:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
200123c8:	fa842783          	lw	a5,-88(s0)
200123cc:	2b87a783          	lw	a5,696(a5)
200123d0:	fa442583          	lw	a1,-92(s0)
200123d4:	455d                	li	a0,23
200123d6:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
200123d8:	0001                	nop
200123da:	40f6                	lw	ra,92(sp)
200123dc:	42e6                	lw	t0,88(sp)
200123de:	4356                	lw	t1,84(sp)
200123e0:	43c6                	lw	t2,80(sp)
200123e2:	4436                	lw	s0,76(sp)
200123e4:	4526                	lw	a0,72(sp)
200123e6:	4596                	lw	a1,68(sp)
200123e8:	4606                	lw	a2,64(sp)
200123ea:	56f2                	lw	a3,60(sp)
200123ec:	5762                	lw	a4,56(sp)
200123ee:	57d2                	lw	a5,52(sp)
200123f0:	5842                	lw	a6,48(sp)
200123f2:	58b2                	lw	a7,44(sp)
200123f4:	5e22                	lw	t3,40(sp)
200123f6:	5e92                	lw	t4,36(sp)
200123f8:	5f02                	lw	t5,32(sp)
200123fa:	4ff2                	lw	t6,28(sp)
200123fc:	6125                	addi	sp,sp,96
200123fe:	30200073          	mret

20012402 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20012402:	711d                	addi	sp,sp,-96
20012404:	ce86                	sw	ra,92(sp)
20012406:	cc96                	sw	t0,88(sp)
20012408:	ca9a                	sw	t1,84(sp)
2001240a:	c89e                	sw	t2,80(sp)
2001240c:	c6a2                	sw	s0,76(sp)
2001240e:	c4aa                	sw	a0,72(sp)
20012410:	c2ae                	sw	a1,68(sp)
20012412:	c0b2                	sw	a2,64(sp)
20012414:	de36                	sw	a3,60(sp)
20012416:	dc3a                	sw	a4,56(sp)
20012418:	da3e                	sw	a5,52(sp)
2001241a:	d842                	sw	a6,48(sp)
2001241c:	d646                	sw	a7,44(sp)
2001241e:	d472                	sw	t3,40(sp)
20012420:	d276                	sw	t4,36(sp)
20012422:	d07a                	sw	t5,32(sp)
20012424:	ce7e                	sw	t6,28(sp)
20012426:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012428:	e10ff0ef          	jal	ra,20011a38 <__metal_myhart_id>
2001242c:	872a                	mv	a4,a0
2001242e:	070a                	slli	a4,a4,0x2
20012430:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20012434:	97ba                	add	a5,a5,a4
20012436:	439c                	lw	a5,0(a5)
20012438:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
2001243c:	fac42783          	lw	a5,-84(s0)
20012440:	c78d                	beqz	a5,2001246a <metal_lc8_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20012442:	fac42503          	lw	a0,-84(s0)
20012446:	d9cff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
2001244a:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
2001244e:	fa842783          	lw	a5,-88(s0)
20012452:	2d87a783          	lw	a5,728(a5)
20012456:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
2001245a:	fa842783          	lw	a5,-88(s0)
2001245e:	2d07a783          	lw	a5,720(a5)
20012462:	fa442583          	lw	a1,-92(s0)
20012466:	4561                	li	a0,24
20012468:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
2001246a:	0001                	nop
2001246c:	40f6                	lw	ra,92(sp)
2001246e:	42e6                	lw	t0,88(sp)
20012470:	4356                	lw	t1,84(sp)
20012472:	43c6                	lw	t2,80(sp)
20012474:	4436                	lw	s0,76(sp)
20012476:	4526                	lw	a0,72(sp)
20012478:	4596                	lw	a1,68(sp)
2001247a:	4606                	lw	a2,64(sp)
2001247c:	56f2                	lw	a3,60(sp)
2001247e:	5762                	lw	a4,56(sp)
20012480:	57d2                	lw	a5,52(sp)
20012482:	5842                	lw	a6,48(sp)
20012484:	58b2                	lw	a7,44(sp)
20012486:	5e22                	lw	t3,40(sp)
20012488:	5e92                	lw	t4,36(sp)
2001248a:	5f02                	lw	t5,32(sp)
2001248c:	4ff2                	lw	t6,28(sp)
2001248e:	6125                	addi	sp,sp,96
20012490:	30200073          	mret

20012494 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20012494:	711d                	addi	sp,sp,-96
20012496:	ce86                	sw	ra,92(sp)
20012498:	cc96                	sw	t0,88(sp)
2001249a:	ca9a                	sw	t1,84(sp)
2001249c:	c89e                	sw	t2,80(sp)
2001249e:	c6a2                	sw	s0,76(sp)
200124a0:	c4aa                	sw	a0,72(sp)
200124a2:	c2ae                	sw	a1,68(sp)
200124a4:	c0b2                	sw	a2,64(sp)
200124a6:	de36                	sw	a3,60(sp)
200124a8:	dc3a                	sw	a4,56(sp)
200124aa:	da3e                	sw	a5,52(sp)
200124ac:	d842                	sw	a6,48(sp)
200124ae:	d646                	sw	a7,44(sp)
200124b0:	d472                	sw	t3,40(sp)
200124b2:	d276                	sw	t4,36(sp)
200124b4:	d07a                	sw	t5,32(sp)
200124b6:	ce7e                	sw	t6,28(sp)
200124b8:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200124ba:	d7eff0ef          	jal	ra,20011a38 <__metal_myhart_id>
200124be:	872a                	mv	a4,a0
200124c0:	070a                	slli	a4,a4,0x2
200124c2:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
200124c6:	97ba                	add	a5,a5,a4
200124c8:	439c                	lw	a5,0(a5)
200124ca:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
200124ce:	fac42783          	lw	a5,-84(s0)
200124d2:	c78d                	beqz	a5,200124fc <metal_lc9_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200124d4:	fac42503          	lw	a0,-84(s0)
200124d8:	d0aff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
200124dc:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
200124e0:	fa842783          	lw	a5,-88(s0)
200124e4:	2f07a783          	lw	a5,752(a5)
200124e8:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
200124ec:	fa842783          	lw	a5,-88(s0)
200124f0:	2e87a783          	lw	a5,744(a5)
200124f4:	fa442583          	lw	a1,-92(s0)
200124f8:	4565                	li	a0,25
200124fa:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
200124fc:	0001                	nop
200124fe:	40f6                	lw	ra,92(sp)
20012500:	42e6                	lw	t0,88(sp)
20012502:	4356                	lw	t1,84(sp)
20012504:	43c6                	lw	t2,80(sp)
20012506:	4436                	lw	s0,76(sp)
20012508:	4526                	lw	a0,72(sp)
2001250a:	4596                	lw	a1,68(sp)
2001250c:	4606                	lw	a2,64(sp)
2001250e:	56f2                	lw	a3,60(sp)
20012510:	5762                	lw	a4,56(sp)
20012512:	57d2                	lw	a5,52(sp)
20012514:	5842                	lw	a6,48(sp)
20012516:	58b2                	lw	a7,44(sp)
20012518:	5e22                	lw	t3,40(sp)
2001251a:	5e92                	lw	t4,36(sp)
2001251c:	5f02                	lw	t5,32(sp)
2001251e:	4ff2                	lw	t6,28(sp)
20012520:	6125                	addi	sp,sp,96
20012522:	30200073          	mret

20012526 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20012526:	711d                	addi	sp,sp,-96
20012528:	ce86                	sw	ra,92(sp)
2001252a:	cc96                	sw	t0,88(sp)
2001252c:	ca9a                	sw	t1,84(sp)
2001252e:	c89e                	sw	t2,80(sp)
20012530:	c6a2                	sw	s0,76(sp)
20012532:	c4aa                	sw	a0,72(sp)
20012534:	c2ae                	sw	a1,68(sp)
20012536:	c0b2                	sw	a2,64(sp)
20012538:	de36                	sw	a3,60(sp)
2001253a:	dc3a                	sw	a4,56(sp)
2001253c:	da3e                	sw	a5,52(sp)
2001253e:	d842                	sw	a6,48(sp)
20012540:	d646                	sw	a7,44(sp)
20012542:	d472                	sw	t3,40(sp)
20012544:	d276                	sw	t4,36(sp)
20012546:	d07a                	sw	t5,32(sp)
20012548:	ce7e                	sw	t6,28(sp)
2001254a:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2001254c:	cecff0ef          	jal	ra,20011a38 <__metal_myhart_id>
20012550:	872a                	mv	a4,a0
20012552:	070a                	slli	a4,a4,0x2
20012554:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20012558:	97ba                	add	a5,a5,a4
2001255a:	439c                	lw	a5,0(a5)
2001255c:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20012560:	fac42783          	lw	a5,-84(s0)
20012564:	c78d                	beqz	a5,2001258e <metal_lc10_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20012566:	fac42503          	lw	a0,-84(s0)
2001256a:	c78ff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
2001256e:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20012572:	fa842783          	lw	a5,-88(s0)
20012576:	3087a783          	lw	a5,776(a5)
2001257a:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
2001257e:	fa842783          	lw	a5,-88(s0)
20012582:	3007a783          	lw	a5,768(a5)
20012586:	fa442583          	lw	a1,-92(s0)
2001258a:	4569                	li	a0,26
2001258c:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
2001258e:	0001                	nop
20012590:	40f6                	lw	ra,92(sp)
20012592:	42e6                	lw	t0,88(sp)
20012594:	4356                	lw	t1,84(sp)
20012596:	43c6                	lw	t2,80(sp)
20012598:	4436                	lw	s0,76(sp)
2001259a:	4526                	lw	a0,72(sp)
2001259c:	4596                	lw	a1,68(sp)
2001259e:	4606                	lw	a2,64(sp)
200125a0:	56f2                	lw	a3,60(sp)
200125a2:	5762                	lw	a4,56(sp)
200125a4:	57d2                	lw	a5,52(sp)
200125a6:	5842                	lw	a6,48(sp)
200125a8:	58b2                	lw	a7,44(sp)
200125aa:	5e22                	lw	t3,40(sp)
200125ac:	5e92                	lw	t4,36(sp)
200125ae:	5f02                	lw	t5,32(sp)
200125b0:	4ff2                	lw	t6,28(sp)
200125b2:	6125                	addi	sp,sp,96
200125b4:	30200073          	mret

200125b8 <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
200125b8:	711d                	addi	sp,sp,-96
200125ba:	ce86                	sw	ra,92(sp)
200125bc:	cc96                	sw	t0,88(sp)
200125be:	ca9a                	sw	t1,84(sp)
200125c0:	c89e                	sw	t2,80(sp)
200125c2:	c6a2                	sw	s0,76(sp)
200125c4:	c4aa                	sw	a0,72(sp)
200125c6:	c2ae                	sw	a1,68(sp)
200125c8:	c0b2                	sw	a2,64(sp)
200125ca:	de36                	sw	a3,60(sp)
200125cc:	dc3a                	sw	a4,56(sp)
200125ce:	da3e                	sw	a5,52(sp)
200125d0:	d842                	sw	a6,48(sp)
200125d2:	d646                	sw	a7,44(sp)
200125d4:	d472                	sw	t3,40(sp)
200125d6:	d276                	sw	t4,36(sp)
200125d8:	d07a                	sw	t5,32(sp)
200125da:	ce7e                	sw	t6,28(sp)
200125dc:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200125de:	c5aff0ef          	jal	ra,20011a38 <__metal_myhart_id>
200125e2:	872a                	mv	a4,a0
200125e4:	070a                	slli	a4,a4,0x2
200125e6:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
200125ea:	97ba                	add	a5,a5,a4
200125ec:	439c                	lw	a5,0(a5)
200125ee:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
200125f2:	fac42783          	lw	a5,-84(s0)
200125f6:	c78d                	beqz	a5,20012620 <metal_lc11_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200125f8:	fac42503          	lw	a0,-84(s0)
200125fc:	be6ff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20012600:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20012604:	fa842783          	lw	a5,-88(s0)
20012608:	3207a783          	lw	a5,800(a5)
2001260c:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20012610:	fa842783          	lw	a5,-88(s0)
20012614:	3187a783          	lw	a5,792(a5)
20012618:	fa442583          	lw	a1,-92(s0)
2001261c:	456d                	li	a0,27
2001261e:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20012620:	0001                	nop
20012622:	40f6                	lw	ra,92(sp)
20012624:	42e6                	lw	t0,88(sp)
20012626:	4356                	lw	t1,84(sp)
20012628:	43c6                	lw	t2,80(sp)
2001262a:	4436                	lw	s0,76(sp)
2001262c:	4526                	lw	a0,72(sp)
2001262e:	4596                	lw	a1,68(sp)
20012630:	4606                	lw	a2,64(sp)
20012632:	56f2                	lw	a3,60(sp)
20012634:	5762                	lw	a4,56(sp)
20012636:	57d2                	lw	a5,52(sp)
20012638:	5842                	lw	a6,48(sp)
2001263a:	58b2                	lw	a7,44(sp)
2001263c:	5e22                	lw	t3,40(sp)
2001263e:	5e92                	lw	t4,36(sp)
20012640:	5f02                	lw	t5,32(sp)
20012642:	4ff2                	lw	t6,28(sp)
20012644:	6125                	addi	sp,sp,96
20012646:	30200073          	mret

2001264a <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
2001264a:	711d                	addi	sp,sp,-96
2001264c:	ce86                	sw	ra,92(sp)
2001264e:	cc96                	sw	t0,88(sp)
20012650:	ca9a                	sw	t1,84(sp)
20012652:	c89e                	sw	t2,80(sp)
20012654:	c6a2                	sw	s0,76(sp)
20012656:	c4aa                	sw	a0,72(sp)
20012658:	c2ae                	sw	a1,68(sp)
2001265a:	c0b2                	sw	a2,64(sp)
2001265c:	de36                	sw	a3,60(sp)
2001265e:	dc3a                	sw	a4,56(sp)
20012660:	da3e                	sw	a5,52(sp)
20012662:	d842                	sw	a6,48(sp)
20012664:	d646                	sw	a7,44(sp)
20012666:	d472                	sw	t3,40(sp)
20012668:	d276                	sw	t4,36(sp)
2001266a:	d07a                	sw	t5,32(sp)
2001266c:	ce7e                	sw	t6,28(sp)
2001266e:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012670:	bc8ff0ef          	jal	ra,20011a38 <__metal_myhart_id>
20012674:	872a                	mv	a4,a0
20012676:	070a                	slli	a4,a4,0x2
20012678:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
2001267c:	97ba                	add	a5,a5,a4
2001267e:	439c                	lw	a5,0(a5)
20012680:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20012684:	fac42783          	lw	a5,-84(s0)
20012688:	c78d                	beqz	a5,200126b2 <metal_lc12_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001268a:	fac42503          	lw	a0,-84(s0)
2001268e:	b54ff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20012692:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20012696:	fa842783          	lw	a5,-88(s0)
2001269a:	3387a783          	lw	a5,824(a5)
2001269e:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
200126a2:	fa842783          	lw	a5,-88(s0)
200126a6:	3307a783          	lw	a5,816(a5)
200126aa:	fa442583          	lw	a1,-92(s0)
200126ae:	4571                	li	a0,28
200126b0:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
200126b2:	0001                	nop
200126b4:	40f6                	lw	ra,92(sp)
200126b6:	42e6                	lw	t0,88(sp)
200126b8:	4356                	lw	t1,84(sp)
200126ba:	43c6                	lw	t2,80(sp)
200126bc:	4436                	lw	s0,76(sp)
200126be:	4526                	lw	a0,72(sp)
200126c0:	4596                	lw	a1,68(sp)
200126c2:	4606                	lw	a2,64(sp)
200126c4:	56f2                	lw	a3,60(sp)
200126c6:	5762                	lw	a4,56(sp)
200126c8:	57d2                	lw	a5,52(sp)
200126ca:	5842                	lw	a6,48(sp)
200126cc:	58b2                	lw	a7,44(sp)
200126ce:	5e22                	lw	t3,40(sp)
200126d0:	5e92                	lw	t4,36(sp)
200126d2:	5f02                	lw	t5,32(sp)
200126d4:	4ff2                	lw	t6,28(sp)
200126d6:	6125                	addi	sp,sp,96
200126d8:	30200073          	mret

200126dc <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
200126dc:	711d                	addi	sp,sp,-96
200126de:	ce86                	sw	ra,92(sp)
200126e0:	cc96                	sw	t0,88(sp)
200126e2:	ca9a                	sw	t1,84(sp)
200126e4:	c89e                	sw	t2,80(sp)
200126e6:	c6a2                	sw	s0,76(sp)
200126e8:	c4aa                	sw	a0,72(sp)
200126ea:	c2ae                	sw	a1,68(sp)
200126ec:	c0b2                	sw	a2,64(sp)
200126ee:	de36                	sw	a3,60(sp)
200126f0:	dc3a                	sw	a4,56(sp)
200126f2:	da3e                	sw	a5,52(sp)
200126f4:	d842                	sw	a6,48(sp)
200126f6:	d646                	sw	a7,44(sp)
200126f8:	d472                	sw	t3,40(sp)
200126fa:	d276                	sw	t4,36(sp)
200126fc:	d07a                	sw	t5,32(sp)
200126fe:	ce7e                	sw	t6,28(sp)
20012700:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012702:	b36ff0ef          	jal	ra,20011a38 <__metal_myhart_id>
20012706:	872a                	mv	a4,a0
20012708:	070a                	slli	a4,a4,0x2
2001270a:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
2001270e:	97ba                	add	a5,a5,a4
20012710:	439c                	lw	a5,0(a5)
20012712:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20012716:	fac42783          	lw	a5,-84(s0)
2001271a:	c78d                	beqz	a5,20012744 <metal_lc13_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001271c:	fac42503          	lw	a0,-84(s0)
20012720:	ac2ff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20012724:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20012728:	fa842783          	lw	a5,-88(s0)
2001272c:	3507a783          	lw	a5,848(a5)
20012730:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20012734:	fa842783          	lw	a5,-88(s0)
20012738:	3487a783          	lw	a5,840(a5)
2001273c:	fa442583          	lw	a1,-92(s0)
20012740:	4575                	li	a0,29
20012742:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20012744:	0001                	nop
20012746:	40f6                	lw	ra,92(sp)
20012748:	42e6                	lw	t0,88(sp)
2001274a:	4356                	lw	t1,84(sp)
2001274c:	43c6                	lw	t2,80(sp)
2001274e:	4436                	lw	s0,76(sp)
20012750:	4526                	lw	a0,72(sp)
20012752:	4596                	lw	a1,68(sp)
20012754:	4606                	lw	a2,64(sp)
20012756:	56f2                	lw	a3,60(sp)
20012758:	5762                	lw	a4,56(sp)
2001275a:	57d2                	lw	a5,52(sp)
2001275c:	5842                	lw	a6,48(sp)
2001275e:	58b2                	lw	a7,44(sp)
20012760:	5e22                	lw	t3,40(sp)
20012762:	5e92                	lw	t4,36(sp)
20012764:	5f02                	lw	t5,32(sp)
20012766:	4ff2                	lw	t6,28(sp)
20012768:	6125                	addi	sp,sp,96
2001276a:	30200073          	mret

2001276e <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
2001276e:	711d                	addi	sp,sp,-96
20012770:	ce86                	sw	ra,92(sp)
20012772:	cc96                	sw	t0,88(sp)
20012774:	ca9a                	sw	t1,84(sp)
20012776:	c89e                	sw	t2,80(sp)
20012778:	c6a2                	sw	s0,76(sp)
2001277a:	c4aa                	sw	a0,72(sp)
2001277c:	c2ae                	sw	a1,68(sp)
2001277e:	c0b2                	sw	a2,64(sp)
20012780:	de36                	sw	a3,60(sp)
20012782:	dc3a                	sw	a4,56(sp)
20012784:	da3e                	sw	a5,52(sp)
20012786:	d842                	sw	a6,48(sp)
20012788:	d646                	sw	a7,44(sp)
2001278a:	d472                	sw	t3,40(sp)
2001278c:	d276                	sw	t4,36(sp)
2001278e:	d07a                	sw	t5,32(sp)
20012790:	ce7e                	sw	t6,28(sp)
20012792:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012794:	aa4ff0ef          	jal	ra,20011a38 <__metal_myhart_id>
20012798:	872a                	mv	a4,a0
2001279a:	070a                	slli	a4,a4,0x2
2001279c:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
200127a0:	97ba                	add	a5,a5,a4
200127a2:	439c                	lw	a5,0(a5)
200127a4:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
200127a8:	fac42783          	lw	a5,-84(s0)
200127ac:	c78d                	beqz	a5,200127d6 <metal_lc14_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200127ae:	fac42503          	lw	a0,-84(s0)
200127b2:	a30ff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
200127b6:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
200127ba:	fa842783          	lw	a5,-88(s0)
200127be:	3687a783          	lw	a5,872(a5)
200127c2:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
200127c6:	fa842783          	lw	a5,-88(s0)
200127ca:	3607a783          	lw	a5,864(a5)
200127ce:	fa442583          	lw	a1,-92(s0)
200127d2:	4579                	li	a0,30
200127d4:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
200127d6:	0001                	nop
200127d8:	40f6                	lw	ra,92(sp)
200127da:	42e6                	lw	t0,88(sp)
200127dc:	4356                	lw	t1,84(sp)
200127de:	43c6                	lw	t2,80(sp)
200127e0:	4436                	lw	s0,76(sp)
200127e2:	4526                	lw	a0,72(sp)
200127e4:	4596                	lw	a1,68(sp)
200127e6:	4606                	lw	a2,64(sp)
200127e8:	56f2                	lw	a3,60(sp)
200127ea:	5762                	lw	a4,56(sp)
200127ec:	57d2                	lw	a5,52(sp)
200127ee:	5842                	lw	a6,48(sp)
200127f0:	58b2                	lw	a7,44(sp)
200127f2:	5e22                	lw	t3,40(sp)
200127f4:	5e92                	lw	t4,36(sp)
200127f6:	5f02                	lw	t5,32(sp)
200127f8:	4ff2                	lw	t6,28(sp)
200127fa:	6125                	addi	sp,sp,96
200127fc:	30200073          	mret

20012800 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20012800:	711d                	addi	sp,sp,-96
20012802:	ce86                	sw	ra,92(sp)
20012804:	cc96                	sw	t0,88(sp)
20012806:	ca9a                	sw	t1,84(sp)
20012808:	c89e                	sw	t2,80(sp)
2001280a:	c6a2                	sw	s0,76(sp)
2001280c:	c4aa                	sw	a0,72(sp)
2001280e:	c2ae                	sw	a1,68(sp)
20012810:	c0b2                	sw	a2,64(sp)
20012812:	de36                	sw	a3,60(sp)
20012814:	dc3a                	sw	a4,56(sp)
20012816:	da3e                	sw	a5,52(sp)
20012818:	d842                	sw	a6,48(sp)
2001281a:	d646                	sw	a7,44(sp)
2001281c:	d472                	sw	t3,40(sp)
2001281e:	d276                	sw	t4,36(sp)
20012820:	d07a                	sw	t5,32(sp)
20012822:	ce7e                	sw	t6,28(sp)
20012824:	1080                	addi	s0,sp,96
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012826:	a12ff0ef          	jal	ra,20011a38 <__metal_myhart_id>
2001282a:	872a                	mv	a4,a0
2001282c:	070a                	slli	a4,a4,0x2
2001282e:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20012832:	97ba                	add	a5,a5,a4
20012834:	439c                	lw	a5,0(a5)
20012836:	faf42623          	sw	a5,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
2001283a:	fac42783          	lw	a5,-84(s0)
2001283e:	c78d                	beqz	a5,20012868 <metal_lc15_interrupt_vector_handler+0x68>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20012840:	fac42503          	lw	a0,-84(s0)
20012844:	99eff0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20012848:	faa42423          	sw	a0,-88(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
2001284c:	fa842783          	lw	a5,-88(s0)
20012850:	3807a783          	lw	a5,896(a5)
20012854:	faf42223          	sw	a5,-92(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
20012858:	fa842783          	lw	a5,-88(s0)
2001285c:	3787a783          	lw	a5,888(a5)
20012860:	fa442583          	lw	a1,-92(s0)
20012864:	457d                	li	a0,31
20012866:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
20012868:	0001                	nop
2001286a:	40f6                	lw	ra,92(sp)
2001286c:	42e6                	lw	t0,88(sp)
2001286e:	4356                	lw	t1,84(sp)
20012870:	43c6                	lw	t2,80(sp)
20012872:	4436                	lw	s0,76(sp)
20012874:	4526                	lw	a0,72(sp)
20012876:	4596                	lw	a1,68(sp)
20012878:	4606                	lw	a2,64(sp)
2001287a:	56f2                	lw	a3,60(sp)
2001287c:	5762                	lw	a4,56(sp)
2001287e:	57d2                	lw	a5,52(sp)
20012880:	5842                	lw	a6,48(sp)
20012882:	58b2                	lw	a7,44(sp)
20012884:	5e22                	lw	t3,40(sp)
20012886:	5e92                	lw	t4,36(sp)
20012888:	5f02                	lw	t5,32(sp)
2001288a:	4ff2                	lw	t6,28(sp)
2001288c:	6125                	addi	sp,sp,96
2001288e:	30200073          	mret

20012892 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20012892:	1101                	addi	sp,sp,-32
20012894:	ce22                	sw	s0,28(sp)
20012896:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20012898:	305027f3          	csrr	a5,mtvec
2001289c:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
200128a0:	fec42783          	lw	a5,-20(s0)
200128a4:	03f7f793          	andi	a5,a5,63
200128a8:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
200128ac:	fec42703          	lw	a4,-20(s0)
200128b0:	4789                	li	a5,2
200128b2:	00f70d63          	beq	a4,a5,200128cc <__metal_controller_interrupt_vector_mode+0x3a>
200128b6:	fec42703          	lw	a4,-20(s0)
200128ba:	478d                	li	a5,3
200128bc:	00f70a63          	beq	a4,a5,200128d0 <__metal_controller_interrupt_vector_mode+0x3e>
200128c0:	fec42703          	lw	a4,-20(s0)
200128c4:	4785                	li	a5,1
200128c6:	00f70763          	beq	a4,a5,200128d4 <__metal_controller_interrupt_vector_mode+0x42>
200128ca:	a039                	j	200128d8 <__metal_controller_interrupt_vector_mode+0x46>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
200128cc:	478d                	li	a5,3
200128ce:	a031                	j	200128da <__metal_controller_interrupt_vector_mode+0x48>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
200128d0:	4791                	li	a5,4
200128d2:	a021                	j	200128da <__metal_controller_interrupt_vector_mode+0x48>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
200128d4:	4785                	li	a5,1
200128d6:	a011                	j	200128da <__metal_controller_interrupt_vector_mode+0x48>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
200128d8:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:444
}
200128da:	853e                	mv	a0,a5
200128dc:	4472                	lw	s0,28(sp)
200128de:	6105                	addi	sp,sp,32
200128e0:	8082                	ret

200128e2 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
200128e2:	7179                	addi	sp,sp,-48
200128e4:	d622                	sw	s0,44(sp)
200128e6:	1800                	addi	s0,sp,48
200128e8:	fca42e23          	sw	a0,-36(s0)
200128ec:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
200128f0:	305027f3          	csrr	a5,mtvec
200128f4:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
200128f8:	fec42783          	lw	a5,-20(s0)
200128fc:	fc07f793          	andi	a5,a5,-64
20012900:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20012904:	fd842783          	lw	a5,-40(s0)
20012908:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2001290c:	fdc42703          	lw	a4,-36(s0)
20012910:	4791                	li	a5,4
20012912:	06e7e063          	bltu	a5,a4,20012972 <__metal_controller_interrupt_vector+0x90>
20012916:	fdc42783          	lw	a5,-36(s0)
2001291a:	00279713          	slli	a4,a5,0x2
2001291e:	200157b7          	lui	a5,0x20015
20012922:	51478793          	addi	a5,a5,1300 # 20015514 <__metal_driver_vtable_riscv_clint0+0x4c>
20012926:	97ba                	add	a5,a5,a4
20012928:	439c                	lw	a5,0(a5)
2001292a:	8782                	jr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
2001292c:	fe842783          	lw	a5,-24(s0)
20012930:	30779073          	csrw	mtvt,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20012934:	fec42783          	lw	a5,-20(s0)
20012938:	0027e793          	ori	a5,a5,2
2001293c:	30579073          	csrw	mtvec,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20012940:	a80d                	j	20012972 <__metal_controller_interrupt_vector+0x90>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20012942:	fe842783          	lw	a5,-24(s0)
20012946:	30779073          	csrw	mtvt,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
2001294a:	fec42783          	lw	a5,-20(s0)
2001294e:	0037e793          	ori	a5,a5,3
20012952:	30579073          	csrw	mtvec,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20012956:	a831                	j	20012972 <__metal_controller_interrupt_vector+0x90>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
20012958:	fe842783          	lw	a5,-24(s0)
2001295c:	0017e793          	ori	a5,a5,1
20012960:	30579073          	csrw	mtvec,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20012964:	a039                	j	20012972 <__metal_controller_interrupt_vector+0x90>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20012966:	fe842783          	lw	a5,-24(s0)
2001296a:	9bf1                	andi	a5,a5,-4
2001296c:	30579073          	csrw	mtvec,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20012970:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20012972:	0001                	nop
20012974:	5432                	lw	s0,44(sp)
20012976:	6145                	addi	sp,sp,48
20012978:	8082                	ret

2001297a <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
2001297a:	1101                	addi	sp,sp,-32
2001297c:	ce22                	sw	s0,28(sp)
2001297e:	1000                	addi	s0,sp,32
20012980:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20012984:	fec42783          	lw	a5,-20(s0)
20012988:	17f5                	addi	a5,a5,-3
2001298a:	4771                	li	a4,28
2001298c:	00f76d63          	bltu	a4,a5,200129a6 <__metal_valid_interrupt_id+0x2c>
20012990:	00279713          	slli	a4,a5,0x2
20012994:	200157b7          	lui	a5,0x20015
20012998:	52878793          	addi	a5,a5,1320 # 20015528 <__metal_driver_vtable_riscv_clint0+0x60>
2001299c:	97ba                	add	a5,a5,a4
2001299e:	439c                	lw	a5,0(a5)
200129a0:	8782                	jr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
200129a2:	4785                	li	a5,1
200129a4:	a019                	j	200129aa <__metal_valid_interrupt_id+0x30>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
200129a6:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
200129a8:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:501
}
200129aa:	853e                	mv	a0,a5
200129ac:	4472                	lw	s0,28(sp)
200129ae:	6105                	addi	sp,sp,32
200129b0:	8082                	ret

200129b2 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
200129b2:	7179                	addi	sp,sp,-48
200129b4:	d606                	sw	ra,44(sp)
200129b6:	d422                	sw	s0,40(sp)
200129b8:	1800                	addi	s0,sp,48
200129ba:	fca42e23          	sw	a0,-36(s0)
200129be:	fcb42c23          	sw	a1,-40(s0)
200129c2:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
200129c6:	fe042623          	sw	zero,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
200129ca:	fdc42783          	lw	a5,-36(s0)
200129ce:	e399                	bnez	a5,200129d4 <__metal_local_interrupt_enable+0x22>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
200129d0:	57fd                	li	a5,-1
200129d2:	a849                	j	20012a64 <__metal_local_interrupt_enable+0xb2>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
200129d4:	fd842703          	lw	a4,-40(s0)
200129d8:	47fd                	li	a5,31
200129da:	08e7e063          	bltu	a5,a4,20012a5a <__metal_local_interrupt_enable+0xa8>
200129de:	fd842783          	lw	a5,-40(s0)
200129e2:	00279713          	slli	a4,a5,0x2
200129e6:	200157b7          	lui	a5,0x20015
200129ea:	59c78793          	addi	a5,a5,1436 # 2001559c <__metal_driver_vtable_riscv_clint0+0xd4>
200129ee:	97ba                	add	a5,a5,a4
200129f0:	439c                	lw	a5,0(a5)
200129f2:	8782                	jr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
200129f4:	fd442783          	lw	a5,-44(s0)
200129f8:	c781                	beqz	a5,20012a00 <__metal_local_interrupt_enable+0x4e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
200129fa:	858ff0ef          	jal	ra,20011a52 <__metal_interrupt_global_enable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
200129fe:	a08d                	j	20012a60 <__metal_local_interrupt_enable+0xae>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20012a00:	86aff0ef          	jal	ra,20011a6a <__metal_interrupt_global_disable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20012a04:	a8b1                	j	20012a60 <__metal_local_interrupt_enable+0xae>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20012a06:	fd442783          	lw	a5,-44(s0)
20012a0a:	c781                	beqz	a5,20012a12 <__metal_local_interrupt_enable+0x60>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20012a0c:	876ff0ef          	jal	ra,20011a82 <__metal_interrupt_software_enable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20012a10:	a881                	j	20012a60 <__metal_local_interrupt_enable+0xae>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20012a12:	888ff0ef          	jal	ra,20011a9a <__metal_interrupt_software_disable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20012a16:	a0a9                	j	20012a60 <__metal_local_interrupt_enable+0xae>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20012a18:	fd442783          	lw	a5,-44(s0)
20012a1c:	c781                	beqz	a5,20012a24 <__metal_local_interrupt_enable+0x72>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20012a1e:	894ff0ef          	jal	ra,20011ab2 <__metal_interrupt_timer_enable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20012a22:	a83d                	j	20012a60 <__metal_local_interrupt_enable+0xae>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20012a24:	8a8ff0ef          	jal	ra,20011acc <__metal_interrupt_timer_disable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
20012a28:	a825                	j	20012a60 <__metal_local_interrupt_enable+0xae>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20012a2a:	fd442783          	lw	a5,-44(s0)
20012a2e:	c781                	beqz	a5,20012a36 <__metal_local_interrupt_enable+0x84>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20012a30:	8b6ff0ef          	jal	ra,20011ae6 <__metal_interrupt_external_enable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20012a34:	a035                	j	20012a60 <__metal_local_interrupt_enable+0xae>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20012a36:	8ccff0ef          	jal	ra,20011b02 <__metal_interrupt_external_disable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
20012a3a:	a01d                	j	20012a60 <__metal_local_interrupt_enable+0xae>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20012a3c:	fd442783          	lw	a5,-44(s0)
20012a40:	c799                	beqz	a5,20012a4e <__metal_local_interrupt_enable+0x9c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20012a42:	fd842783          	lw	a5,-40(s0)
20012a46:	853e                	mv	a0,a5
20012a48:	8d6ff0ef          	jal	ra,20011b1e <__metal_interrupt_local_enable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20012a4c:	a811                	j	20012a60 <__metal_local_interrupt_enable+0xae>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20012a4e:	fd842783          	lw	a5,-40(s0)
20012a52:	853e                	mv	a0,a5
20012a54:	8f6ff0ef          	jal	ra,20011b4a <__metal_interrupt_local_disable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
20012a58:	a021                	j	20012a60 <__metal_local_interrupt_enable+0xae>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
20012a5a:	57fd                	li	a5,-1
20012a5c:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20012a60:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:568
}
20012a64:	853e                	mv	a0,a5
20012a66:	50b2                	lw	ra,44(sp)
20012a68:	5422                	lw	s0,40(sp)
20012a6a:	6145                	addi	sp,sp,48
20012a6c:	8082                	ret

20012a6e <__metal_exception_register>:
__metal_exception_register():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20012a6e:	7179                	addi	sp,sp,-48
20012a70:	d622                	sw	s0,44(sp)
20012a72:	1800                	addi	s0,sp,48
20012a74:	fca42e23          	sw	a0,-36(s0)
20012a78:	fcb42c23          	sw	a1,-40(s0)
20012a7c:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20012a80:	fdc42783          	lw	a5,-36(s0)
20012a84:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20012a88:	fd842703          	lw	a4,-40(s0)
20012a8c:	47ad                	li	a5,11
20012a8e:	02e7c263          	blt	a5,a4,20012ab2 <__metal_exception_register+0x44>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20012a92:	fd442783          	lw	a5,-44(s0)
20012a96:	cf91                	beqz	a5,20012ab2 <__metal_exception_register+0x44>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20012a98:	fec42703          	lw	a4,-20(s0)
20012a9c:	fd842783          	lw	a5,-40(s0)
20012aa0:	0e078793          	addi	a5,a5,224
20012aa4:	078a                	slli	a5,a5,0x2
20012aa6:	97ba                	add	a5,a5,a4
20012aa8:	fd442703          	lw	a4,-44(s0)
20012aac:	c798                	sw	a4,8(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20012aae:	4781                	li	a5,0
20012ab0:	a011                	j	20012ab4 <__metal_exception_register+0x46>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20012ab2:	57fd                	li	a5,-1
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:580
}
20012ab4:	853e                	mv	a0,a5
20012ab6:	5432                	lw	s0,44(sp)
20012ab8:	6145                	addi	sp,sp,48
20012aba:	8082                	ret

20012abc <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20012abc:	7139                	addi	sp,sp,-64
20012abe:	de06                	sw	ra,60(sp)
20012ac0:	dc22                	sw	s0,56(sp)
20012ac2:	0080                	addi	s0,sp,64
20012ac4:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20012ac8:	fcc42783          	lw	a5,-52(s0)
20012acc:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20012ad0:	fe442783          	lw	a5,-28(s0)
20012ad4:	43dc                	lw	a5,4(a5)
20012ad6:	10079d63          	bnez	a5,20012bf0 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
20012ada:	57fd                	li	a5,-1
20012adc:	3047b073          	csrc	mie,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20012ae0:	57fd                	li	a5,-1
20012ae2:	3447b073          	csrc	mip,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20012ae6:	301027f3          	csrr	a5,misa
20012aea:	fef42023          	sw	a5,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20012aee:	fe042703          	lw	a4,-32(s0)
20012af2:	6789                	lui	a5,0x2
20012af4:	8ff9                	and	a5,a5,a4
20012af6:	e799                	bnez	a5,20012b04 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20012af8:	fe042703          	lw	a4,-32(s0)
20012afc:	000407b7          	lui	a5,0x40
20012b00:	8ff9                	and	a5,a5,a4
20012b02:	c799                	beqz	a5,20012b10 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20012b04:	57fd                	li	a5,-1
20012b06:	3037b073          	csrc	mideleg,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
20012b0a:	57fd                	li	a5,-1
20012b0c:	3027b073          	csrc	medeleg,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20012b10:	fe042703          	lw	a4,-32(s0)
20012b14:	000407b7          	lui	a5,0x40
20012b18:	8ff9                	and	a5,a5,a4
20012b1a:	c781                	beqz	a5,20012b22 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20012b1c:	57fd                	li	a5,-1
20012b1e:	1807b073          	csrc	satp,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20012b22:	fe042623          	sw	zero,-20(s0)
20012b26:	a0b9                	j	20012b74 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20012b28:	fe442683          	lw	a3,-28(s0)
20012b2c:	fec42703          	lw	a4,-20(s0)
20012b30:	87ba                	mv	a5,a4
20012b32:	0786                	slli	a5,a5,0x1
20012b34:	97ba                	add	a5,a5,a4
20012b36:	078e                	slli	a5,a5,0x3
20012b38:	97b6                	add	a5,a5,a3
20012b3a:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20012b3e:	fe442683          	lw	a3,-28(s0)
20012b42:	fec42703          	lw	a4,-20(s0)
20012b46:	87ba                	mv	a5,a4
20012b48:	0786                	slli	a5,a5,0x1
20012b4a:	97ba                	add	a5,a5,a4
20012b4c:	078e                	slli	a5,a5,0x3
20012b4e:	97b6                	add	a5,a5,a3
20012b50:	0807aa23          	sw	zero,148(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20012b54:	fe442683          	lw	a3,-28(s0)
20012b58:	fec42703          	lw	a4,-20(s0)
20012b5c:	87ba                	mv	a5,a4
20012b5e:	0786                	slli	a5,a5,0x1
20012b60:	97ba                	add	a5,a5,a4
20012b62:	078e                	slli	a5,a5,0x3
20012b64:	97b6                	add	a5,a5,a3
20012b66:	0807ac23          	sw	zero,152(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20012b6a:	fec42783          	lw	a5,-20(s0)
20012b6e:	0785                	addi	a5,a5,1
20012b70:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20012b74:	fec42703          	lw	a4,-20(s0)
20012b78:	47fd                	li	a5,31
20012b7a:	fae7d7e3          	bge	a5,a4,20012b28 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20012b7e:	fe042423          	sw	zero,-24(s0)
20012b82:	a01d                	j	20012ba8 <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20012b84:	fe442703          	lw	a4,-28(s0)
20012b88:	fe842783          	lw	a5,-24(s0)
20012b8c:	0e078793          	addi	a5,a5,224
20012b90:	078a                	slli	a5,a5,0x2
20012b92:	97ba                	add	a5,a5,a4
20012b94:	20012737          	lui	a4,0x20012
20012b98:	b7670713          	addi	a4,a4,-1162 # 20011b76 <__metal_default_exception_handler>
20012b9c:	c798                	sw	a4,8(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20012b9e:	fe842783          	lw	a5,-24(s0)
20012ba2:	0785                	addi	a5,a5,1
20012ba4:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20012ba8:	fe842703          	lw	a4,-24(s0)
20012bac:	47ad                	li	a5,11
20012bae:	fce7dbe3          	bge	a5,a4,20012b84 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20012bb2:	200127b7          	lui	a5,0x20012
20012bb6:	e0078593          	addi	a1,a5,-512 # 20011e00 <__metal_exception_handler>
20012bba:	4501                	li	a0,0
20012bbc:	331d                	jal	200128e2 <__metal_controller_interrupt_vector>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20012bbe:	301027f3          	csrr	a5,misa
20012bc2:	fcf42e23          	sw	a5,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20012bc6:	fdc42703          	lw	a4,-36(s0)
20012bca:	67c1                	lui	a5,0x10
20012bcc:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20012bd0:	8ff9                	and	a5,a5,a4
20012bd2:	cb99                	beqz	a5,20012be8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20012bd4:	300027f3          	csrr	a5,mstatus
20012bd8:	fcf42e23          	sw	a5,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20012bdc:	fdc42703          	lw	a4,-36(s0)
20012be0:	6789                	lui	a5,0x2
20012be2:	8fd9                	or	a5,a5,a4
20012be4:	30079073          	csrw	mstatus,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20012be8:	fe442783          	lw	a5,-28(s0)
20012bec:	4705                	li	a4,1
20012bee:	c3d8                	sw	a4,4(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20012bf0:	0001                	nop
20012bf2:	50f2                	lw	ra,60(sp)
20012bf4:	5462                	lw	s0,56(sp)
20012bf6:	6121                	addi	sp,sp,64
20012bf8:	8082                	ret

20012bfa <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20012bfa:	7179                	addi	sp,sp,-48
20012bfc:	d606                	sw	ra,44(sp)
20012bfe:	d422                	sw	s0,40(sp)
20012c00:	1800                	addi	s0,sp,48
20012c02:	fca42e23          	sw	a0,-36(s0)
20012c06:	fcb42c23          	sw	a1,-40(s0)
20012c0a:	fcc42a23          	sw	a2,-44(s0)
20012c0e:	fcd42823          	sw	a3,-48(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20012c12:	fe042623          	sw	zero,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20012c16:	fdc42783          	lw	a5,-36(s0)
20012c1a:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20012c1e:	fd842503          	lw	a0,-40(s0)
20012c22:	3ba1                	jal	2001297a <__metal_valid_interrupt_id>
20012c24:	87aa                	mv	a5,a0
20012c26:	e399                	bnez	a5,20012c2c <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20012c28:	57d5                	li	a5,-11
20012c2a:	aa11                	j	20012d3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20012c2c:	fd442783          	lw	a5,-44(s0)
20012c30:	cf85                	beqz	a5,20012c68 <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20012c32:	fe842683          	lw	a3,-24(s0)
20012c36:	fd842703          	lw	a4,-40(s0)
20012c3a:	87ba                	mv	a5,a4
20012c3c:	0786                	slli	a5,a5,0x1
20012c3e:	97ba                	add	a5,a5,a4
20012c40:	078e                	slli	a5,a5,0x3
20012c42:	97b6                	add	a5,a5,a3
20012c44:	fd442703          	lw	a4,-44(s0)
20012c48:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20012c4c:	fe842683          	lw	a3,-24(s0)
20012c50:	fd842703          	lw	a4,-40(s0)
20012c54:	87ba                	mv	a5,a4
20012c56:	0786                	slli	a5,a5,0x1
20012c58:	97ba                	add	a5,a5,a4
20012c5a:	078e                	slli	a5,a5,0x3
20012c5c:	97b6                	add	a5,a5,a3
20012c5e:	fd042703          	lw	a4,-48(s0)
20012c62:	08e7ac23          	sw	a4,152(a5)
20012c66:	a8d1                	j	20012d3a <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20012c68:	fd842783          	lw	a5,-40(s0)
20012c6c:	17f5                	addi	a5,a5,-3
20012c6e:	4771                	li	a4,28
20012c70:	0cf76263          	bltu	a4,a5,20012d34 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20012c74:	00279713          	slli	a4,a5,0x2
20012c78:	200157b7          	lui	a5,0x20015
20012c7c:	61c78793          	addi	a5,a5,1564 # 2001561c <__metal_driver_vtable_riscv_clint0+0x154>
20012c80:	97ba                	add	a5,a5,a4
20012c82:	439c                	lw	a5,0(a5)
20012c84:	8782                	jr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20012c86:	fe842683          	lw	a3,-24(s0)
20012c8a:	fd842703          	lw	a4,-40(s0)
20012c8e:	87ba                	mv	a5,a4
20012c90:	0786                	slli	a5,a5,0x1
20012c92:	97ba                	add	a5,a5,a4
20012c94:	078e                	slli	a5,a5,0x3
20012c96:	97b6                	add	a5,a5,a3
20012c98:	20012737          	lui	a4,0x20012
20012c9c:	c6270713          	addi	a4,a4,-926 # 20011c62 <__metal_default_sw_handler>
20012ca0:	08e7a823          	sw	a4,144(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20012ca4:	fe842683          	lw	a3,-24(s0)
20012ca8:	fd842703          	lw	a4,-40(s0)
20012cac:	87ba                	mv	a5,a4
20012cae:	0786                	slli	a5,a5,0x1
20012cb0:	97ba                	add	a5,a5,a4
20012cb2:	078e                	slli	a5,a5,0x3
20012cb4:	97b6                	add	a5,a5,a3
20012cb6:	fd042703          	lw	a4,-48(s0)
20012cba:	08e7aa23          	sw	a4,148(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20012cbe:	a8b5                	j	20012d3a <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20012cc0:	fe842683          	lw	a3,-24(s0)
20012cc4:	fd842703          	lw	a4,-40(s0)
20012cc8:	87ba                	mv	a5,a4
20012cca:	0786                	slli	a5,a5,0x1
20012ccc:	97ba                	add	a5,a5,a4
20012cce:	078e                	slli	a5,a5,0x3
20012cd0:	97b6                	add	a5,a5,a3
20012cd2:	20012737          	lui	a4,0x20012
20012cd6:	d5470713          	addi	a4,a4,-684 # 20011d54 <__metal_default_timer_handler>
20012cda:	08e7a823          	sw	a4,144(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20012cde:	fe842683          	lw	a3,-24(s0)
20012ce2:	fd842703          	lw	a4,-40(s0)
20012ce6:	87ba                	mv	a5,a4
20012ce8:	0786                	slli	a5,a5,0x1
20012cea:	97ba                	add	a5,a5,a4
20012cec:	078e                	slli	a5,a5,0x3
20012cee:	97b6                	add	a5,a5,a3
20012cf0:	fd042703          	lw	a4,-48(s0)
20012cf4:	08e7aa23          	sw	a4,148(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20012cf8:	a089                	j	20012d3a <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20012cfa:	fe842683          	lw	a3,-24(s0)
20012cfe:	fd842703          	lw	a4,-40(s0)
20012d02:	87ba                	mv	a5,a4
20012d04:	0786                	slli	a5,a5,0x1
20012d06:	97ba                	add	a5,a5,a4
20012d08:	078e                	slli	a5,a5,0x3
20012d0a:	97b6                	add	a5,a5,a3
20012d0c:	20012737          	lui	a4,0x20012
20012d10:	b8e70713          	addi	a4,a4,-1138 # 20011b8e <__metal_default_interrupt_handler>
20012d14:	08e7a823          	sw	a4,144(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20012d18:	fe842683          	lw	a3,-24(s0)
20012d1c:	fd842703          	lw	a4,-40(s0)
20012d20:	87ba                	mv	a5,a4
20012d22:	0786                	slli	a5,a5,0x1
20012d24:	97ba                	add	a5,a5,a4
20012d26:	078e                	slli	a5,a5,0x3
20012d28:	97b6                	add	a5,a5,a3
20012d2a:	fd042703          	lw	a4,-48(s0)
20012d2e:	08e7aa23          	sw	a4,148(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20012d32:	a021                	j	20012d3a <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20012d34:	57d1                	li	a5,-12
20012d36:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20012d3a:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:679
}
20012d3e:	853e                	mv	a0,a5
20012d40:	50b2                	lw	ra,44(sp)
20012d42:	5422                	lw	s0,40(sp)
20012d44:	6145                	addi	sp,sp,48
20012d46:	8082                	ret

20012d48 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20012d48:	1101                	addi	sp,sp,-32
20012d4a:	ce06                	sw	ra,28(sp)
20012d4c:	cc22                	sw	s0,24(sp)
20012d4e:	1000                	addi	s0,sp,32
20012d50:	fea42623          	sw	a0,-20(s0)
20012d54:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20012d58:	fe842783          	lw	a5,-24(s0)
20012d5c:	4605                	li	a2,1
20012d5e:	85be                	mv	a1,a5
20012d60:	fec42503          	lw	a0,-20(s0)
20012d64:	31b9                	jal	200129b2 <__metal_local_interrupt_enable>
20012d66:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:685
}
20012d68:	853e                	mv	a0,a5
20012d6a:	40f2                	lw	ra,28(sp)
20012d6c:	4462                	lw	s0,24(sp)
20012d6e:	6105                	addi	sp,sp,32
20012d70:	8082                	ret

20012d72 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20012d72:	1101                	addi	sp,sp,-32
20012d74:	ce06                	sw	ra,28(sp)
20012d76:	cc22                	sw	s0,24(sp)
20012d78:	1000                	addi	s0,sp,32
20012d7a:	fea42623          	sw	a0,-20(s0)
20012d7e:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20012d82:	fe842783          	lw	a5,-24(s0)
20012d86:	4601                	li	a2,0
20012d88:	85be                	mv	a1,a5
20012d8a:	fec42503          	lw	a0,-20(s0)
20012d8e:	3115                	jal	200129b2 <__metal_local_interrupt_enable>
20012d90:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:691
}
20012d92:	853e                	mv	a0,a5
20012d94:	40f2                	lw	ra,28(sp)
20012d96:	4462                	lw	s0,24(sp)
20012d98:	6105                	addi	sp,sp,32
20012d9a:	8082                	ret

20012d9c <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20012d9c:	1101                	addi	sp,sp,-32
20012d9e:	ce06                	sw	ra,28(sp)
20012da0:	cc22                	sw	s0,24(sp)
20012da2:	1000                	addi	s0,sp,32
20012da4:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20012da8:	aebff0ef          	jal	ra,20012892 <__metal_controller_interrupt_vector_mode>
20012dac:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:724
}
20012dae:	853e                	mv	a0,a5
20012db0:	40f2                	lw	ra,28(sp)
20012db2:	4462                	lw	s0,24(sp)
20012db4:	6105                	addi	sp,sp,32
20012db6:	8082                	ret

20012db8 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20012db8:	7179                	addi	sp,sp,-48
20012dba:	d606                	sw	ra,44(sp)
20012dbc:	d422                	sw	s0,40(sp)
20012dbe:	1800                	addi	s0,sp,48
20012dc0:	fca42e23          	sw	a0,-36(s0)
20012dc4:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20012dc8:	fdc42783          	lw	a5,-36(s0)
20012dcc:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20012dd0:	fd842783          	lw	a5,-40(s0)
20012dd4:	eb99                	bnez	a5,20012dea <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20012dd6:	200127b7          	lui	a5,0x20012
20012dda:	e0078593          	addi	a1,a5,-512 # 20011e00 <__metal_exception_handler>
20012dde:	fd842503          	lw	a0,-40(s0)
20012de2:	b01ff0ef          	jal	ra,200128e2 <__metal_controller_interrupt_vector>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20012de6:	4781                	li	a5,0
20012de8:	a00d                	j	20012e0a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20012dea:	fd842703          	lw	a4,-40(s0)
20012dee:	4785                	li	a5,1
20012df0:	00f71c63          	bne	a4,a5,20012e08 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20012df4:	200157b7          	lui	a5,0x20015
20012df8:	30078593          	addi	a1,a5,768 # 20015300 <__metal_vector_table>
20012dfc:	fd842503          	lw	a0,-40(s0)
20012e00:	ae3ff0ef          	jal	ra,200128e2 <__metal_controller_interrupt_vector>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20012e04:	4781                	li	a5,0
20012e06:	a011                	j	20012e0a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20012e08:	57fd                	li	a5,-1
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:740
}
20012e0a:	853e                	mv	a0,a5
20012e0c:	50b2                	lw	ra,44(sp)
20012e0e:	5422                	lw	s0,40(sp)
20012e10:	6145                	addi	sp,sp,48
20012e12:	8082                	ret

20012e14 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20012e14:	1101                	addi	sp,sp,-32
20012e16:	ce22                	sw	s0,28(sp)
20012e18:	1000                	addi	s0,sp,32
20012e1a:	fea42623          	sw	a0,-20(s0)
20012e1e:	feb42423          	sw	a1,-24(s0)
20012e22:	fec42223          	sw	a2,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20012e26:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:747
}
20012e28:	853e                	mv	a0,a5
20012e2a:	4472                	lw	s0,28(sp)
20012e2c:	6105                	addi	sp,sp,32
20012e2e:	8082                	ret

20012e30 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20012e30:	7139                	addi	sp,sp,-64
20012e32:	de22                	sw	s0,60(sp)
20012e34:	0080                	addi	s0,sp,64
20012e36:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20012e3a:	4301                	li	t1,0
20012e3c:	4381                	li	t2,0
20012e3e:	fe642423          	sw	t1,-24(s0)
20012e42:	fe742623          	sw	t2,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20012e46:	b8002573          	csrr	a0,mcycleh
20012e4a:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20012e4e:	b0002573          	csrr	a0,mcycle
20012e52:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20012e56:	b8002573          	csrr	a0,mcycleh
20012e5a:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20012e5e:	fe442883          	lw	a7,-28(s0)
20012e62:	fdc42503          	lw	a0,-36(s0)
20012e66:	02a89563          	bne	a7,a0,20012e90 <__metal_driver_cpu_mcycle_get+0x60>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20012e6a:	fe442503          	lw	a0,-28(s0)
20012e6e:	85aa                	mv	a1,a0
20012e70:	4601                	li	a2,0
20012e72:	00059813          	slli	a6,a1,0x0
20012e76:	4781                	li	a5,0
20012e78:	fe042603          	lw	a2,-32(s0)
20012e7c:	86b2                	mv	a3,a2
20012e7e:	4701                	li	a4,0
20012e80:	00d7e633          	or	a2,a5,a3
20012e84:	fec42423          	sw	a2,-24(s0)
20012e88:	00e867b3          	or	a5,a6,a4
20012e8c:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20012e90:	fe842783          	lw	a5,-24(s0)
20012e94:	fec42803          	lw	a6,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:769
}
20012e98:	853e                	mv	a0,a5
20012e9a:	85c2                	mv	a1,a6
20012e9c:	5472                	lw	s0,60(sp)
20012e9e:	6121                	addi	sp,sp,64
20012ea0:	8082                	ret

20012ea2 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20012ea2:	7179                	addi	sp,sp,-48
20012ea4:	d606                	sw	ra,44(sp)
20012ea6:	d422                	sw	s0,40(sp)
20012ea8:	d24a                	sw	s2,36(sp)
20012eaa:	d04e                	sw	s3,32(sp)
20012eac:	1800                	addi	s0,sp,48
20012eae:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20012eb2:	fdc42783          	lw	a5,-36(s0)
20012eb6:	e781                	bnez	a5,20012ebe <__metal_driver_cpu_timebase_get+0x1c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20012eb8:	4901                	li	s2,0
20012eba:	4981                	li	s3,0
20012ebc:	a821                	j	20012ed4 <__metal_driver_cpu_timebase_get+0x32>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20012ebe:	fdc42503          	lw	a0,-36(s0)
20012ec2:	af7fe0ef          	jal	ra,200119b8 <__metal_driver_cpu_timebase>
20012ec6:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20012eca:	fec42783          	lw	a5,-20(s0)
20012ece:	893e                	mv	s2,a5
20012ed0:	87fd                	srai	a5,a5,0x1f
20012ed2:	89be                	mv	s3,a5
20012ed4:	87ca                	mv	a5,s2
20012ed6:	884e                	mv	a6,s3
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:780
}
20012ed8:	853e                	mv	a0,a5
20012eda:	85c2                	mv	a1,a6
20012edc:	50b2                	lw	ra,44(sp)
20012ede:	5422                	lw	s0,40(sp)
20012ee0:	5912                	lw	s2,36(sp)
20012ee2:	5982                	lw	s3,32(sp)
20012ee4:	6145                	addi	sp,sp,48
20012ee6:	8082                	ret

20012ee8 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20012ee8:	7179                	addi	sp,sp,-48
20012eea:	d606                	sw	ra,44(sp)
20012eec:	d422                	sw	s0,40(sp)
20012eee:	1800                	addi	s0,sp,48
20012ef0:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20012ef4:	4781                	li	a5,0
20012ef6:	4801                	li	a6,0
20012ef8:	fef42023          	sw	a5,-32(s0)
20012efc:	ff042223          	sw	a6,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20012f00:	fdc42503          	lw	a0,-36(s0)
20012f04:	adffe0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20012f08:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20012f0c:	fec42783          	lw	a5,-20(s0)
20012f10:	c78d                	beqz	a5,20012f3a <__metal_driver_cpu_mtime_get+0x52>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20012f12:	fec42783          	lw	a5,-20(s0)
20012f16:	13c7a783          	lw	a5,316(a5)
20012f1a:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20012f1e:	fe842783          	lw	a5,-24(s0)
20012f22:	cf81                	beqz	a5,20012f3a <__metal_driver_cpu_mtime_get+0x52>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20012f24:	fe842783          	lw	a5,-24(s0)
20012f28:	439c                	lw	a5,0(a5)
20012f2a:	43f8                	lw	a4,68(a5)
20012f2c:	fe040793          	addi	a5,s0,-32
20012f30:	863e                	mv	a2,a5
20012f32:	4585                	li	a1,1
20012f34:	fe842503          	lw	a0,-24(s0)
20012f38:	9702                	jalr	a4
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20012f3a:	fe042783          	lw	a5,-32(s0)
20012f3e:	fe442803          	lw	a6,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:797
}
20012f42:	853e                	mv	a0,a5
20012f44:	85c2                	mv	a1,a6
20012f46:	50b2                	lw	ra,44(sp)
20012f48:	5422                	lw	s0,40(sp)
20012f4a:	6145                	addi	sp,sp,48
20012f4c:	8082                	ret

20012f4e <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20012f4e:	7179                	addi	sp,sp,-48
20012f50:	d606                	sw	ra,44(sp)
20012f52:	d422                	sw	s0,40(sp)
20012f54:	d226                	sw	s1,36(sp)
20012f56:	1800                	addi	s0,sp,48
20012f58:	fca42e23          	sw	a0,-36(s0)
20012f5c:	fcb42823          	sw	a1,-48(s0)
20012f60:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20012f64:	57fd                	li	a5,-1
20012f66:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20012f6a:	fdc42503          	lw	a0,-36(s0)
20012f6e:	a75fe0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20012f72:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20012f76:	fe842783          	lw	a5,-24(s0)
20012f7a:	cf8d                	beqz	a5,20012fb4 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20012f7c:	fe842783          	lw	a5,-24(s0)
20012f80:	13c7a783          	lw	a5,316(a5)
20012f84:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20012f88:	fe442783          	lw	a5,-28(s0)
20012f8c:	c785                	beqz	a5,20012fb4 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20012f8e:	fe442783          	lw	a5,-28(s0)
20012f92:	439c                	lw	a5,0(a5)
20012f94:	47a4                	lw	s1,72(a5)
20012f96:	fdc42503          	lw	a0,-36(s0)
20012f9a:	9fbfe0ef          	jal	ra,20011994 <__metal_driver_cpu_hartid>
20012f9e:	87aa                	mv	a5,a0
20012fa0:	fd042603          	lw	a2,-48(s0)
20012fa4:	fd442683          	lw	a3,-44(s0)
20012fa8:	85be                	mv	a1,a5
20012faa:	fe442503          	lw	a0,-28(s0)
20012fae:	9482                	jalr	s1
20012fb0:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20012fb4:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:815
}
20012fb8:	853e                	mv	a0,a5
20012fba:	50b2                	lw	ra,44(sp)
20012fbc:	5422                	lw	s0,40(sp)
20012fbe:	5492                	lw	s1,36(sp)
20012fc0:	6145                	addi	sp,sp,48
20012fc2:	8082                	ret

20012fc4 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20012fc4:	1101                	addi	sp,sp,-32
20012fc6:	ce22                	sw	s0,28(sp)
20012fc8:	1000                	addi	s0,sp,32
20012fca:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20012fce:	81018793          	addi	a5,gp,-2032 # 80000a98 <__metal_dt_clint_2000000>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20012fd2:	853e                	mv	a0,a5
20012fd4:	4472                	lw	s0,28(sp)
20012fd6:	6105                	addi	sp,sp,32
20012fd8:	8082                	ret

20012fda <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20012fda:	1101                	addi	sp,sp,-32
20012fdc:	ce22                	sw	s0,28(sp)
20012fde:	1000                	addi	s0,sp,32
20012fe0:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20012fe4:	479d                	li	a5,7
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:835
}
20012fe6:	853e                	mv	a0,a5
20012fe8:	4472                	lw	s0,28(sp)
20012fea:	6105                	addi	sp,sp,32
20012fec:	8082                	ret

20012fee <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20012fee:	1101                	addi	sp,sp,-32
20012ff0:	ce22                	sw	s0,28(sp)
20012ff2:	1000                	addi	s0,sp,32
20012ff4:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20012ff8:	81018793          	addi	a5,gp,-2032 # 80000a98 <__metal_dt_clint_2000000>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20012ffc:	853e                	mv	a0,a5
20012ffe:	4472                	lw	s0,28(sp)
20013000:	6105                	addi	sp,sp,32
20013002:	8082                	ret

20013004 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20013004:	1101                	addi	sp,sp,-32
20013006:	ce22                	sw	s0,28(sp)
20013008:	1000                	addi	s0,sp,32
2001300a:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
2001300e:	478d                	li	a5,3
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:855
}
20013010:	853e                	mv	a0,a5
20013012:	4472                	lw	s0,28(sp)
20013014:	6105                	addi	sp,sp,32
20013016:	8082                	ret

20013018 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20013018:	7179                	addi	sp,sp,-48
2001301a:	d606                	sw	ra,44(sp)
2001301c:	d422                	sw	s0,40(sp)
2001301e:	1800                	addi	s0,sp,48
20013020:	fca42e23          	sw	a0,-36(s0)
20013024:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20013028:	57fd                	li	a5,-1
2001302a:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2001302e:	fdc42503          	lw	a0,-36(s0)
20013032:	9b1fe0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20013036:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
2001303a:	fe842783          	lw	a5,-24(s0)
2001303e:	c79d                	beqz	a5,2001306c <__metal_driver_cpu_set_sw_ipi+0x54>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20013040:	fe842783          	lw	a5,-24(s0)
20013044:	0dc7a783          	lw	a5,220(a5)
20013048:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
2001304c:	fe442783          	lw	a5,-28(s0)
20013050:	cf91                	beqz	a5,2001306c <__metal_driver_cpu_set_sw_ipi+0x54>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20013052:	fe442783          	lw	a5,-28(s0)
20013056:	439c                	lw	a5,0(a5)
20013058:	43f8                	lw	a4,68(a5)
2001305a:	fd840793          	addi	a5,s0,-40
2001305e:	863e                	mv	a2,a5
20013060:	458d                	li	a1,3
20013062:	fe442503          	lw	a0,-28(s0)
20013066:	9702                	jalr	a4
20013068:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
2001306c:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:872
}
20013070:	853e                	mv	a0,a5
20013072:	50b2                	lw	ra,44(sp)
20013074:	5422                	lw	s0,40(sp)
20013076:	6145                	addi	sp,sp,48
20013078:	8082                	ret

2001307a <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
2001307a:	7179                	addi	sp,sp,-48
2001307c:	d606                	sw	ra,44(sp)
2001307e:	d422                	sw	s0,40(sp)
20013080:	1800                	addi	s0,sp,48
20013082:	fca42e23          	sw	a0,-36(s0)
20013086:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
2001308a:	57fd                	li	a5,-1
2001308c:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20013090:	fdc42503          	lw	a0,-36(s0)
20013094:	94ffe0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20013098:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
2001309c:	fe842783          	lw	a5,-24(s0)
200130a0:	c79d                	beqz	a5,200130ce <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
200130a2:	fe842783          	lw	a5,-24(s0)
200130a6:	0dc7a783          	lw	a5,220(a5)
200130aa:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
200130ae:	fe442783          	lw	a5,-28(s0)
200130b2:	cf91                	beqz	a5,200130ce <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
200130b4:	fe442783          	lw	a5,-28(s0)
200130b8:	439c                	lw	a5,0(a5)
200130ba:	43f8                	lw	a4,68(a5)
200130bc:	fd840793          	addi	a5,s0,-40
200130c0:	863e                	mv	a2,a5
200130c2:	4589                	li	a1,2
200130c4:	fe442503          	lw	a0,-28(s0)
200130c8:	9702                	jalr	a4
200130ca:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
200130ce:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:889
}
200130d2:	853e                	mv	a0,a5
200130d4:	50b2                	lw	ra,44(sp)
200130d6:	5422                	lw	s0,40(sp)
200130d8:	6145                	addi	sp,sp,48
200130da:	8082                	ret

200130dc <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
200130dc:	7179                	addi	sp,sp,-48
200130de:	d606                	sw	ra,44(sp)
200130e0:	d422                	sw	s0,40(sp)
200130e2:	1800                	addi	s0,sp,48
200130e4:	fca42e23          	sw	a0,-36(s0)
200130e8:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
200130ec:	fe042623          	sw	zero,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
200130f0:	fdc42503          	lw	a0,-36(s0)
200130f4:	8effe0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
200130f8:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
200130fc:	fe842783          	lw	a5,-24(s0)
20013100:	c79d                	beqz	a5,2001312e <__metal_driver_cpu_get_msip+0x52>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20013102:	fe842783          	lw	a5,-24(s0)
20013106:	0dc7a783          	lw	a5,220(a5)
2001310a:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
2001310e:	fe442783          	lw	a5,-28(s0)
20013112:	cf91                	beqz	a5,2001312e <__metal_driver_cpu_get_msip+0x52>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20013114:	fe442783          	lw	a5,-28(s0)
20013118:	439c                	lw	a5,0(a5)
2001311a:	43f8                	lw	a4,68(a5)
2001311c:	fd840793          	addi	a5,s0,-40
20013120:	863e                	mv	a2,a5
20013122:	4591                	li	a1,4
20013124:	fe442503          	lw	a0,-28(s0)
20013128:	9702                	jalr	a4
2001312a:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
2001312e:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:906
}
20013132:	853e                	mv	a0,a5
20013134:	50b2                	lw	ra,44(sp)
20013136:	5422                	lw	s0,40(sp)
20013138:	6145                	addi	sp,sp,48
2001313a:	8082                	ret

2001313c <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
2001313c:	1101                	addi	sp,sp,-32
2001313e:	ce06                	sw	ra,28(sp)
20013140:	cc22                	sw	s0,24(sp)
20013142:	1000                	addi	s0,sp,32
20013144:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20013148:	fec42503          	lw	a0,-20(s0)
2001314c:	897fe0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20013150:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:912
}
20013152:	853e                	mv	a0,a5
20013154:	40f2                	lw	ra,28(sp)
20013156:	4462                	lw	s0,24(sp)
20013158:	6105                	addi	sp,sp,32
2001315a:	8082                	ret

2001315c <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
2001315c:	7179                	addi	sp,sp,-48
2001315e:	d606                	sw	ra,44(sp)
20013160:	d422                	sw	s0,40(sp)
20013162:	1800                	addi	s0,sp,48
20013164:	fca42e23          	sw	a0,-36(s0)
20013168:	fcb42c23          	sw	a1,-40(s0)
2001316c:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20013170:	fdc42503          	lw	a0,-36(s0)
20013174:	86ffe0ef          	jal	ra,200119e2 <__metal_driver_cpu_interrupt_controller>
20013178:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
2001317c:	fec42783          	lw	a5,-20(s0)
20013180:	cb99                	beqz	a5,20013196 <__metal_driver_cpu_exception_register+0x3a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20013182:	fd442603          	lw	a2,-44(s0)
20013186:	fd842583          	lw	a1,-40(s0)
2001318a:	fec42503          	lw	a0,-20(s0)
2001318e:	8e1ff0ef          	jal	ra,20012a6e <__metal_exception_register>
20013192:	87aa                	mv	a5,a0
20013194:	a011                	j	20013198 <__metal_driver_cpu_exception_register+0x3c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20013196:	57fd                	li	a5,-1
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:944
}
20013198:	853e                	mv	a0,a5
2001319a:	50b2                	lw	ra,44(sp)
2001319c:	5422                	lw	s0,40(sp)
2001319e:	6145                	addi	sp,sp,48
200131a0:	8082                	ret

200131a2 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
200131a2:	1101                	addi	sp,sp,-32
200131a4:	ce22                	sw	s0,28(sp)
200131a6:	1000                	addi	s0,sp,32
200131a8:	fea42623          	sw	a0,-20(s0)
200131ac:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
200131b0:	fe842783          	lw	a5,-24(s0)
200131b4:	0007d783          	lhu	a5,0(a5)
200131b8:	0037f713          	andi	a4,a5,3
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
200131bc:	478d                	li	a5,3
200131be:	00f71463          	bne	a4,a5,200131c6 <__metal_driver_cpu_get_instruction_length+0x24>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
200131c2:	4791                	li	a5,4
200131c4:	a011                	j	200131c8 <__metal_driver_cpu_get_instruction_length+0x26>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
200131c6:	4789                	li	a5,2
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
200131c8:	853e                	mv	a0,a5
200131ca:	4472                	lw	s0,28(sp)
200131cc:	6105                	addi	sp,sp,32
200131ce:	8082                	ret

200131d0 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
200131d0:	7179                	addi	sp,sp,-48
200131d2:	d622                	sw	s0,44(sp)
200131d4:	1800                	addi	s0,sp,48
200131d6:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
200131da:	341027f3          	csrr	a5,mepc
200131de:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
200131e2:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:962
}
200131e6:	853e                	mv	a0,a5
200131e8:	5432                	lw	s0,44(sp)
200131ea:	6145                	addi	sp,sp,48
200131ec:	8082                	ret

200131ee <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
200131ee:	1101                	addi	sp,sp,-32
200131f0:	ce22                	sw	s0,28(sp)
200131f2:	1000                	addi	s0,sp,32
200131f4:	fea42623          	sw	a0,-20(s0)
200131f8:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
200131fc:	fe842783          	lw	a5,-24(s0)
20013200:	34179073          	csrw	mepc,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20013204:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_cpu.c:968
}
20013206:	853e                	mv	a0,a5
20013208:	4472                	lw	s0,28(sp)
2001320a:	6105                	addi	sp,sp,32
2001320c:	8082                	ret

2001320e <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:305



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
2001320e:	1101                	addi	sp,sp,-32
20013210:	ce22                	sw	s0,28(sp)
20013212:	1000                	addi	s0,sp,32
20013214:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:306
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20013218:	fec42703          	lw	a4,-20(s0)
2001321c:	800007b7          	lui	a5,0x80000
20013220:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffecdc>
20013224:	00f71563          	bne	a4,a5,2001322e <__metal_driver_sifive_plic0_control_base+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:307
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20013228:	0c0007b7          	lui	a5,0xc000
2001322c:	a011                	j	20013230 <__metal_driver_sifive_plic0_control_base+0x22>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:310
	}
	else {
		return 0;
2001322e:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:312
	}
}
20013230:	853e                	mv	a0,a5
20013232:	4472                	lw	s0,28(sp)
20013234:	6105                	addi	sp,sp,32
20013236:	8082                	ret

20013238 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:325
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20013238:	1101                	addi	sp,sp,-32
2001323a:	ce22                	sw	s0,28(sp)
2001323c:	1000                	addi	s0,sp,32
2001323e:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:326
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20013242:	fec42703          	lw	a4,-20(s0)
20013246:	800007b7          	lui	a5,0x80000
2001324a:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffecdc>
2001324e:	00f71563          	bne	a4,a5,20013258 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:327
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20013252:	03500793          	li	a5,53
20013256:	a011                	j	2001325a <__metal_driver_sifive_plic0_num_interrupts+0x22>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:330
	}
	else {
		return 0;
20013258:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:332
	}
}
2001325a:	853e                	mv	a0,a5
2001325c:	4472                	lw	s0,28(sp)
2001325e:	6105                	addi	sp,sp,32
20013260:	8082                	ret

20013262 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:335

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20013262:	1101                	addi	sp,sp,-32
20013264:	ce22                	sw	s0,28(sp)
20013266:	1000                	addi	s0,sp,32
20013268:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:336
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2001326c:	fec42703          	lw	a4,-20(s0)
20013270:	800007b7          	lui	a5,0x80000
20013274:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffecdc>
20013278:	00f71463          	bne	a4,a5,20013280 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:337
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
2001327c:	479d                	li	a5,7
2001327e:	a011                	j	20013282 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:340
	}
	else {
		return 0;
20013280:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:342
	}
}
20013282:	853e                	mv	a0,a5
20013284:	4472                	lw	s0,28(sp)
20013286:	6105                	addi	sp,sp,32
20013288:	8082                	ret

2001328a <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:345

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
2001328a:	1101                	addi	sp,sp,-32
2001328c:	ce22                	sw	s0,28(sp)
2001328e:	1000                	addi	s0,sp,32
20013290:	fea42623          	sw	a0,-20(s0)
20013294:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:346
	if (idx == 0) {
20013298:	fe842783          	lw	a5,-24(s0)
2001329c:	e791                	bnez	a5,200132a8 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:347
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2001329e:	800007b7          	lui	a5,0x80000
200132a2:	09078793          	addi	a5,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffe924>
200132a6:	a011                	j	200132aa <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:350
	}
	else {
		return NULL;
200132a8:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:352
	}
}
200132aa:	853e                	mv	a0,a5
200132ac:	4472                	lw	s0,28(sp)
200132ae:	6105                	addi	sp,sp,32
200132b0:	8082                	ret

200132b2 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:355

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
200132b2:	1101                	addi	sp,sp,-32
200132b4:	ce22                	sw	s0,28(sp)
200132b6:	1000                	addi	s0,sp,32
200132b8:	fea42623          	sw	a0,-20(s0)
200132bc:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:356
	if (idx == 0) {
200132c0:	fe842783          	lw	a5,-24(s0)
200132c4:	e399                	bnez	a5,200132ca <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:357
		return 11;
200132c6:	47ad                	li	a5,11
200132c8:	a011                	j	200132cc <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:360
	}
	else {
		return 0;
200132ca:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:362
	}
}
200132cc:	853e                	mv	a0,a5
200132ce:	4472                	lw	s0,28(sp)
200132d0:	6105                	addi	sp,sp,32
200132d2:	8082                	ret

200132d4 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
200132d4:	7179                	addi	sp,sp,-48
200132d6:	d606                	sw	ra,44(sp)
200132d8:	d422                	sw	s0,40(sp)
200132da:	1800                	addi	s0,sp,48
200132dc:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
200132e0:	fdc42503          	lw	a0,-36(s0)
200132e4:	372d                	jal	2001320e <__metal_driver_sifive_plic0_control_base>
200132e6:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200132ea:	fec42703          	lw	a4,-20(s0)
200132ee:	002007b7          	lui	a5,0x200
200132f2:	0791                	addi	a5,a5,4
200132f4:	97ba                	add	a5,a5,a4
200132f6:	439c                	lw	a5,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
200132f8:	853e                	mv	a0,a5
200132fa:	50b2                	lw	ra,44(sp)
200132fc:	5422                	lw	s0,40(sp)
200132fe:	6145                	addi	sp,sp,48
20013300:	8082                	ret

20013302 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20013302:	7179                	addi	sp,sp,-48
20013304:	d606                	sw	ra,44(sp)
20013306:	d422                	sw	s0,40(sp)
20013308:	1800                	addi	s0,sp,48
2001330a:	fca42e23          	sw	a0,-36(s0)
2001330e:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20013312:	fdc42503          	lw	a0,-36(s0)
20013316:	3de5                	jal	2001320e <__metal_driver_sifive_plic0_control_base>
20013318:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2001331c:	fec42703          	lw	a4,-20(s0)
20013320:	002007b7          	lui	a5,0x200
20013324:	0791                	addi	a5,a5,4
20013326:	97ba                	add	a5,a5,a4
20013328:	873e                	mv	a4,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
2001332a:	fd842783          	lw	a5,-40(s0)
2001332e:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:26
}
20013330:	0001                	nop
20013332:	50b2                	lw	ra,44(sp)
20013334:	5422                	lw	s0,40(sp)
20013336:	6145                	addi	sp,sp,48
20013338:	8082                	ret

2001333a <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
2001333a:	7179                	addi	sp,sp,-48
2001333c:	d606                	sw	ra,44(sp)
2001333e:	d422                	sw	s0,40(sp)
20013340:	1800                	addi	s0,sp,48
20013342:	fca42e23          	sw	a0,-36(s0)
20013346:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
2001334a:	fdc42503          	lw	a0,-36(s0)
2001334e:	35c1                	jal	2001320e <__metal_driver_sifive_plic0_control_base>
20013350:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20013354:	fec42703          	lw	a4,-20(s0)
20013358:	002007b7          	lui	a5,0x200
2001335c:	97ba                	add	a5,a5,a4
2001335e:	873e                	mv	a4,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20013360:	fd842783          	lw	a5,-40(s0)
20013364:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20013366:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:34
}
20013368:	853e                	mv	a0,a5
2001336a:	50b2                	lw	ra,44(sp)
2001336c:	5422                	lw	s0,40(sp)
2001336e:	6145                	addi	sp,sp,48
20013370:	8082                	ret

20013372 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20013372:	7179                	addi	sp,sp,-48
20013374:	d606                	sw	ra,44(sp)
20013376:	d422                	sw	s0,40(sp)
20013378:	1800                	addi	s0,sp,48
2001337a:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
2001337e:	fdc42503          	lw	a0,-36(s0)
20013382:	3571                	jal	2001320e <__metal_driver_sifive_plic0_control_base>
20013384:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20013388:	fec42703          	lw	a4,-20(s0)
2001338c:	002007b7          	lui	a5,0x200
20013390:	97ba                	add	a5,a5,a4
20013392:	439c                	lw	a5,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20013394:	853e                	mv	a0,a5
20013396:	50b2                	lw	ra,44(sp)
20013398:	5422                	lw	s0,40(sp)
2001339a:	6145                	addi	sp,sp,48
2001339c:	8082                	ret

2001339e <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
2001339e:	7179                	addi	sp,sp,-48
200133a0:	d606                	sw	ra,44(sp)
200133a2:	d422                	sw	s0,40(sp)
200133a4:	1800                	addi	s0,sp,48
200133a6:	fca42e23          	sw	a0,-36(s0)
200133aa:	fcb42c23          	sw	a1,-40(s0)
200133ae:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
200133b2:	fdc42503          	lw	a0,-36(s0)
200133b6:	3da1                	jal	2001320e <__metal_driver_sifive_plic0_control_base>
200133b8:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
200133bc:	fdc42503          	lw	a0,-36(s0)
200133c0:	354d                	jal	20013262 <__metal_driver_sifive_plic0_max_priority>
200133c2:	87aa                	mv	a5,a0
200133c4:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
200133c8:	fe842783          	lw	a5,-24(s0)
200133cc:	c785                	beqz	a5,200133f4 <__metal_plic0_set_priority+0x56>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
200133ce:	fd442703          	lw	a4,-44(s0)
200133d2:	fe842783          	lw	a5,-24(s0)
200133d6:	00f77f63          	bgeu	a4,a5,200133f4 <__metal_plic0_set_priority+0x56>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200133da:	fd842783          	lw	a5,-40(s0)
200133de:	078a                	slli	a5,a5,0x2
200133e0:	873e                	mv	a4,a5
200133e2:	fec42783          	lw	a5,-20(s0)
200133e6:	97ba                	add	a5,a5,a4
200133e8:	873e                	mv	a4,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
200133ea:	fd442783          	lw	a5,-44(s0)
200133ee:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
200133f0:	4781                	li	a5,0
200133f2:	a011                	j	200133f6 <__metal_plic0_set_priority+0x58>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
200133f4:	57fd                	li	a5,-1
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:55
}
200133f6:	853e                	mv	a0,a5
200133f8:	50b2                	lw	ra,44(sp)
200133fa:	5422                	lw	s0,40(sp)
200133fc:	6145                	addi	sp,sp,48
200133fe:	8082                	ret

20013400 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20013400:	7179                	addi	sp,sp,-48
20013402:	d606                	sw	ra,44(sp)
20013404:	d422                	sw	s0,40(sp)
20013406:	1800                	addi	s0,sp,48
20013408:	fca42e23          	sw	a0,-36(s0)
2001340c:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20013410:	fdc42503          	lw	a0,-36(s0)
20013414:	3bed                	jal	2001320e <__metal_driver_sifive_plic0_control_base>
20013416:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2001341a:	fd842783          	lw	a5,-40(s0)
2001341e:	078a                	slli	a5,a5,0x2
20013420:	873e                	mv	a4,a5
20013422:	fec42783          	lw	a5,-20(s0)
20013426:	97ba                	add	a5,a5,a4
20013428:	439c                	lw	a5,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
2001342a:	853e                	mv	a0,a5
2001342c:	50b2                	lw	ra,44(sp)
2001342e:	5422                	lw	s0,40(sp)
20013430:	6145                	addi	sp,sp,48
20013432:	8082                	ret

20013434 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20013434:	7179                	addi	sp,sp,-48
20013436:	d606                	sw	ra,44(sp)
20013438:	d422                	sw	s0,40(sp)
2001343a:	1800                	addi	s0,sp,48
2001343c:	fca42e23          	sw	a0,-36(s0)
20013440:	fcb42c23          	sw	a1,-40(s0)
20013444:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20013448:	fdc42503          	lw	a0,-36(s0)
2001344c:	33c9                	jal	2001320e <__metal_driver_sifive_plic0_control_base>
2001344e:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20013452:	fd842783          	lw	a5,-40(s0)
20013456:	8795                	srai	a5,a5,0x5
20013458:	078a                	slli	a5,a5,0x2
2001345a:	873e                	mv	a4,a5
2001345c:	fec42783          	lw	a5,-20(s0)
20013460:	973e                	add	a4,a4,a5
20013462:	6789                	lui	a5,0x2
20013464:	97ba                	add	a5,a5,a4
20013466:	439c                	lw	a5,0(a5)
20013468:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
2001346c:	fd442783          	lw	a5,-44(s0)
20013470:	cf81                	beqz	a5,20013488 <__metal_plic0_enable+0x54>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20013472:	fd842783          	lw	a5,-40(s0)
20013476:	8bfd                	andi	a5,a5,31
20013478:	4705                	li	a4,1
2001347a:	00f717b3          	sll	a5,a4,a5
2001347e:	873e                	mv	a4,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20013480:	fe842783          	lw	a5,-24(s0)
20013484:	8fd9                	or	a5,a5,a4
20013486:	a829                	j	200134a0 <__metal_plic0_enable+0x6c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20013488:	fd842783          	lw	a5,-40(s0)
2001348c:	8bfd                	andi	a5,a5,31
2001348e:	4705                	li	a4,1
20013490:	00f717b3          	sll	a5,a4,a5
20013494:	fff7c793          	not	a5,a5
20013498:	873e                	mv	a4,a5
2001349a:	fe842783          	lw	a5,-24(s0)
2001349e:	8ff9                	and	a5,a5,a4
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200134a0:	fd842703          	lw	a4,-40(s0)
200134a4:	8715                	srai	a4,a4,0x5
200134a6:	070a                	slli	a4,a4,0x2
200134a8:	86ba                	mv	a3,a4
200134aa:	fec42703          	lw	a4,-20(s0)
200134ae:	96ba                	add	a3,a3,a4
200134b0:	6709                	lui	a4,0x2
200134b2:	9736                	add	a4,a4,a3
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
200134b4:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:79
}
200134b6:	0001                	nop
200134b8:	50b2                	lw	ra,44(sp)
200134ba:	5422                	lw	s0,40(sp)
200134bc:	6145                	addi	sp,sp,48
200134be:	8082                	ret

200134c0 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
200134c0:	1101                	addi	sp,sp,-32
200134c2:	ce06                	sw	ra,28(sp)
200134c4:	cc22                	sw	s0,24(sp)
200134c6:	1000                	addi	s0,sp,32
200134c8:	fea42623          	sw	a0,-20(s0)
200134cc:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
200134d0:	12c00513          	li	a0,300
200134d4:	5cf010ef          	jal	ra,200152a2 <metal_shutdown>

200134d8 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
200134d8:	7179                	addi	sp,sp,-48
200134da:	d606                	sw	ra,44(sp)
200134dc:	d422                	sw	s0,40(sp)
200134de:	1800                	addi	s0,sp,48
200134e0:	fca42e23          	sw	a0,-36(s0)
200134e4:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
200134e8:	fd842783          	lw	a5,-40(s0)
200134ec:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
200134f0:	fec42503          	lw	a0,-20(s0)
200134f4:	33c5                	jal	200132d4 <__metal_plic0_claim_interrupt>
200134f6:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
200134fa:	fec42503          	lw	a0,-20(s0)
200134fe:	3b2d                	jal	20013238 <__metal_driver_sifive_plic0_num_interrupts>
20013500:	87aa                	mv	a5,a0
20013502:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20013506:	fe842703          	lw	a4,-24(s0)
2001350a:	fe442783          	lw	a5,-28(s0)
2001350e:	04f77263          	bgeu	a4,a5,20013552 <__metal_plic0_handler+0x7a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20013512:	fec42703          	lw	a4,-20(s0)
20013516:	fe842783          	lw	a5,-24(s0)
2001351a:	078a                	slli	a5,a5,0x2
2001351c:	97ba                	add	a5,a5,a4
2001351e:	479c                	lw	a5,8(a5)
20013520:	cb8d                	beqz	a5,20013552 <__metal_plic0_handler+0x7a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20013522:	fec42703          	lw	a4,-20(s0)
20013526:	fe842783          	lw	a5,-24(s0)
2001352a:	078a                	slli	a5,a5,0x2
2001352c:	97ba                	add	a5,a5,a4
2001352e:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20013532:	fe842603          	lw	a2,-24(s0)
20013536:	fec42683          	lw	a3,-20(s0)
2001353a:	fe842703          	lw	a4,-24(s0)
2001353e:	87ba                	mv	a5,a4
20013540:	0786                	slli	a5,a5,0x1
20013542:	97ba                	add	a5,a5,a4
20013544:	078e                	slli	a5,a5,0x3
20013546:	97b6                	add	a5,a5,a3
20013548:	0f07a783          	lw	a5,240(a5)
2001354c:	85be                	mv	a1,a5
2001354e:	8532                	mv	a0,a2
20013550:	9802                	jalr	a6
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20013552:	fe842583          	lw	a1,-24(s0)
20013556:	fec42503          	lw	a0,-20(s0)
2001355a:	3365                	jal	20013302 <__metal_plic0_complete_interrupt>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:97
}
2001355c:	0001                	nop
2001355e:	50b2                	lw	ra,44(sp)
20013560:	5422                	lw	s0,40(sp)
20013562:	6145                	addi	sp,sp,48
20013564:	8082                	ret

20013566 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20013566:	7139                	addi	sp,sp,-64
20013568:	de06                	sw	ra,60(sp)
2001356a:	dc22                	sw	s0,56(sp)
2001356c:	0080                	addi	s0,sp,64
2001356e:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20013572:	fcc42783          	lw	a5,-52(s0)
20013576:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
2001357a:	fe442783          	lw	a5,-28(s0)
2001357e:	43dc                	lw	a5,4(a5)
20013580:	10079c63          	bnez	a5,20013698 <__metal_driver_riscv_plic0_init+0x132>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20013584:	fe042623          	sw	zero,-20(s0)
20013588:	a201                	j	20013688 <__metal_driver_riscv_plic0_init+0x122>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
2001358a:	fcc42503          	lw	a0,-52(s0)
2001358e:	316d                	jal	20013238 <__metal_driver_sifive_plic0_num_interrupts>
20013590:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20013594:	fec42583          	lw	a1,-20(s0)
20013598:	fcc42503          	lw	a0,-52(s0)
2001359c:	31fd                	jal	2001328a <__metal_driver_sifive_plic0_interrupt_parents>
2001359e:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
200135a2:	fec42583          	lw	a1,-20(s0)
200135a6:	fcc42503          	lw	a0,-52(s0)
200135aa:	3321                	jal	200132b2 <__metal_driver_sifive_plic0_interrupt_lines>
200135ac:	fca42c23          	sw	a0,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
200135b0:	fdc42783          	lw	a5,-36(s0)
200135b4:	439c                	lw	a5,0(a5)
200135b6:	439c                	lw	a5,0(a5)
200135b8:	fdc42503          	lw	a0,-36(s0)
200135bc:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
200135be:	fe042423          	sw	zero,-24(s0)
200135c2:	a085                	j	20013622 <__metal_driver_riscv_plic0_init+0xbc>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
200135c4:	4601                	li	a2,0
200135c6:	fe842583          	lw	a1,-24(s0)
200135ca:	fe442503          	lw	a0,-28(s0)
200135ce:	359d                	jal	20013434 <__metal_plic0_enable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
200135d0:	4601                	li	a2,0
200135d2:	fe842583          	lw	a1,-24(s0)
200135d6:	fcc42503          	lw	a0,-52(s0)
200135da:	33d1                	jal	2001339e <__metal_plic0_set_priority>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
200135dc:	fe442703          	lw	a4,-28(s0)
200135e0:	fe842783          	lw	a5,-24(s0)
200135e4:	078a                	slli	a5,a5,0x2
200135e6:	97ba                	add	a5,a5,a4
200135e8:	0007a423          	sw	zero,8(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
200135ec:	fe442683          	lw	a3,-28(s0)
200135f0:	fe842703          	lw	a4,-24(s0)
200135f4:	87ba                	mv	a5,a4
200135f6:	0786                	slli	a5,a5,0x1
200135f8:	97ba                	add	a5,a5,a4
200135fa:	078e                	slli	a5,a5,0x3
200135fc:	97b6                	add	a5,a5,a3
200135fe:	0e07a623          	sw	zero,236(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20013602:	fe442683          	lw	a3,-28(s0)
20013606:	fe842703          	lw	a4,-24(s0)
2001360a:	87ba                	mv	a5,a4
2001360c:	0786                	slli	a5,a5,0x1
2001360e:	97ba                	add	a5,a5,a4
20013610:	078e                	slli	a5,a5,0x3
20013612:	97b6                	add	a5,a5,a3
20013614:	0e07a823          	sw	zero,240(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20013618:	fe842783          	lw	a5,-24(s0)
2001361c:	0785                	addi	a5,a5,1
2001361e:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20013622:	fe842703          	lw	a4,-24(s0)
20013626:	fe042783          	lw	a5,-32(s0)
2001362a:	f8f74de3          	blt	a4,a5,200135c4 <__metal_driver_riscv_plic0_init+0x5e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
2001362e:	4581                	li	a1,0
20013630:	fcc42503          	lw	a0,-52(s0)
20013634:	3319                	jal	2001333a <__metal_plic0_set_threshold>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20013636:	fdc42783          	lw	a5,-36(s0)
2001363a:	439c                	lw	a5,0(a5)
2001363c:	4fdc                	lw	a5,28(a5)
2001363e:	fe442683          	lw	a3,-28(s0)
20013642:	4601                	li	a2,0
20013644:	fd842583          	lw	a1,-40(s0)
20013648:	fdc42503          	lw	a0,-36(s0)
2001364c:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
2001364e:	fdc42783          	lw	a5,-36(s0)
20013652:	439c                	lw	a5,0(a5)
20013654:	4fd8                	lw	a4,28(a5)
20013656:	fe442683          	lw	a3,-28(s0)
2001365a:	200137b7          	lui	a5,0x20013
2001365e:	4d878613          	addi	a2,a5,1240 # 200134d8 <__metal_plic0_handler>
20013662:	fd842583          	lw	a1,-40(s0)
20013666:	fdc42503          	lw	a0,-36(s0)
2001366a:	9702                	jalr	a4
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
2001366c:	fdc42783          	lw	a5,-36(s0)
20013670:	439c                	lw	a5,0(a5)
20013672:	53dc                	lw	a5,36(a5)
20013674:	fd842583          	lw	a1,-40(s0)
20013678:	fdc42503          	lw	a0,-36(s0)
2001367c:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2001367e:	fec42783          	lw	a5,-20(s0)
20013682:	0785                	addi	a5,a5,1
20013684:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20013688:	fec42783          	lw	a5,-20(s0)
2001368c:	eef05fe3          	blez	a5,2001358a <__metal_driver_riscv_plic0_init+0x24>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20013690:	fe442783          	lw	a5,-28(s0)
20013694:	4705                	li	a4,1
20013696:	c3d8                	sw	a4,4(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20013698:	0001                	nop
2001369a:	50f2                	lw	ra,60(sp)
2001369c:	5462                	lw	s0,56(sp)
2001369e:	6121                	addi	sp,sp,64
200136a0:	8082                	ret

200136a2 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
200136a2:	7179                	addi	sp,sp,-48
200136a4:	d606                	sw	ra,44(sp)
200136a6:	d422                	sw	s0,40(sp)
200136a8:	1800                	addi	s0,sp,48
200136aa:	fca42e23          	sw	a0,-36(s0)
200136ae:	fcb42c23          	sw	a1,-40(s0)
200136b2:	fcc42a23          	sw	a2,-44(s0)
200136b6:	fcd42823          	sw	a3,-48(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
200136ba:	fdc42783          	lw	a5,-36(s0)
200136be:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
200136c2:	fdc42503          	lw	a0,-36(s0)
200136c6:	b73ff0ef          	jal	ra,20013238 <__metal_driver_sifive_plic0_num_interrupts>
200136ca:	872a                	mv	a4,a0
200136cc:	fd842783          	lw	a5,-40(s0)
200136d0:	00e7c463          	blt	a5,a4,200136d8 <__metal_driver_riscv_plic0_register+0x36>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
200136d4:	57fd                	li	a5,-1
200136d6:	a049                	j	20013758 <__metal_driver_riscv_plic0_register+0xb6>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
200136d8:	fd442783          	lw	a5,-44(s0)
200136dc:	cf95                	beqz	a5,20013718 <__metal_driver_riscv_plic0_register+0x76>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
200136de:	4609                	li	a2,2
200136e0:	fd842583          	lw	a1,-40(s0)
200136e4:	fdc42503          	lw	a0,-36(s0)
200136e8:	395d                	jal	2001339e <__metal_plic0_set_priority>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
200136ea:	fec42703          	lw	a4,-20(s0)
200136ee:	fd842783          	lw	a5,-40(s0)
200136f2:	078a                	slli	a5,a5,0x2
200136f4:	97ba                	add	a5,a5,a4
200136f6:	fd442703          	lw	a4,-44(s0)
200136fa:	c798                	sw	a4,8(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
200136fc:	fec42683          	lw	a3,-20(s0)
20013700:	fd842703          	lw	a4,-40(s0)
20013704:	87ba                	mv	a5,a4
20013706:	0786                	slli	a5,a5,0x1
20013708:	97ba                	add	a5,a5,a4
2001370a:	078e                	slli	a5,a5,0x3
2001370c:	97b6                	add	a5,a5,a3
2001370e:	fd042703          	lw	a4,-48(s0)
20013712:	0ee7a823          	sw	a4,240(a5)
20013716:	a081                	j	20013756 <__metal_driver_riscv_plic0_register+0xb4>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20013718:	4605                	li	a2,1
2001371a:	fd842583          	lw	a1,-40(s0)
2001371e:	fdc42503          	lw	a0,-36(s0)
20013722:	c7dff0ef          	jal	ra,2001339e <__metal_plic0_set_priority>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20013726:	fec42703          	lw	a4,-20(s0)
2001372a:	fd842783          	lw	a5,-40(s0)
2001372e:	078a                	slli	a5,a5,0x2
20013730:	97ba                	add	a5,a5,a4
20013732:	20013737          	lui	a4,0x20013
20013736:	4c070713          	addi	a4,a4,1216 # 200134c0 <__metal_plic0_default_handler>
2001373a:	c798                	sw	a4,8(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
2001373c:	fec42683          	lw	a3,-20(s0)
20013740:	fd842703          	lw	a4,-40(s0)
20013744:	87ba                	mv	a5,a4
20013746:	0786                	slli	a5,a5,0x1
20013748:	97ba                	add	a5,a5,a4
2001374a:	078e                	slli	a5,a5,0x3
2001374c:	97b6                	add	a5,a5,a3
2001374e:	fd042703          	lw	a4,-48(s0)
20013752:	0ee7a623          	sw	a4,236(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20013756:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:157
}
20013758:	853e                	mv	a0,a5
2001375a:	50b2                	lw	ra,44(sp)
2001375c:	5422                	lw	s0,40(sp)
2001375e:	6145                	addi	sp,sp,48
20013760:	8082                	ret

20013762 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20013762:	7179                	addi	sp,sp,-48
20013764:	d606                	sw	ra,44(sp)
20013766:	d422                	sw	s0,40(sp)
20013768:	1800                	addi	s0,sp,48
2001376a:	fca42e23          	sw	a0,-36(s0)
2001376e:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20013772:	fdc42783          	lw	a5,-36(s0)
20013776:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2001377a:	fdc42503          	lw	a0,-36(s0)
2001377e:	abbff0ef          	jal	ra,20013238 <__metal_driver_sifive_plic0_num_interrupts>
20013782:	872a                	mv	a4,a0
20013784:	fd842783          	lw	a5,-40(s0)
20013788:	00e7c463          	blt	a5,a4,20013790 <__metal_driver_riscv_plic0_enable+0x2e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2001378c:	57fd                	li	a5,-1
2001378e:	a809                	j	200137a0 <__metal_driver_riscv_plic0_enable+0x3e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20013790:	4605                	li	a2,1
20013792:	fd842583          	lw	a1,-40(s0)
20013796:	fec42503          	lw	a0,-20(s0)
2001379a:	c9bff0ef          	jal	ra,20013434 <__metal_plic0_enable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2001379e:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:169
}
200137a0:	853e                	mv	a0,a5
200137a2:	50b2                	lw	ra,44(sp)
200137a4:	5422                	lw	s0,40(sp)
200137a6:	6145                	addi	sp,sp,48
200137a8:	8082                	ret

200137aa <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
200137aa:	7179                	addi	sp,sp,-48
200137ac:	d606                	sw	ra,44(sp)
200137ae:	d422                	sw	s0,40(sp)
200137b0:	1800                	addi	s0,sp,48
200137b2:	fca42e23          	sw	a0,-36(s0)
200137b6:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
200137ba:	fdc42783          	lw	a5,-36(s0)
200137be:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
200137c2:	fdc42503          	lw	a0,-36(s0)
200137c6:	a73ff0ef          	jal	ra,20013238 <__metal_driver_sifive_plic0_num_interrupts>
200137ca:	872a                	mv	a4,a0
200137cc:	fd842783          	lw	a5,-40(s0)
200137d0:	00e7c463          	blt	a5,a4,200137d8 <__metal_driver_riscv_plic0_disable+0x2e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
200137d4:	57fd                	li	a5,-1
200137d6:	a809                	j	200137e8 <__metal_driver_riscv_plic0_disable+0x3e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
200137d8:	4601                	li	a2,0
200137da:	fd842583          	lw	a1,-40(s0)
200137de:	fec42503          	lw	a0,-20(s0)
200137e2:	c53ff0ef          	jal	ra,20013434 <__metal_plic0_enable>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
200137e6:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/riscv_plic0.c:180
}
200137e8:	853e                	mv	a0,a5
200137ea:	50b2                	lw	ra,44(sp)
200137ec:	5422                	lw	s0,40(sp)
200137ee:	6145                	addi	sp,sp,48
200137f0:	8082                	ret

200137f2 <__metal_driver_sifive_fe310_g000_hfrosc_ref>:
__metal_driver_sifive_fe310_g000_hfrosc_ref():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:911



/* --------------------- sifive_fe310_g000_hfrosc ------------ */
static __inline__ struct metal_clock * __metal_driver_sifive_fe310_g000_hfrosc_ref(const struct metal_clock *clock)
{
200137f2:	1101                	addi	sp,sp,-32
200137f4:	ce22                	sw	s0,28(sp)
200137f6:	1000                	addi	s0,sp,32
200137f8:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:912
		return (struct metal_clock *)&__metal_dt_clock_2.clock;
200137fc:	800007b7          	lui	a5,0x80000
20013800:	06c78793          	addi	a5,a5,108 # 8000006c <metal_segment_heap_target_end+0xffffe900>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:913
}
20013804:	853e                	mv	a0,a5
20013806:	4472                	lw	s0,28(sp)
20013808:	6105                	addi	sp,sp,32
2001380a:	8082                	ret

2001380c <__metal_driver_sifive_fe310_g000_hfrosc_config_base>:
__metal_driver_sifive_fe310_g000_hfrosc_config_base():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:916

static __inline__ struct __metal_driver_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_hfrosc_config_base(const struct metal_clock *clock)
{
2001380c:	1101                	addi	sp,sp,-32
2001380e:	ce22                	sw	s0,28(sp)
20013810:	1000                	addi	s0,sp,32
20013812:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:917
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20013816:	82018793          	addi	a5,gp,-2016 # 80000aa8 <__metal_dt_prci_10008000>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:918
}
2001381a:	853e                	mv	a0,a5
2001381c:	4472                	lw	s0,28(sp)
2001381e:	6105                	addi	sp,sp,32
20013820:	8082                	ret

20013822 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfrosc_config_offset():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:926
{
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
}

static __inline__ long __metal_driver_sifive_fe310_g000_hfrosc_config_offset(const struct metal_clock *clock)
{
20013822:	1101                	addi	sp,sp,-32
20013824:	ce22                	sw	s0,28(sp)
20013826:	1000                	addi	s0,sp,32
20013828:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:927
		return METAL_SIFIVE_FE310_G000_PRCI_HFROSCCFG;
2001382c:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:928
}
2001382e:	853e                	mv	a0,a5
20013830:	4472                	lw	s0,28(sp)
20013832:	6105                	addi	sp,sp,32
20013834:	8082                	ret

20013836 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1043
{
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_SIZE;
}

static __inline__ const struct __metal_driver_vtable_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_prci_vtable( )
{
20013836:	1141                	addi	sp,sp,-16
20013838:	c622                	sw	s0,12(sp)
2001383a:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
2001383c:	83418793          	addi	a5,gp,-1996 # 80000abc <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1045
}
20013840:	853e                	mv	a0,a5
20013842:	4432                	lw	s0,12(sp)
20013844:	0141                	addi	sp,sp,16
20013846:	8082                	ret

20013848 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:17
#define CONFIG_TRIM    0x001F0000UL
#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(const struct metal_clock *clock)
{
20013848:	7139                	addi	sp,sp,-64
2001384a:	de06                	sw	ra,60(sp)
2001384c:	dc22                	sw	s0,56(sp)
2001384e:	0080                	addi	s0,sp,64
20013850:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:18
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfrosc_ref(clock);
20013854:	fcc42503          	lw	a0,-52(s0)
20013858:	3f69                	jal	200137f2 <__metal_driver_sifive_fe310_g000_hfrosc_ref>
2001385a:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:19
    long config_offset = __metal_driver_sifive_fe310_g000_hfrosc_config_offset(clock);
2001385e:	fcc42503          	lw	a0,-52(s0)
20013862:	37c1                	jal	20013822 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>
20013864:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:21
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfrosc_config_base(clock);
20013868:	fcc42503          	lw	a0,-52(s0)
2001386c:	3745                	jal	2001380c <__metal_driver_sifive_fe310_g000_hfrosc_config_base>
2001386e:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:23
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20013872:	37d1                	jal	20013836 <__metal_driver_sifive_fe310_g000_prci_vtable>
20013874:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:24
    long cfg = vtable->get_reg(config_base, config_offset);
20013878:	fe042783          	lw	a5,-32(s0)
2001387c:	439c                	lw	a5,0(a5)
2001387e:	fe842583          	lw	a1,-24(s0)
20013882:	fe442503          	lw	a0,-28(s0)
20013886:	9782                	jalr	a5
20013888:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26

    if ((cfg & CONFIG_ENABLE) == 0)
2001388c:	fdc42703          	lw	a4,-36(s0)
20013890:	400007b7          	lui	a5,0x40000
20013894:	8ff9                	and	a5,a5,a4
20013896:	e399                	bnez	a5,2001389c <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x54>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:27
        return -1;
20013898:	57fd                	li	a5,-1
2001389a:	a025                	j	200138c2 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28
    if ((cfg & CONFIG_READY) == 0)
2001389c:	fdc42783          	lw	a5,-36(s0)
200138a0:	0007c463          	bltz	a5,200138a8 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x60>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:29
        return -1;
200138a4:	57fd                	li	a5,-1
200138a6:	a831                	j	200138c2 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:30
    return metal_clock_get_rate_hz(ref) / ((cfg & CONFIG_DIVIDER) + 1);
200138a8:	fec42503          	lw	a0,-20(s0)
200138ac:	0bd010ef          	jal	ra,20015168 <metal_clock_get_rate_hz>
200138b0:	87aa                	mv	a5,a0
200138b2:	873e                	mv	a4,a5
200138b4:	fdc42783          	lw	a5,-36(s0)
200138b8:	03f7f793          	andi	a5,a5,63
200138bc:	0785                	addi	a5,a5,1
200138be:	02f757b3          	divu	a5,a4,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:31
}
200138c2:	853e                	mv	a0,a5
200138c4:	50f2                	lw	ra,60(sp)
200138c6:	5462                	lw	s0,56(sp)
200138c8:	6121                	addi	sp,sp,64
200138ca:	8082                	ret

200138cc <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:34

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(struct metal_clock *clock, long rate)
{
200138cc:	1101                	addi	sp,sp,-32
200138ce:	ce06                	sw	ra,28(sp)
200138d0:	cc22                	sw	s0,24(sp)
200138d2:	1000                	addi	s0,sp,32
200138d4:	fea42623          	sw	a0,-20(s0)
200138d8:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:35
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
200138dc:	fec42503          	lw	a0,-20(s0)
200138e0:	37a5                	jal	20013848 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
200138e2:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:36
}
200138e4:	853e                	mv	a0,a5
200138e6:	40f2                	lw	ra,28(sp)
200138e8:	4462                	lw	s0,24(sp)
200138ea:	6105                	addi	sp,sp,32
200138ec:	8082                	ret

200138ee <__metal_driver_sifive_fe310_g000_hfxosc_ref>:
__metal_driver_sifive_fe310_g000_hfxosc_ref():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:934
{
200138ee:	1101                	addi	sp,sp,-32
200138f0:	ce22                	sw	s0,28(sp)
200138f2:	1000                	addi	s0,sp,32
200138f4:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:935
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
200138f8:	800007b7          	lui	a5,0x80000
200138fc:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffe8f4>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:936
}
20013900:	853e                	mv	a0,a5
20013902:	4472                	lw	s0,28(sp)
20013904:	6105                	addi	sp,sp,32
20013906:	8082                	ret

20013908 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>:
__metal_driver_sifive_fe310_g000_hfxosc_config_base():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:939
{
20013908:	1101                	addi	sp,sp,-32
2001390a:	ce22                	sw	s0,28(sp)
2001390c:	1000                	addi	s0,sp,32
2001390e:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:940
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20013912:	82018793          	addi	a5,gp,-2016 # 80000aa8 <__metal_dt_prci_10008000>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:941
}
20013916:	853e                	mv	a0,a5
20013918:	4472                	lw	s0,28(sp)
2001391a:	6105                	addi	sp,sp,32
2001391c:	8082                	ret

2001391e <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfxosc_config_offset():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:944
{
2001391e:	1101                	addi	sp,sp,-32
20013920:	ce22                	sw	s0,28(sp)
20013922:	1000                	addi	s0,sp,32
20013924:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:945
		return METAL_SIFIVE_FE310_G000_PRCI_HFXOSCCFG;
20013928:	4791                	li	a5,4
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:946
}
2001392a:	853e                	mv	a0,a5
2001392c:	4472                	lw	s0,28(sp)
2001392e:	6105                	addi	sp,sp,32
20013930:	8082                	ret

20013932 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1043
{
20013932:	1141                	addi	sp,sp,-16
20013934:	c622                	sw	s0,12(sp)
20013936:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20013938:	83418793          	addi	a5,gp,-1996 # 80000abc <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1045
}
2001393c:	853e                	mv	a0,a5
2001393e:	4432                	lw	s0,12(sp)
20013940:	0141                	addi	sp,sp,16
20013942:	8082                	ret

20013944 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:15

#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(const struct metal_clock *clock)
{
20013944:	7139                	addi	sp,sp,-64
20013946:	de06                	sw	ra,60(sp)
20013948:	dc22                	sw	s0,56(sp)
2001394a:	0080                	addi	s0,sp,64
2001394c:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:16
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfxosc_ref(clock);
20013950:	fcc42503          	lw	a0,-52(s0)
20013954:	3f69                	jal	200138ee <__metal_driver_sifive_fe310_g000_hfxosc_ref>
20013956:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:17
    long config_offset = __metal_driver_sifive_fe310_g000_hfxosc_config_offset(clock);
2001395a:	fcc42503          	lw	a0,-52(s0)
2001395e:	37c1                	jal	2001391e <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>
20013960:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:19
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfxosc_config_base(clock);
20013964:	fcc42503          	lw	a0,-52(s0)
20013968:	3745                	jal	20013908 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>
2001396a:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:21
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
2001396e:	37d1                	jal	20013932 <__metal_driver_sifive_fe310_g000_prci_vtable>
20013970:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:22
    long cfg = vtable->get_reg(config_base, config_offset);
20013974:	fe042783          	lw	a5,-32(s0)
20013978:	439c                	lw	a5,0(a5)
2001397a:	fe842583          	lw	a1,-24(s0)
2001397e:	fe442503          	lw	a0,-28(s0)
20013982:	9782                	jalr	a5
20013984:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24

    if ((cfg & CONFIG_ENABLE) == 0)
20013988:	fdc42703          	lw	a4,-36(s0)
2001398c:	400007b7          	lui	a5,0x40000
20013990:	8ff9                	and	a5,a5,a4
20013992:	e399                	bnez	a5,20013998 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x54>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:25
        return -1;
20013994:	57fd                	li	a5,-1
20013996:	a821                	j	200139ae <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:26
    if ((cfg & CONFIG_READY) == 0)
20013998:	fdc42783          	lw	a5,-36(s0)
2001399c:	0007c463          	bltz	a5,200139a4 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x60>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:27
        return -1;
200139a0:	57fd                	li	a5,-1
200139a2:	a031                	j	200139ae <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:28
    return metal_clock_get_rate_hz(ref);
200139a4:	fec42503          	lw	a0,-20(s0)
200139a8:	7c0010ef          	jal	ra,20015168 <metal_clock_get_rate_hz>
200139ac:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:29
}
200139ae:	853e                	mv	a0,a5
200139b0:	50f2                	lw	ra,60(sp)
200139b2:	5462                	lw	s0,56(sp)
200139b4:	6121                	addi	sp,sp,64
200139b6:	8082                	ret

200139b8 <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:32

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(struct metal_clock *clock, long rate)
{
200139b8:	1101                	addi	sp,sp,-32
200139ba:	ce06                	sw	ra,28(sp)
200139bc:	cc22                	sw	s0,24(sp)
200139be:	1000                	addi	s0,sp,32
200139c0:	fea42623          	sw	a0,-20(s0)
200139c4:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:33
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
200139c8:	fec42503          	lw	a0,-20(s0)
200139cc:	3fa5                	jal	20013944 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
200139ce:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:34
}
200139d0:	853e                	mv	a0,a5
200139d2:	40f2                	lw	ra,28(sp)
200139d4:	4462                	lw	s0,24(sp)
200139d6:	6105                	addi	sp,sp,32
200139d8:	8082                	ret

200139da <__metal_driver_sifive_fe310_g000_pll_pllsel0>:
__metal_driver_sifive_fe310_g000_pll_pllsel0():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:995
{
200139da:	1101                	addi	sp,sp,-32
200139dc:	ce22                	sw	s0,28(sp)
200139de:	1000                	addi	s0,sp,32
200139e0:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:996
		return (struct metal_clock *)&__metal_dt_clock_3.clock;
200139e4:	800017b7          	lui	a5,0x80001
200139e8:	a6078793          	addi	a5,a5,-1440 # 80000a60 <metal_segment_heap_target_end+0xfffff2f4>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:997
}
200139ec:	853e                	mv	a0,a5
200139ee:	4472                	lw	s0,28(sp)
200139f0:	6105                	addi	sp,sp,32
200139f2:	8082                	ret

200139f4 <__metal_driver_sifive_fe310_g000_pll_pllref>:
__metal_driver_sifive_fe310_g000_pll_pllref():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1000
{
200139f4:	1101                	addi	sp,sp,-32
200139f6:	ce22                	sw	s0,28(sp)
200139f8:	1000                	addi	s0,sp,32
200139fa:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1001
		return (struct metal_clock *)&__metal_dt_clock_1.clock;
200139fe:	800017b7          	lui	a5,0x80001
20013a02:	a6c78793          	addi	a5,a5,-1428 # 80000a6c <metal_segment_heap_target_end+0xfffff300>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1002
}
20013a06:	853e                	mv	a0,a5
20013a08:	4472                	lw	s0,28(sp)
20013a0a:	6105                	addi	sp,sp,32
20013a0c:	8082                	ret

20013a0e <__metal_driver_sifive_fe310_g000_pll_divider_base>:
__metal_driver_sifive_fe310_g000_pll_divider_base():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1005
{
20013a0e:	1101                	addi	sp,sp,-32
20013a10:	ce22                	sw	s0,28(sp)
20013a12:	1000                	addi	s0,sp,32
20013a14:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1006
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20013a18:	82018793          	addi	a5,gp,-2016 # 80000aa8 <__metal_dt_prci_10008000>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1007
}
20013a1c:	853e                	mv	a0,a5
20013a1e:	4472                	lw	s0,28(sp)
20013a20:	6105                	addi	sp,sp,32
20013a22:	8082                	ret

20013a24 <__metal_driver_sifive_fe310_g000_pll_divider_offset>:
__metal_driver_sifive_fe310_g000_pll_divider_offset():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1010
{
20013a24:	1101                	addi	sp,sp,-32
20013a26:	ce22                	sw	s0,28(sp)
20013a28:	1000                	addi	s0,sp,32
20013a2a:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1011
		return METAL_SIFIVE_FE310_G000_PRCI_PLLOUTDIV;
20013a2e:	47b1                	li	a5,12
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1012
}
20013a30:	853e                	mv	a0,a5
20013a32:	4472                	lw	s0,28(sp)
20013a34:	6105                	addi	sp,sp,32
20013a36:	8082                	ret

20013a38 <__metal_driver_sifive_fe310_g000_pll_config_base>:
__metal_driver_sifive_fe310_g000_pll_config_base():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1015
{
20013a38:	1141                	addi	sp,sp,-16
20013a3a:	c622                	sw	s0,12(sp)
20013a3c:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1016
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20013a3e:	82018793          	addi	a5,gp,-2016 # 80000aa8 <__metal_dt_prci_10008000>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1017
}
20013a42:	853e                	mv	a0,a5
20013a44:	4432                	lw	s0,12(sp)
20013a46:	0141                	addi	sp,sp,16
20013a48:	8082                	ret

20013a4a <__metal_driver_sifive_fe310_g000_pll_config_offset>:
__metal_driver_sifive_fe310_g000_pll_config_offset():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1020
{
20013a4a:	1141                	addi	sp,sp,-16
20013a4c:	c622                	sw	s0,12(sp)
20013a4e:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1021
		return METAL_SIFIVE_FE310_G000_PRCI_PLLCFG;
20013a50:	47a1                	li	a5,8
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1022
}
20013a52:	853e                	mv	a0,a5
20013a54:	4432                	lw	s0,12(sp)
20013a56:	0141                	addi	sp,sp,16
20013a58:	8082                	ret

20013a5a <__metal_driver_sifive_fe310_g000_pll_init_rate>:
__metal_driver_sifive_fe310_g000_pll_init_rate():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1025
{
20013a5a:	1141                	addi	sp,sp,-16
20013a5c:	c622                	sw	s0,12(sp)
20013a5e:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1026
		return 16000000;
20013a60:	00f427b7          	lui	a5,0xf42
20013a64:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1027
}
20013a68:	853e                	mv	a0,a5
20013a6a:	4432                	lw	s0,12(sp)
20013a6c:	0141                	addi	sp,sp,16
20013a6e:	8082                	ret

20013a70 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1033
{
20013a70:	1141                	addi	sp,sp,-16
20013a72:	c622                	sw	s0,12(sp)
20013a74:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1034
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20013a76:	100087b7          	lui	a5,0x10008
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1035
}
20013a7a:	853e                	mv	a0,a5
20013a7c:	4432                	lw	s0,12(sp)
20013a7e:	0141                	addi	sp,sp,16
20013a80:	8082                	ret

20013a82 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1043
{
20013a82:	1141                	addi	sp,sp,-16
20013a84:	c622                	sw	s0,12(sp)
20013a86:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20013a88:	83418793          	addi	a5,gp,-1996 # 80000abc <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1045
}
20013a8c:	853e                	mv	a0,a5
20013a8e:	4432                	lw	s0,12(sp)
20013a90:	0141                	addi	sp,sp,16
20013a92:	8082                	ret

20013a94 <get_pll_config_freq>:
get_pll_config_freq():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:137
 *  - config the PLL configuration
 * Returns:
 *  - PLL_CONFIG_NOT_VALID if the configuration is not valid for the input frequency
 *  - the output frequency, in hertz */
static long get_pll_config_freq(unsigned long pll_input_rate, const struct pll_config_t *config)
{
20013a94:	1101                	addi	sp,sp,-32
20013a96:	ce22                	sw	s0,28(sp)
20013a98:	1000                	addi	s0,sp,32
20013a9a:	fea42623          	sw	a0,-20(s0)
20013a9e:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138
    if(pll_input_rate < config->min_input_rate || pll_input_rate > config->max_input_rate)
20013aa2:	fe842783          	lw	a5,-24(s0)
20013aa6:	479c                	lw	a5,8(a5)
20013aa8:	fec42703          	lw	a4,-20(s0)
20013aac:	00f76963          	bltu	a4,a5,20013abe <get_pll_config_freq+0x2a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138 (discriminator 1)
20013ab0:	fe842783          	lw	a5,-24(s0)
20013ab4:	47dc                	lw	a5,12(a5)
20013ab6:	fec42703          	lw	a4,-20(s0)
20013aba:	00e7f463          	bgeu	a5,a4,20013ac2 <get_pll_config_freq+0x2e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:139
        return PLL_CONFIG_NOT_VALID;
20013abe:	57fd                	li	a5,-1
20013ac0:	a829                	j	20013ada <get_pll_config_freq+0x46>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:141

    return pll_input_rate * config->multiplier / config->divisor;
20013ac2:	fe842783          	lw	a5,-24(s0)
20013ac6:	4398                	lw	a4,0(a5)
20013ac8:	fec42783          	lw	a5,-20(s0)
20013acc:	02f70733          	mul	a4,a4,a5
20013ad0:	fe842783          	lw	a5,-24(s0)
20013ad4:	43dc                	lw	a5,4(a5)
20013ad6:	02f757b3          	divu	a5,a4,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142
}
20013ada:	853e                	mv	a0,a5
20013adc:	4472                	lw	s0,28(sp)
20013ade:	6105                	addi	sp,sp,32
20013ae0:	8082                	ret

20013ae2 <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:147

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE

static void metal_sifive_fe310_g000_pll_init(void) __attribute__((constructor));
static void metal_sifive_fe310_g000_pll_init(void) {
20013ae2:	1101                	addi	sp,sp,-32
20013ae4:	ce06                	sw	ra,28(sp)
20013ae6:	cc22                	sw	s0,24(sp)
20013ae8:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:148
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20013aea:	3f85                	jal	20013a5a <__metal_driver_sifive_fe310_g000_pll_init_rate>
20013aec:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:150
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if(init_rate != 0)
20013af0:	fec42783          	lw	a5,-20(s0)
20013af4:	c791                	beqz	a5,20013b00 <metal_sifive_fe310_g000_pll_init+0x1e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:151
        __metal_driver_sifive_fe310_g000_pll_init(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE);
20013af6:	800017b7          	lui	a5,0x80001
20013afa:	a7878513          	addi	a0,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xfffff30c>
20013afe:	2031                	jal	20013b0a <__metal_driver_sifive_fe310_g000_pll_init>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:152
}
20013b00:	0001                	nop
20013b02:	40f2                	lw	ra,28(sp)
20013b04:	4462                	lw	s0,24(sp)
20013b06:	6105                	addi	sp,sp,32
20013b08:	8082                	ret

20013b0a <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:156

#endif /* __METAL_DT_SIFIVE_FE310_G000__PLL_HANDLE */

void __metal_driver_sifive_fe310_g000_pll_init(struct __metal_driver_sifive_fe310_g000_pll *pll) {
20013b0a:	7139                	addi	sp,sp,-64
20013b0c:	de06                	sw	ra,60(sp)
20013b0e:	dc22                	sw	s0,56(sp)
20013b10:	0080                	addi	s0,sp,64
20013b12:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:157
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(&(pll->clock));
20013b16:	fcc42783          	lw	a5,-52(s0)
20013b1a:	853e                	mv	a0,a5
20013b1c:	3de1                	jal	200139f4 <__metal_driver_sifive_fe310_g000_pll_pllref>
20013b1e:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:158
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20013b22:	3f25                	jal	20013a5a <__metal_driver_sifive_fe310_g000_pll_init_rate>
20013b24:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:159
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset();
20013b28:	370d                	jal	20013a4a <__metal_driver_sifive_fe310_g000_pll_config_offset>
20013b2a:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:160
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20013b2e:	3789                	jal	20013a70 <__metal_driver_sifive_fe310_g000_prci_base>
20013b30:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:162

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
20013b34:	fe042703          	lw	a4,-32(s0)
20013b38:	fe442783          	lw	a5,-28(s0)
20013b3c:	97ba                	add	a5,a5,a4
20013b3e:	fcf42e23          	sw	a5,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:165

    /* If the PLL clock has had a _pre_rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
20013b42:	fcc42783          	lw	a5,-52(s0)
20013b46:	43dc                	lw	a5,4(a5)
20013b48:	853e                	mv	a0,a5
20013b4a:	58a010ef          	jal	ra,200150d4 <_metal_clock_call_all_callbacks>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:168

    /* If we're running off of the PLL, switch off before we start configuring it*/
    if((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) == 0)
20013b4e:	fdc42783          	lw	a5,-36(s0)
20013b52:	4398                	lw	a4,0(a5)
20013b54:	67c1                	lui	a5,0x10
20013b56:	8ff9                	and	a5,a5,a4
20013b58:	eb91                	bnez	a5,20013b6c <__metal_driver_sifive_fe310_g000_pll_init+0x62>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:169
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20013b5a:	fdc42783          	lw	a5,-36(s0)
20013b5e:	4398                	lw	a4,0(a5)
20013b60:	77c1                	lui	a5,0xffff0
20013b62:	17fd                	addi	a5,a5,-1
20013b64:	8f7d                	and	a4,a4,a5
20013b66:	fdc42783          	lw	a5,-36(s0)
20013b6a:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:172

    /* Make sure we're running off of the external oscillator for stability */
    if(pllref != NULL)
20013b6c:	fec42783          	lw	a5,-20(s0)
20013b70:	cb91                	beqz	a5,20013b84 <__metal_driver_sifive_fe310_g000_pll_init+0x7a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:173
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
20013b72:	fdc42783          	lw	a5,-36(s0)
20013b76:	4398                	lw	a4,0(a5)
20013b78:	000207b7          	lui	a5,0x20
20013b7c:	8f5d                	or	a4,a4,a5
20013b7e:	fdc42783          	lw	a5,-36(s0)
20013b82:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:178

    /* Configure the PLL to run at the requested init frequency.
     * Using the vtable instead of the user API because we want to control
     * when the callbacks occur. */
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
20013b84:	fcc42783          	lw	a5,-52(s0)
20013b88:	439c                	lw	a5,0(a5)
20013b8a:	43d8                	lw	a4,4(a5)
20013b8c:	fcc42783          	lw	a5,-52(s0)
20013b90:	fe842583          	lw	a1,-24(s0)
20013b94:	853e                	mv	a0,a5
20013b96:	9702                	jalr	a4
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:181

    /* If the PLL clock has had a rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
20013b98:	fcc42783          	lw	a5,-52(s0)
20013b9c:	479c                	lw	a5,8(a5)
20013b9e:	853e                	mv	a0,a5
20013ba0:	534010ef          	jal	ra,200150d4 <_metal_clock_call_all_callbacks>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:182
}
20013ba4:	0001                	nop
20013ba6:	50f2                	lw	ra,60(sp)
20013ba8:	5462                	lw	s0,56(sp)
20013baa:	6121                	addi	sp,sp,64
20013bac:	8082                	ret

20013bae <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:185

long __metal_driver_sifive_fe310_g000_pll_get_rate_hz(const struct metal_clock *clock)
{
20013bae:	711d                	addi	sp,sp,-96
20013bb0:	ce86                	sw	ra,92(sp)
20013bb2:	cca2                	sw	s0,88(sp)
20013bb4:	1080                	addi	s0,sp,96
20013bb6:	faa42623          	sw	a0,-84(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:186
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20013bba:	fac42503          	lw	a0,-84(s0)
20013bbe:	3d1d                	jal	200139f4 <__metal_driver_sifive_fe310_g000_pll_pllref>
20013bc0:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:187
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20013bc4:	fac42503          	lw	a0,-84(s0)
20013bc8:	3d09                	jal	200139da <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20013bca:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:188
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20013bce:	fac42503          	lw	a0,-84(s0)
20013bd2:	3da5                	jal	20013a4a <__metal_driver_sifive_fe310_g000_pll_config_offset>
20013bd4:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_pll_config_base(clock);
20013bd8:	fac42503          	lw	a0,-84(s0)
20013bdc:	3db1                	jal	20013a38 <__metal_driver_sifive_fe310_g000_pll_config_base>
20013bde:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:191
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20013be2:	fac42503          	lw	a0,-84(s0)
20013be6:	3d3d                	jal	20013a24 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20013be8:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:193
    struct __metal_driver_sifive_fe310_g000_prci *divider_base =
      __metal_driver_sifive_fe310_g000_pll_divider_base(clock);
20013bec:	fac42503          	lw	a0,-84(s0)
20013bf0:	3d39                	jal	20013a0e <__metal_driver_sifive_fe310_g000_pll_divider_base>
20013bf2:	fca42c23          	sw	a0,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:195
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20013bf6:	3571                	jal	20013a82 <__metal_driver_sifive_fe310_g000_prci_vtable>
20013bf8:	fca42a23          	sw	a0,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:197

    long cfg = vtable->get_reg(config_base, config_offset);
20013bfc:	fd442783          	lw	a5,-44(s0)
20013c00:	439c                	lw	a5,0(a5)
20013c02:	fe442583          	lw	a1,-28(s0)
20013c06:	fe042503          	lw	a0,-32(s0)
20013c0a:	9782                	jalr	a5
20013c0c:	fca42823          	sw	a0,-48(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:198
    long div = vtable->get_reg(divider_base, divider_offset);
20013c10:	fd442783          	lw	a5,-44(s0)
20013c14:	439c                	lw	a5,0(a5)
20013c16:	fdc42583          	lw	a1,-36(s0)
20013c1a:	fd842503          	lw	a0,-40(s0)
20013c1e:	9782                	jalr	a5
20013c20:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:202

    /* At the end of the PLL there's one big mux: it either selects the HFROSC
     * (bypassing the PLL entirely) or uses the PLL. */
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
20013c24:	fd042703          	lw	a4,-48(s0)
20013c28:	67c1                	lui	a5,0x10
20013c2a:	8f7d                	and	a4,a4,a5
20013c2c:	67c1                	lui	a5,0x10
20013c2e:	00f77863          	bgeu	a4,a5,20013c3e <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x90>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:203
        return metal_clock_get_rate_hz(pllsel0);
20013c32:	fe842503          	lw	a0,-24(s0)
20013c36:	532010ef          	jal	ra,20015168 <metal_clock_get_rate_hz>
20013c3a:	87aa                	mv	a5,a0
20013c3c:	a8e1                	j	20013d14 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207

    /* There's a clock mux before the PLL that selects between the HFROSC adn
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_GET_FIELD(cfg, PLL_REFSEL) ? pllref : pllsel0);
20013c3e:	fd042703          	lw	a4,-48(s0)
20013c42:	000207b7          	lui	a5,0x20
20013c46:	8f7d                	and	a4,a4,a5
20013c48:	000207b7          	lui	a5,0x20
20013c4c:	00f76563          	bltu	a4,a5,20013c56 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xa8>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 1)
20013c50:	fec42783          	lw	a5,-20(s0)
20013c54:	a019                	j	20013c5a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xac>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 2)
20013c56:	fe842783          	lw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 4)
20013c5a:	853e                	mv	a0,a5
20013c5c:	50c010ef          	jal	ra,20015168 <metal_clock_get_rate_hz>
20013c60:	fca42423          	sw	a0,-56(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:211 (discriminator 4)

    /* It's possible to bypass the PLL, which is an internal bpyass.  This
     * still obays the PLL's input clock mu. */
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
20013c64:	fd042703          	lw	a4,-48(s0)
20013c68:	000407b7          	lui	a5,0x40
20013c6c:	8f7d                	and	a4,a4,a5
20013c6e:	000407b7          	lui	a5,0x40
20013c72:	00f76563          	bltu	a4,a5,20013c7c <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xce>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:212
        return ref_hz;
20013c76:	fc842783          	lw	a5,-56(s0)
20013c7a:	a869                	j	20013d14 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:215

    /* Logically the PLL is a three stage div-mul-div. */
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
20013c7c:	fd042783          	lw	a5,-48(s0)
20013c80:	8b9d                	andi	a5,a5,7
20013c82:	0785                	addi	a5,a5,1
20013c84:	fcf42223          	sw	a5,-60(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:216
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
20013c88:	fd042783          	lw	a5,-48(s0)
20013c8c:	3f07f793          	andi	a5,a5,1008
20013c90:	8391                	srli	a5,a5,0x4
20013c92:	0785                	addi	a5,a5,1
20013c94:	0786                	slli	a5,a5,0x1
20013c96:	fcf42023          	sw	a5,-64(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:217
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
20013c9a:	fd042703          	lw	a4,-48(s0)
20013c9e:	6785                	lui	a5,0x1
20013ca0:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20013ca4:	8f7d                	and	a4,a4,a5
20013ca6:	3ff00793          	li	a5,1023
20013caa:	00e7e463          	bltu	a5,a4,20013cb2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x104>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:218
        return -1;
20013cae:	57fd                	li	a5,-1
20013cb0:	a095                	j	20013d14 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
20013cb2:	fd042703          	lw	a4,-48(s0)
20013cb6:	6785                	lui	a5,0x1
20013cb8:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20013cbc:	8ff9                	and	a5,a5,a4
20013cbe:	83a9                	srli	a5,a5,0xa
20013cc0:	4705                	li	a4,1
20013cc2:	00f717b3          	sll	a5,a4,a5
20013cc6:	faf42e23          	sw	a5,-68(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:224

    /* In addition to the dividers inherent in the PLL, there's an additional
     * clock divider that lives after the PLL and lets us pick a more
     * interesting range of frequencies. */
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
20013cca:	fc842703          	lw	a4,-56(s0)
20013cce:	fc442783          	lw	a5,-60(s0)
20013cd2:	02f74733          	div	a4,a4,a5
20013cd6:	fc042783          	lw	a5,-64(s0)
20013cda:	02f70733          	mul	a4,a4,a5
20013cde:	fbc42783          	lw	a5,-68(s0)
20013ce2:	02f747b3          	div	a5,a4,a5
20013ce6:	faf42c23          	sw	a5,-72(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:225
    if (__METAL_GET_FIELD(div, DIV_1))
20013cea:	fcc42783          	lw	a5,-52(s0)
20013cee:	1007f713          	andi	a4,a5,256
20013cf2:	0ff00793          	li	a5,255
20013cf6:	00e7f563          	bgeu	a5,a4,20013d00 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x152>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:226
        return pllout;
20013cfa:	fb842783          	lw	a5,-72(s0)
20013cfe:	a819                	j	20013d14 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x166>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:228

    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
20013d00:	fb842703          	lw	a4,-72(s0)
20013d04:	fcc42783          	lw	a5,-52(s0)
20013d08:	03f7f793          	andi	a5,a5,63
20013d0c:	0785                	addi	a5,a5,1
20013d0e:	0786                	slli	a5,a5,0x1
20013d10:	02f757b3          	divu	a5,a4,a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
}
20013d14:	853e                	mv	a0,a5
20013d16:	40f6                	lw	ra,92(sp)
20013d18:	4466                	lw	s0,88(sp)
20013d1a:	6125                	addi	sp,sp,96
20013d1c:	8082                	ret

20013d1e <find_closest_config>:
find_closest_config():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:240
 *  - rate desired PLL output frequency
 * Returns:
 *  -1 if no valid configuration is available
 *  the index into pll_configs of a valid configuration */
static int find_closest_config(long ref_hz, long rate)
{
20013d1e:	7139                	addi	sp,sp,-64
20013d20:	de06                	sw	ra,60(sp)
20013d22:	dc22                	sw	s0,56(sp)
20013d24:	0080                	addi	s0,sp,64
20013d26:	fca42623          	sw	a0,-52(s0)
20013d2a:	fcb42423          	sw	a1,-56(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:241
    int closest_index = -1;
20013d2e:	57fd                	li	a5,-1
20013d30:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:242
    long closest_diff = LONG_MAX;
20013d34:	800007b7          	lui	a5,0x80000
20013d38:	fff7c793          	not	a5,a5
20013d3c:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246

    /* We're probably trying for a fast output frequency, so start from
     * the high end of the configs. */
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20013d40:	04300793          	li	a5,67
20013d44:	fef42223          	sw	a5,-28(s0)
20013d48:	a0b5                	j	20013db4 <find_closest_config+0x96>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:248
    {
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
20013d4a:	fcc42683          	lw	a3,-52(s0)
20013d4e:	fe442783          	lw	a5,-28(s0)
20013d52:	00579713          	slli	a4,a5,0x5
20013d56:	200157b7          	lui	a5,0x20015
20013d5a:	76878793          	addi	a5,a5,1896 # 20015768 <pll_configs>
20013d5e:	97ba                	add	a5,a5,a4
20013d60:	85be                	mv	a1,a5
20013d62:	8536                	mv	a0,a3
20013d64:	d31ff0ef          	jal	ra,20013a94 <get_pll_config_freq>
20013d68:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:249
        if(config_freq != PLL_CONFIG_NOT_VALID)
20013d6c:	fe042703          	lw	a4,-32(s0)
20013d70:	57fd                	li	a5,-1
20013d72:	02f70c63          	beq	a4,a5,20013daa <find_closest_config+0x8c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:251
        {
            long freq_diff = abs(config_freq - rate);
20013d76:	fe042703          	lw	a4,-32(s0)
20013d7a:	fc842783          	lw	a5,-56(s0)
20013d7e:	8f1d                	sub	a4,a4,a5
20013d80:	41f75793          	srai	a5,a4,0x1f
20013d84:	8f3d                	xor	a4,a4,a5
20013d86:	40f707b3          	sub	a5,a4,a5
20013d8a:	fcf42e23          	sw	a5,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:252
            if(freq_diff < closest_diff)
20013d8e:	fdc42703          	lw	a4,-36(s0)
20013d92:	fe842783          	lw	a5,-24(s0)
20013d96:	00f75a63          	bge	a4,a5,20013daa <find_closest_config+0x8c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:254
            {
                closest_index = i;
20013d9a:	fe442783          	lw	a5,-28(s0)
20013d9e:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:255
                closest_diff = freq_diff;
20013da2:	fdc42783          	lw	a5,-36(s0)
20013da6:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 2)
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20013daa:	fe442783          	lw	a5,-28(s0)
20013dae:	17fd                	addi	a5,a5,-1
20013db0:	fef42223          	sw	a5,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 1)
20013db4:	fe442783          	lw	a5,-28(s0)
20013db8:	f807d9e3          	bgez	a5,20013d4a <find_closest_config+0x2c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:260
            }
        }
    }

    return closest_index;
20013dbc:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:261
}
20013dc0:	853e                	mv	a0,a5
20013dc2:	50f2                	lw	ra,60(sp)
20013dc4:	5462                	lw	s0,56(sp)
20013dc6:	6121                	addi	sp,sp,64
20013dc8:	8082                	ret

20013dca <configure_pll>:
configure_pll():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:265

/* Configure the PLL and wait for it to lock */
static void configure_pll(__metal_io_u32 *pllcfg, __metal_io_u32 *plloutdiv, const struct pll_config_t *config)
{
20013dca:	1101                	addi	sp,sp,-32
20013dcc:	ce22                	sw	s0,28(sp)
20013dce:	1000                	addi	s0,sp,32
20013dd0:	fea42623          	sw	a0,-20(s0)
20013dd4:	feb42423          	sw	a1,-24(s0)
20013dd8:	fec42223          	sw	a2,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:266
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
20013ddc:	fec42783          	lw	a5,-20(s0)
20013de0:	439c                	lw	a5,0(a5)
20013de2:	ff87f713          	andi	a4,a5,-8
20013de6:	fec42783          	lw	a5,-20(s0)
20013dea:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:267
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
20013dec:	fec42783          	lw	a5,-20(s0)
20013df0:	4398                	lw	a4,0(a5)
20013df2:	fe442783          	lw	a5,-28(s0)
20013df6:	4b9c                	lw	a5,16(a5)
20013df8:	8b9d                	andi	a5,a5,7
20013dfa:	8f5d                	or	a4,a4,a5
20013dfc:	fec42783          	lw	a5,-20(s0)
20013e00:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:269

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
20013e02:	fec42783          	lw	a5,-20(s0)
20013e06:	439c                	lw	a5,0(a5)
20013e08:	c0f7f713          	andi	a4,a5,-1009
20013e0c:	fec42783          	lw	a5,-20(s0)
20013e10:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:270
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
20013e12:	fec42783          	lw	a5,-20(s0)
20013e16:	4398                	lw	a4,0(a5)
20013e18:	fe442783          	lw	a5,-28(s0)
20013e1c:	4bdc                	lw	a5,20(a5)
20013e1e:	0792                	slli	a5,a5,0x4
20013e20:	3f07f793          	andi	a5,a5,1008
20013e24:	8f5d                	or	a4,a4,a5
20013e26:	fec42783          	lw	a5,-20(s0)
20013e2a:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:272

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
20013e2c:	fec42783          	lw	a5,-20(s0)
20013e30:	4398                	lw	a4,0(a5)
20013e32:	77fd                	lui	a5,0xfffff
20013e34:	3ff78793          	addi	a5,a5,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffdc93>
20013e38:	8f7d                	and	a4,a4,a5
20013e3a:	fec42783          	lw	a5,-20(s0)
20013e3e:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:273
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
20013e40:	fec42783          	lw	a5,-20(s0)
20013e44:	4398                	lw	a4,0(a5)
20013e46:	fe442783          	lw	a5,-28(s0)
20013e4a:	4f9c                	lw	a5,24(a5)
20013e4c:	00a79693          	slli	a3,a5,0xa
20013e50:	6785                	lui	a5,0x1
20013e52:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20013e56:	8ff5                	and	a5,a5,a3
20013e58:	8f5d                	or	a4,a4,a5
20013e5a:	fec42783          	lw	a5,-20(s0)
20013e5e:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:275

    if(config->d < 0)
20013e60:	fe442783          	lw	a5,-28(s0)
20013e64:	4fdc                	lw	a5,28(a5)
20013e66:	0207db63          	bgez	a5,20013e9c <configure_pll+0xd2>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:278
    {
        /* disable final divider */
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
20013e6a:	fe842783          	lw	a5,-24(s0)
20013e6e:	439c                	lw	a5,0(a5)
20013e70:	1007e713          	ori	a4,a5,256
20013e74:	fe842783          	lw	a5,-24(s0)
20013e78:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:280

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20013e7a:	fe842783          	lw	a5,-24(s0)
20013e7e:	439c                	lw	a5,0(a5)
20013e80:	fc07f713          	andi	a4,a5,-64
20013e84:	fe842783          	lw	a5,-24(s0)
20013e88:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:281
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
20013e8a:	fe842783          	lw	a5,-24(s0)
20013e8e:	439c                	lw	a5,0(a5)
20013e90:	0017e713          	ori	a4,a5,1
20013e94:	fe842783          	lw	a5,-24(s0)
20013e98:	c398                	sw	a4,0(a5)
20013e9a:	a82d                	j	20013ed4 <configure_pll+0x10a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:285
    }
    else
    {
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
20013e9c:	fe842783          	lw	a5,-24(s0)
20013ea0:	439c                	lw	a5,0(a5)
20013ea2:	eff7f713          	andi	a4,a5,-257
20013ea6:	fe842783          	lw	a5,-24(s0)
20013eaa:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:287

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20013eac:	fe842783          	lw	a5,-24(s0)
20013eb0:	439c                	lw	a5,0(a5)
20013eb2:	fc07f713          	andi	a4,a5,-64
20013eb6:	fe842783          	lw	a5,-24(s0)
20013eba:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:288
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
20013ebc:	fe842783          	lw	a5,-24(s0)
20013ec0:	4398                	lw	a4,0(a5)
20013ec2:	fe442783          	lw	a5,-28(s0)
20013ec6:	4fdc                	lw	a5,28(a5)
20013ec8:	03f7f793          	andi	a5,a5,63
20013ecc:	8f5d                	or	a4,a4,a5
20013ece:	fe842783          	lw	a5,-24(s0)
20013ed2:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:291
    }

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
20013ed4:	fec42783          	lw	a5,-20(s0)
20013ed8:	4398                	lw	a4,0(a5)
20013eda:	fffc07b7          	lui	a5,0xfffc0
20013ede:	17fd                	addi	a5,a5,-1
20013ee0:	8f7d                	and	a4,a4,a5
20013ee2:	fec42783          	lw	a5,-20(s0)
20013ee6:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294

    /* Wait for PLL to lock */
    while((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0) ;
20013ee8:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294 (discriminator 1)
20013eea:	fec42783          	lw	a5,-20(s0)
20013eee:	439c                	lw	a5,0(a5)
20013ef0:	fe07dde3          	bgez	a5,20013eea <configure_pll+0x120>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:295
}
20013ef4:	0001                	nop
20013ef6:	4472                	lw	s0,28(sp)
20013ef8:	6105                	addi	sp,sp,32
20013efa:	8082                	ret

20013efc <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298

long __metal_driver_sifive_fe310_g000_pll_set_rate_hz(struct metal_clock *clock, long rate)
{
20013efc:	715d                	addi	sp,sp,-80
20013efe:	c686                	sw	ra,76(sp)
20013f00:	c4a2                	sw	s0,72(sp)
20013f02:	0880                	addi	s0,sp,80
20013f04:	faa42e23          	sw	a0,-68(s0)
20013f08:	fab42c23          	sw	a1,-72(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:299
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20013f0c:	fbc42503          	lw	a0,-68(s0)
20013f10:	ae5ff0ef          	jal	ra,200139f4 <__metal_driver_sifive_fe310_g000_pll_pllref>
20013f14:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:300
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20013f18:	fbc42503          	lw	a0,-68(s0)
20013f1c:	abfff0ef          	jal	ra,200139da <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20013f20:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:301
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20013f24:	fbc42503          	lw	a0,-68(s0)
20013f28:	b23ff0ef          	jal	ra,20013a4a <__metal_driver_sifive_fe310_g000_pll_config_offset>
20013f2c:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:302
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20013f30:	fbc42503          	lw	a0,-68(s0)
20013f34:	af1ff0ef          	jal	ra,20013a24 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20013f38:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:303
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20013f3c:	b35ff0ef          	jal	ra,20013a70 <__metal_driver_sifive_fe310_g000_prci_base>
20013f40:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:305

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
20013f44:	fdc42703          	lw	a4,-36(s0)
20013f48:	fe442783          	lw	a5,-28(s0)
20013f4c:	97ba                	add	a5,a5,a4
20013f4e:	fcf42c23          	sw	a5,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:306
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *) (base + divider_offset);
20013f52:	fdc42703          	lw	a4,-36(s0)
20013f56:	fe042783          	lw	a5,-32(s0)
20013f5a:	97ba                	add	a5,a5,a4
20013f5c:	fcf42a23          	sw	a5,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:309

    /* We can't modify the PLL if coreclk is driven by it, so switch it off */
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
20013f60:	fd842783          	lw	a5,-40(s0)
20013f64:	4398                	lw	a4,0(a5)
20013f66:	67c1                	lui	a5,0x10
20013f68:	8ff9                	and	a5,a5,a4
20013f6a:	cb91                	beqz	a5,20013f7e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x82>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20013f6c:	fd842783          	lw	a5,-40(s0)
20013f70:	4398                	lw	a4,0(a5)
20013f72:	77c1                	lui	a5,0xffff0
20013f74:	17fd                	addi	a5,a5,-1
20013f76:	8f7d                	and	a4,a4,a5
20013f78:	fd842783          	lw	a5,-40(s0)
20013f7c:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314

    /* There's a clock mux before the PLL that selects between the HFROSC and
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? pllref : pllsel0);
20013f7e:	fd842783          	lw	a5,-40(s0)
20013f82:	4398                	lw	a4,0(a5)
20013f84:	000207b7          	lui	a5,0x20
20013f88:	8ff9                	and	a5,a5,a4
20013f8a:	c781                	beqz	a5,20013f92 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x96>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 1)
20013f8c:	fec42783          	lw	a5,-20(s0)
20013f90:	a019                	j	20013f96 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x9a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 2)
20013f92:	fe842783          	lw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 4)
20013f96:	853e                	mv	a0,a5
20013f98:	1d0010ef          	jal	ra,20015168 <metal_clock_get_rate_hz>
20013f9c:	fca42823          	sw	a0,-48(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 4)

    /* if the desired rate is within 75%-125% of the input clock, bypass the PLL */
    if((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate)
20013fa0:	fd042703          	lw	a4,-48(s0)
20013fa4:	87ba                	mv	a5,a4
20013fa6:	0786                	slli	a5,a5,0x1
20013fa8:	97ba                	add	a5,a5,a4
20013faa:	41f7d713          	srai	a4,a5,0x1f
20013fae:	8b0d                	andi	a4,a4,3
20013fb0:	97ba                	add	a5,a5,a4
20013fb2:	8789                	srai	a5,a5,0x2
20013fb4:	873e                	mv	a4,a5
20013fb6:	fb842783          	lw	a5,-72(s0)
20013fba:	02e7cb63          	blt	a5,a4,20013ff0 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 1)
20013fbe:	fd042703          	lw	a4,-48(s0)
20013fc2:	87ba                	mv	a5,a4
20013fc4:	078a                	slli	a5,a5,0x2
20013fc6:	97ba                	add	a5,a5,a4
20013fc8:	41f7d713          	srai	a4,a5,0x1f
20013fcc:	8b0d                	andi	a4,a4,3
20013fce:	97ba                	add	a5,a5,a4
20013fd0:	8789                	srai	a5,a5,0x2
20013fd2:	873e                	mv	a4,a5
20013fd4:	fb842783          	lw	a5,-72(s0)
20013fd8:	00f74c63          	blt	a4,a5,20013ff0 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:319
    {
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20013fdc:	fd842783          	lw	a5,-40(s0)
20013fe0:	4398                	lw	a4,0(a5)
20013fe2:	000407b7          	lui	a5,0x40
20013fe6:	8f5d                	or	a4,a4,a5
20013fe8:	fd842783          	lw	a5,-40(s0)
20013fec:	c398                	sw	a4,0(a5)
20013fee:	a0b9                	j	2001403c <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x140>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:323
    }
    else
    {
        int config_index = find_closest_config(ref_hz, rate);
20013ff0:	fb842583          	lw	a1,-72(s0)
20013ff4:	fd042503          	lw	a0,-48(s0)
20013ff8:	d27ff0ef          	jal	ra,20013d1e <find_closest_config>
20013ffc:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:324
        if(config_index != -1)
20014000:	fcc42703          	lw	a4,-52(s0)
20014004:	57fd                	li	a5,-1
20014006:	02f70263          	beq	a4,a5,2001402a <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x12e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326
        {
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
2001400a:	fcc42783          	lw	a5,-52(s0)
2001400e:	00579713          	slli	a4,a5,0x5
20014012:	200157b7          	lui	a5,0x20015
20014016:	76878793          	addi	a5,a5,1896 # 20015768 <pll_configs>
2001401a:	97ba                	add	a5,a5,a4
2001401c:	863e                	mv	a2,a5
2001401e:	fd442583          	lw	a1,-44(s0)
20014022:	fd842503          	lw	a0,-40(s0)
20014026:	3355                	jal	20013dca <configure_pll>
20014028:	a811                	j	2001403c <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x140>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:331
        }
        else
        {
            /* unable to find a valid configuration */
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
2001402a:	fd842783          	lw	a5,-40(s0)
2001402e:	4398                	lw	a4,0(a5)
20014030:	000407b7          	lui	a5,0x40
20014034:	8f5d                	or	a4,a4,a5
20014036:	fd842783          	lw	a5,-40(s0)
2001403a:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:336
        }
    }

    /* Enable the PLL */
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
2001403c:	fd842783          	lw	a5,-40(s0)
20014040:	4398                	lw	a4,0(a5)
20014042:	67c1                	lui	a5,0x10
20014044:	8f5d                	or	a4,a4,a5
20014046:	fd842783          	lw	a5,-40(s0)
2001404a:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:338

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
2001404c:	fbc42503          	lw	a0,-68(s0)
20014050:	b5fff0ef          	jal	ra,20013bae <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
20014054:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:339
}
20014056:	853e                	mv	a0,a5
20014058:	40b6                	lw	ra,76(sp)
2001405a:	4426                	lw	s0,72(sp)
2001405c:	6161                	addi	sp,sp,80
2001405e:	8082                	ret

20014060 <use_hfxosc>:
use_hfxosc():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:344

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
static void use_hfxosc(void) __attribute__((constructor));
static void use_hfxosc(void)
{
20014060:	1101                	addi	sp,sp,-32
20014062:	ce06                	sw	ra,28(sp)
20014064:	cc22                	sw	s0,24(sp)
20014066:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20014068:	9f3ff0ef          	jal	ra,20013a5a <__metal_driver_sifive_fe310_g000_pll_init_rate>
2001406c:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:346
    metal_clock_set_rate_hz(
20014070:	fec42583          	lw	a1,-20(s0)
20014074:	800017b7          	lui	a5,0x80001
20014078:	a7878513          	addi	a0,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xfffff30c>
2001407c:	112010ef          	jal	ra,2001518e <metal_clock_set_rate_hz>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:349
        &__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock, init_rate
    );
}
20014080:	0001                	nop
20014082:	40f2                	lw	ra,28(sp)
20014084:	4462                	lw	s0,24(sp)
20014086:	6105                	addi	sp,sp,32
20014088:	8082                	ret

2001408a <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1033
{
2001408a:	1141                	addi	sp,sp,-16
2001408c:	c622                	sw	s0,12(sp)
2001408e:	0800                	addi	s0,sp,16
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1034
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20014090:	100087b7          	lui	a5,0x10008
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:1035
}
20014094:	853e                	mv	a0,a5
20014096:	4432                	lw	s0,12(sp)
20014098:	0141                	addi	sp,sp,16
2001409a:	8082                	ret

2001409c <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:11
#ifdef METAL_SIFIVE_FE310_G000_PRCI

#include <metal/drivers/sifive_fe310-g000_prci.h>
#include <metal/machine.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
2001409c:	7179                	addi	sp,sp,-48
2001409e:	d606                	sw	ra,44(sp)
200140a0:	d422                	sw	s0,40(sp)
200140a2:	1800                	addi	s0,sp,48
200140a4:	fca42e23          	sw	a0,-36(s0)
200140a8:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:12
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
200140ac:	3ff9                	jal	2001408a <__metal_driver_sifive_fe310_g000_prci_base>
200140ae:	87aa                	mv	a5,a0
200140b0:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:13
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset));
200140b4:	fd842703          	lw	a4,-40(s0)
200140b8:	fec42783          	lw	a5,-20(s0)
200140bc:	97ba                	add	a5,a5,a4
200140be:	439c                	lw	a5,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:14
}
200140c0:	853e                	mv	a0,a5
200140c2:	50b2                	lw	ra,44(sp)
200140c4:	5422                	lw	s0,40(sp)
200140c6:	6145                	addi	sp,sp,48
200140c8:	8082                	ret

200140ca <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:16

long __metal_driver_sifive_fe310_g000_prci_set_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset, long value) {
200140ca:	7179                	addi	sp,sp,-48
200140cc:	d606                	sw	ra,44(sp)
200140ce:	d422                	sw	s0,40(sp)
200140d0:	1800                	addi	s0,sp,48
200140d2:	fca42e23          	sw	a0,-36(s0)
200140d6:	fcb42c23          	sw	a1,-40(s0)
200140da:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:17
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
200140de:	3775                	jal	2001408a <__metal_driver_sifive_fe310_g000_prci_base>
200140e0:	87aa                	mv	a5,a0
200140e2:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:18
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
200140e6:	fd842703          	lw	a4,-40(s0)
200140ea:	fec42783          	lw	a5,-20(s0)
200140ee:	97ba                	add	a5,a5,a4
200140f0:	873e                	mv	a4,a5
200140f2:	fd442783          	lw	a5,-44(s0)
200140f6:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:19
}
200140f8:	853e                	mv	a0,a5
200140fa:	50b2                	lw	ra,44(sp)
200140fc:	5422                	lw	s0,40(sp)
200140fe:	6145                	addi	sp,sp,48
20014100:	8082                	ret

20014102 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:380
{
20014102:	1101                	addi	sp,sp,-32
20014104:	ce22                	sw	s0,28(sp)
20014106:	1000                	addi	s0,sp,32
20014108:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:381
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2001410c:	fec42703          	lw	a4,-20(s0)
20014110:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014114:	00f71563          	bne	a4,a5,2001411e <__metal_driver_sifive_gpio0_base+0x1c>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:382
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20014118:	100127b7          	lui	a5,0x10012
2001411c:	a011                	j	20014120 <__metal_driver_sifive_gpio0_base+0x1e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:385
		return 0;
2001411e:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:387
}
20014120:	853e                	mv	a0,a5
20014122:	4472                	lw	s0,28(sp)
20014124:	6105                	addi	sp,sp,32
20014126:	8082                	ret

20014128 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:410
{
20014128:	1101                	addi	sp,sp,-32
2001412a:	ce22                	sw	s0,28(sp)
2001412c:	1000                	addi	s0,sp,32
2001412e:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:411
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20014132:	fec42703          	lw	a4,-20(s0)
20014136:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
2001413a:	00f71763          	bne	a4,a5,20014148 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:412
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
2001413e:	800007b7          	lui	a5,0x80000
20014142:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffecdc>
20014146:	a011                	j	2001414a <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:415
		return 0;
20014148:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:417
}
2001414a:	853e                	mv	a0,a5
2001414c:	4472                	lw	s0,28(sp)
2001414e:	6105                	addi	sp,sp,32
20014150:	8082                	ret

20014152 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:420
{
20014152:	1101                	addi	sp,sp,-32
20014154:	ce22                	sw	s0,28(sp)
20014156:	1000                	addi	s0,sp,32
20014158:	fea42623          	sw	a0,-20(s0)
2001415c:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:421
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20014160:	fec42703          	lw	a4,-20(s0)
20014164:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014168:	00f71763          	bne	a4,a5,20014176 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:421 (discriminator 1)
2001416c:	fe842783          	lw	a5,-24(s0)
20014170:	e399                	bnez	a5,20014176 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:422
		return 8;
20014172:	47a1                	li	a5,8
20014174:	ae15                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:424
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20014176:	fec42703          	lw	a4,-20(s0)
2001417a:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
2001417e:	00f71963          	bne	a4,a5,20014190 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:424 (discriminator 1)
20014182:	fe842703          	lw	a4,-24(s0)
20014186:	4785                	li	a5,1
20014188:	00f71463          	bne	a4,a5,20014190 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:425
		return 9;
2001418c:	47a5                	li	a5,9
2001418e:	ae29                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:427
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20014190:	fec42703          	lw	a4,-20(s0)
20014194:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014198:	00f71963          	bne	a4,a5,200141aa <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:427 (discriminator 1)
2001419c:	fe842703          	lw	a4,-24(s0)
200141a0:	4789                	li	a5,2
200141a2:	00f71463          	bne	a4,a5,200141aa <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:428
		return 10;
200141a6:	47a9                	li	a5,10
200141a8:	a601                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:430
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
200141aa:	fec42703          	lw	a4,-20(s0)
200141ae:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200141b2:	00f71963          	bne	a4,a5,200141c4 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:430 (discriminator 1)
200141b6:	fe842703          	lw	a4,-24(s0)
200141ba:	478d                	li	a5,3
200141bc:	00f71463          	bne	a4,a5,200141c4 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:431
		return 11;
200141c0:	47ad                	li	a5,11
200141c2:	a4dd                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:433
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
200141c4:	fec42703          	lw	a4,-20(s0)
200141c8:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200141cc:	00f71963          	bne	a4,a5,200141de <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:433 (discriminator 1)
200141d0:	fe842703          	lw	a4,-24(s0)
200141d4:	4791                	li	a5,4
200141d6:	00f71463          	bne	a4,a5,200141de <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:434
		return 12;
200141da:	47b1                	li	a5,12
200141dc:	a4f1                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:436
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
200141de:	fec42703          	lw	a4,-20(s0)
200141e2:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200141e6:	00f71963          	bne	a4,a5,200141f8 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:436 (discriminator 1)
200141ea:	fe842703          	lw	a4,-24(s0)
200141ee:	4795                	li	a5,5
200141f0:	00f71463          	bne	a4,a5,200141f8 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:437
		return 13;
200141f4:	47b5                	li	a5,13
200141f6:	ac4d                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:439
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
200141f8:	fec42703          	lw	a4,-20(s0)
200141fc:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014200:	00f71963          	bne	a4,a5,20014212 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:439 (discriminator 1)
20014204:	fe842703          	lw	a4,-24(s0)
20014208:	4799                	li	a5,6
2001420a:	00f71463          	bne	a4,a5,20014212 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:440
		return 14;
2001420e:	47b9                	li	a5,14
20014210:	ac61                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:442
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20014212:	fec42703          	lw	a4,-20(s0)
20014216:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
2001421a:	00f71963          	bne	a4,a5,2001422c <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:442 (discriminator 1)
2001421e:	fe842703          	lw	a4,-24(s0)
20014222:	479d                	li	a5,7
20014224:	00f71463          	bne	a4,a5,2001422c <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:443
		return 15;
20014228:	47bd                	li	a5,15
2001422a:	acbd                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:445
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2001422c:	fec42703          	lw	a4,-20(s0)
20014230:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014234:	00f71963          	bne	a4,a5,20014246 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:445 (discriminator 1)
20014238:	fe842703          	lw	a4,-24(s0)
2001423c:	47a1                	li	a5,8
2001423e:	00f71463          	bne	a4,a5,20014246 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:446
		return 16;
20014242:	47c1                	li	a5,16
20014244:	a495                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:448
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20014246:	fec42703          	lw	a4,-20(s0)
2001424a:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
2001424e:	00f71963          	bne	a4,a5,20014260 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:448 (discriminator 1)
20014252:	fe842703          	lw	a4,-24(s0)
20014256:	47a5                	li	a5,9
20014258:	00f71463          	bne	a4,a5,20014260 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:449
		return 17;
2001425c:	47c5                	li	a5,17
2001425e:	a4a9                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:451
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20014260:	fec42703          	lw	a4,-20(s0)
20014264:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014268:	00f71963          	bne	a4,a5,2001427a <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:451 (discriminator 1)
2001426c:	fe842703          	lw	a4,-24(s0)
20014270:	47a9                	li	a5,10
20014272:	00f71463          	bne	a4,a5,2001427a <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:452
		return 18;
20014276:	47c9                	li	a5,18
20014278:	ac05                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:454
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
2001427a:	fec42703          	lw	a4,-20(s0)
2001427e:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014282:	00f71963          	bne	a4,a5,20014294 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:454 (discriminator 1)
20014286:	fe842703          	lw	a4,-24(s0)
2001428a:	47ad                	li	a5,11
2001428c:	00f71463          	bne	a4,a5,20014294 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:455
		return 19;
20014290:	47cd                	li	a5,19
20014292:	ac19                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:457
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20014294:	fec42703          	lw	a4,-20(s0)
20014298:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
2001429c:	00f71963          	bne	a4,a5,200142ae <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:457 (discriminator 1)
200142a0:	fe842703          	lw	a4,-24(s0)
200142a4:	47b1                	li	a5,12
200142a6:	00f71463          	bne	a4,a5,200142ae <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:458
		return 20;
200142aa:	47d1                	li	a5,20
200142ac:	aaf5                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:460
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
200142ae:	fec42703          	lw	a4,-20(s0)
200142b2:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200142b6:	00f71963          	bne	a4,a5,200142c8 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:460 (discriminator 1)
200142ba:	fe842703          	lw	a4,-24(s0)
200142be:	47b5                	li	a5,13
200142c0:	00f71463          	bne	a4,a5,200142c8 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:461
		return 21;
200142c4:	47d5                	li	a5,21
200142c6:	a2cd                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:463
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
200142c8:	fec42703          	lw	a4,-20(s0)
200142cc:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200142d0:	00f71963          	bne	a4,a5,200142e2 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:463 (discriminator 1)
200142d4:	fe842703          	lw	a4,-24(s0)
200142d8:	47b9                	li	a5,14
200142da:	00f71463          	bne	a4,a5,200142e2 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:464
		return 22;
200142de:	47d9                	li	a5,22
200142e0:	a2e1                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:466
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
200142e2:	fec42703          	lw	a4,-20(s0)
200142e6:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200142ea:	00f71963          	bne	a4,a5,200142fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:466 (discriminator 1)
200142ee:	fe842703          	lw	a4,-24(s0)
200142f2:	47bd                	li	a5,15
200142f4:	00f71463          	bne	a4,a5,200142fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:467
		return 23;
200142f8:	47dd                	li	a5,23
200142fa:	a27d                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:469
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 16))) {
200142fc:	fec42703          	lw	a4,-20(s0)
20014300:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014304:	00f71963          	bne	a4,a5,20014316 <__metal_driver_sifive_gpio0_interrupt_lines+0x1c4>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:469 (discriminator 1)
20014308:	fe842703          	lw	a4,-24(s0)
2001430c:	47c1                	li	a5,16
2001430e:	00f71463          	bne	a4,a5,20014316 <__metal_driver_sifive_gpio0_interrupt_lines+0x1c4>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:470
		return 24;
20014312:	47e1                	li	a5,24
20014314:	aa51                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:472
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 17))) {
20014316:	fec42703          	lw	a4,-20(s0)
2001431a:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
2001431e:	00f71963          	bne	a4,a5,20014330 <__metal_driver_sifive_gpio0_interrupt_lines+0x1de>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:472 (discriminator 1)
20014322:	fe842703          	lw	a4,-24(s0)
20014326:	47c5                	li	a5,17
20014328:	00f71463          	bne	a4,a5,20014330 <__metal_driver_sifive_gpio0_interrupt_lines+0x1de>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:473
		return 25;
2001432c:	47e5                	li	a5,25
2001432e:	aaad                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:475
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 18))) {
20014330:	fec42703          	lw	a4,-20(s0)
20014334:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014338:	00f71963          	bne	a4,a5,2001434a <__metal_driver_sifive_gpio0_interrupt_lines+0x1f8>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:475 (discriminator 1)
2001433c:	fe842703          	lw	a4,-24(s0)
20014340:	47c9                	li	a5,18
20014342:	00f71463          	bne	a4,a5,2001434a <__metal_driver_sifive_gpio0_interrupt_lines+0x1f8>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:476
		return 26;
20014346:	47e9                	li	a5,26
20014348:	a285                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:478
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 19))) {
2001434a:	fec42703          	lw	a4,-20(s0)
2001434e:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014352:	00f71963          	bne	a4,a5,20014364 <__metal_driver_sifive_gpio0_interrupt_lines+0x212>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:478 (discriminator 1)
20014356:	fe842703          	lw	a4,-24(s0)
2001435a:	47cd                	li	a5,19
2001435c:	00f71463          	bne	a4,a5,20014364 <__metal_driver_sifive_gpio0_interrupt_lines+0x212>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:479
		return 27;
20014360:	47ed                	li	a5,27
20014362:	a299                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:481
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 20))) {
20014364:	fec42703          	lw	a4,-20(s0)
20014368:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
2001436c:	00f71963          	bne	a4,a5,2001437e <__metal_driver_sifive_gpio0_interrupt_lines+0x22c>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:481 (discriminator 1)
20014370:	fe842703          	lw	a4,-24(s0)
20014374:	47d1                	li	a5,20
20014376:	00f71463          	bne	a4,a5,2001437e <__metal_driver_sifive_gpio0_interrupt_lines+0x22c>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:482
		return 28;
2001437a:	47f1                	li	a5,28
2001437c:	a235                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:484
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 21))) {
2001437e:	fec42703          	lw	a4,-20(s0)
20014382:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014386:	00f71963          	bne	a4,a5,20014398 <__metal_driver_sifive_gpio0_interrupt_lines+0x246>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:484 (discriminator 1)
2001438a:	fe842703          	lw	a4,-24(s0)
2001438e:	47d5                	li	a5,21
20014390:	00f71463          	bne	a4,a5,20014398 <__metal_driver_sifive_gpio0_interrupt_lines+0x246>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:485
		return 29;
20014394:	47f5                	li	a5,29
20014396:	aa09                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:487
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 22))) {
20014398:	fec42703          	lw	a4,-20(s0)
2001439c:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200143a0:	00f71963          	bne	a4,a5,200143b2 <__metal_driver_sifive_gpio0_interrupt_lines+0x260>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:487 (discriminator 1)
200143a4:	fe842703          	lw	a4,-24(s0)
200143a8:	47d9                	li	a5,22
200143aa:	00f71463          	bne	a4,a5,200143b2 <__metal_driver_sifive_gpio0_interrupt_lines+0x260>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:488
		return 30;
200143ae:	47f9                	li	a5,30
200143b0:	a8e5                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:490
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 23))) {
200143b2:	fec42703          	lw	a4,-20(s0)
200143b6:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200143ba:	00f71963          	bne	a4,a5,200143cc <__metal_driver_sifive_gpio0_interrupt_lines+0x27a>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:490 (discriminator 1)
200143be:	fe842703          	lw	a4,-24(s0)
200143c2:	47dd                	li	a5,23
200143c4:	00f71463          	bne	a4,a5,200143cc <__metal_driver_sifive_gpio0_interrupt_lines+0x27a>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:491
		return 31;
200143c8:	47fd                	li	a5,31
200143ca:	a8f9                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:493
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 24))) {
200143cc:	fec42703          	lw	a4,-20(s0)
200143d0:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200143d4:	00f71a63          	bne	a4,a5,200143e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x296>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:493 (discriminator 1)
200143d8:	fe842703          	lw	a4,-24(s0)
200143dc:	47e1                	li	a5,24
200143de:	00f71563          	bne	a4,a5,200143e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x296>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:494
		return 32;
200143e2:	02000793          	li	a5,32
200143e6:	a0c9                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:496
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 25))) {
200143e8:	fec42703          	lw	a4,-20(s0)
200143ec:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
200143f0:	00f71a63          	bne	a4,a5,20014404 <__metal_driver_sifive_gpio0_interrupt_lines+0x2b2>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:496 (discriminator 1)
200143f4:	fe842703          	lw	a4,-24(s0)
200143f8:	47e5                	li	a5,25
200143fa:	00f71563          	bne	a4,a5,20014404 <__metal_driver_sifive_gpio0_interrupt_lines+0x2b2>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:497
		return 33;
200143fe:	02100793          	li	a5,33
20014402:	a05d                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:499
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 26))) {
20014404:	fec42703          	lw	a4,-20(s0)
20014408:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
2001440c:	00f71a63          	bne	a4,a5,20014420 <__metal_driver_sifive_gpio0_interrupt_lines+0x2ce>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:499 (discriminator 1)
20014410:	fe842703          	lw	a4,-24(s0)
20014414:	47e9                	li	a5,26
20014416:	00f71563          	bne	a4,a5,20014420 <__metal_driver_sifive_gpio0_interrupt_lines+0x2ce>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:500
		return 34;
2001441a:	02200793          	li	a5,34
2001441e:	a069                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:502
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 27))) {
20014420:	fec42703          	lw	a4,-20(s0)
20014424:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014428:	00f71a63          	bne	a4,a5,2001443c <__metal_driver_sifive_gpio0_interrupt_lines+0x2ea>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:502 (discriminator 1)
2001442c:	fe842703          	lw	a4,-24(s0)
20014430:	47ed                	li	a5,27
20014432:	00f71563          	bne	a4,a5,2001443c <__metal_driver_sifive_gpio0_interrupt_lines+0x2ea>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:503
		return 35;
20014436:	02300793          	li	a5,35
2001443a:	a0bd                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:505
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 28))) {
2001443c:	fec42703          	lw	a4,-20(s0)
20014440:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014444:	00f71a63          	bne	a4,a5,20014458 <__metal_driver_sifive_gpio0_interrupt_lines+0x306>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:505 (discriminator 1)
20014448:	fe842703          	lw	a4,-24(s0)
2001444c:	47f1                	li	a5,28
2001444e:	00f71563          	bne	a4,a5,20014458 <__metal_driver_sifive_gpio0_interrupt_lines+0x306>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:506
		return 36;
20014452:	02400793          	li	a5,36
20014456:	a889                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:508
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 29))) {
20014458:	fec42703          	lw	a4,-20(s0)
2001445c:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014460:	00f71963          	bne	a4,a5,20014472 <__metal_driver_sifive_gpio0_interrupt_lines+0x320>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:508 (discriminator 1)
20014464:	fe842703          	lw	a4,-24(s0)
20014468:	47f5                	li	a5,29
2001446a:	00f71463          	bne	a4,a5,20014472 <__metal_driver_sifive_gpio0_interrupt_lines+0x320>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:509
		return 27;
2001446e:	47ed                	li	a5,27
20014470:	a825                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:511
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 30))) {
20014472:	fec42703          	lw	a4,-20(s0)
20014476:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
2001447a:	00f71963          	bne	a4,a5,2001448c <__metal_driver_sifive_gpio0_interrupt_lines+0x33a>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:511 (discriminator 1)
2001447e:	fe842703          	lw	a4,-24(s0)
20014482:	47f9                	li	a5,30
20014484:	00f71463          	bne	a4,a5,2001448c <__metal_driver_sifive_gpio0_interrupt_lines+0x33a>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:512
		return 28;
20014488:	47f1                	li	a5,28
2001448a:	a839                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:514
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 31))) {
2001448c:	fec42703          	lw	a4,-20(s0)
20014490:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014494:	00f71963          	bne	a4,a5,200144a6 <__metal_driver_sifive_gpio0_interrupt_lines+0x354>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:514 (discriminator 1)
20014498:	fe842703          	lw	a4,-24(s0)
2001449c:	47fd                	li	a5,31
2001449e:	00f71463          	bne	a4,a5,200144a6 <__metal_driver_sifive_gpio0_interrupt_lines+0x354>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:515
		return 29;
200144a2:	47f5                	li	a5,29
200144a4:	a011                	j	200144a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:518
		return 0;
200144a6:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:520
}
200144a8:	853e                	mv	a0,a5
200144aa:	4472                	lw	s0,28(sp)
200144ac:	6105                	addi	sp,sp,32
200144ae:	8082                	ret

200144b0 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
200144b0:	7179                	addi	sp,sp,-48
200144b2:	d606                	sw	ra,44(sp)
200144b4:	d422                	sw	s0,40(sp)
200144b6:	1800                	addi	s0,sp,48
200144b8:	fca42e23          	sw	a0,-36(s0)
200144bc:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200144c0:	fdc42503          	lw	a0,-36(s0)
200144c4:	c3fff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
200144c8:	87aa                	mv	a5,a0
200144ca:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
200144ce:	fec42783          	lw	a5,-20(s0)
200144d2:	0791                	addi	a5,a5,4
200144d4:	4398                	lw	a4,0(a5)
200144d6:	fd842783          	lw	a5,-40(s0)
200144da:	fec42683          	lw	a3,-20(s0)
200144de:	0691                	addi	a3,a3,4
200144e0:	8fd9                	or	a5,a5,a4
200144e2:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
200144e4:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:19
}
200144e6:	853e                	mv	a0,a5
200144e8:	50b2                	lw	ra,44(sp)
200144ea:	5422                	lw	s0,40(sp)
200144ec:	6145                	addi	sp,sp,48
200144ee:	8082                	ret

200144f0 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
200144f0:	7179                	addi	sp,sp,-48
200144f2:	d606                	sw	ra,44(sp)
200144f4:	d422                	sw	s0,40(sp)
200144f6:	1800                	addi	s0,sp,48
200144f8:	fca42e23          	sw	a0,-36(s0)
200144fc:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20014500:	fdc42503          	lw	a0,-36(s0)
20014504:	bffff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
20014508:	87aa                	mv	a5,a0
2001450a:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
2001450e:	fec42783          	lw	a5,-20(s0)
20014512:	0791                	addi	a5,a5,4
20014514:	439c                	lw	a5,0(a5)
20014516:	fd842703          	lw	a4,-40(s0)
2001451a:	fff74713          	not	a4,a4
2001451e:	86ba                	mv	a3,a4
20014520:	fec42703          	lw	a4,-20(s0)
20014524:	0711                	addi	a4,a4,4
20014526:	8ff5                	and	a5,a5,a3
20014528:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
2001452a:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:28
}
2001452c:	853e                	mv	a0,a5
2001452e:	50b2                	lw	ra,44(sp)
20014530:	5422                	lw	s0,40(sp)
20014532:	6145                	addi	sp,sp,48
20014534:	8082                	ret

20014536 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20014536:	7179                	addi	sp,sp,-48
20014538:	d606                	sw	ra,44(sp)
2001453a:	d422                	sw	s0,40(sp)
2001453c:	1800                	addi	s0,sp,48
2001453e:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20014542:	fdc42503          	lw	a0,-36(s0)
20014546:	bbdff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
2001454a:	87aa                	mv	a5,a0
2001454c:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20014550:	fec42783          	lw	a5,-20(s0)
20014554:	439c                	lw	a5,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20014556:	853e                	mv	a0,a5
20014558:	50b2                	lw	ra,44(sp)
2001455a:	5422                	lw	s0,40(sp)
2001455c:	6145                	addi	sp,sp,48
2001455e:	8082                	ret

20014560 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20014560:	7179                	addi	sp,sp,-48
20014562:	d606                	sw	ra,44(sp)
20014564:	d422                	sw	s0,40(sp)
20014566:	1800                	addi	s0,sp,48
20014568:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001456c:	fdc42503          	lw	a0,-36(s0)
20014570:	b93ff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
20014574:	87aa                	mv	a5,a0
20014576:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
2001457a:	fec42783          	lw	a5,-20(s0)
2001457e:	07b1                	addi	a5,a5,12
20014580:	439c                	lw	a5,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20014582:	853e                	mv	a0,a5
20014584:	50b2                	lw	ra,44(sp)
20014586:	5422                	lw	s0,40(sp)
20014588:	6145                	addi	sp,sp,48
2001458a:	8082                	ret

2001458c <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
2001458c:	7179                	addi	sp,sp,-48
2001458e:	d606                	sw	ra,44(sp)
20014590:	d422                	sw	s0,40(sp)
20014592:	1800                	addi	s0,sp,48
20014594:	fca42e23          	sw	a0,-36(s0)
20014598:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001459c:	fdc42503          	lw	a0,-36(s0)
200145a0:	b63ff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
200145a4:	87aa                	mv	a5,a0
200145a6:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
200145aa:	fec42783          	lw	a5,-20(s0)
200145ae:	07a1                	addi	a5,a5,8
200145b0:	439c                	lw	a5,0(a5)
200145b2:	fd842703          	lw	a4,-40(s0)
200145b6:	fff74713          	not	a4,a4
200145ba:	86ba                	mv	a3,a4
200145bc:	fec42703          	lw	a4,-20(s0)
200145c0:	0721                	addi	a4,a4,8
200145c2:	8ff5                	and	a5,a5,a3
200145c4:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
200145c6:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:52
}
200145c8:	853e                	mv	a0,a5
200145ca:	50b2                	lw	ra,44(sp)
200145cc:	5422                	lw	s0,40(sp)
200145ce:	6145                	addi	sp,sp,48
200145d0:	8082                	ret

200145d2 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
200145d2:	7179                	addi	sp,sp,-48
200145d4:	d606                	sw	ra,44(sp)
200145d6:	d422                	sw	s0,40(sp)
200145d8:	1800                	addi	s0,sp,48
200145da:	fca42e23          	sw	a0,-36(s0)
200145de:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200145e2:	fdc42503          	lw	a0,-36(s0)
200145e6:	b1dff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
200145ea:	87aa                	mv	a5,a0
200145ec:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
200145f0:	fec42783          	lw	a5,-20(s0)
200145f4:	07a1                	addi	a5,a5,8
200145f6:	4398                	lw	a4,0(a5)
200145f8:	fd842783          	lw	a5,-40(s0)
200145fc:	fec42683          	lw	a3,-20(s0)
20014600:	06a1                	addi	a3,a3,8
20014602:	8fd9                	or	a5,a5,a4
20014604:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20014606:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20014608:	853e                	mv	a0,a5
2001460a:	50b2                	lw	ra,44(sp)
2001460c:	5422                	lw	s0,40(sp)
2001460e:	6145                	addi	sp,sp,48
20014610:	8082                	ret

20014612 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20014612:	7179                	addi	sp,sp,-48
20014614:	d606                	sw	ra,44(sp)
20014616:	d422                	sw	s0,40(sp)
20014618:	1800                	addi	s0,sp,48
2001461a:	fca42e23          	sw	a0,-36(s0)
2001461e:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20014622:	fdc42503          	lw	a0,-36(s0)
20014626:	addff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
2001462a:	87aa                	mv	a5,a0
2001462c:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20014630:	fec42783          	lw	a5,-20(s0)
20014634:	07b1                	addi	a5,a5,12
20014636:	4398                	lw	a4,0(a5)
20014638:	fd842783          	lw	a5,-40(s0)
2001463c:	fec42683          	lw	a3,-20(s0)
20014640:	06b1                	addi	a3,a3,12
20014642:	8fd9                	or	a5,a5,a4
20014644:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20014646:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20014648:	853e                	mv	a0,a5
2001464a:	50b2                	lw	ra,44(sp)
2001464c:	5422                	lw	s0,40(sp)
2001464e:	6145                	addi	sp,sp,48
20014650:	8082                	ret

20014652 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20014652:	7179                	addi	sp,sp,-48
20014654:	d606                	sw	ra,44(sp)
20014656:	d422                	sw	s0,40(sp)
20014658:	1800                	addi	s0,sp,48
2001465a:	fca42e23          	sw	a0,-36(s0)
2001465e:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20014662:	fdc42503          	lw	a0,-36(s0)
20014666:	a9dff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
2001466a:	87aa                	mv	a5,a0
2001466c:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20014670:	fec42783          	lw	a5,-20(s0)
20014674:	07b1                	addi	a5,a5,12
20014676:	439c                	lw	a5,0(a5)
20014678:	fd842703          	lw	a4,-40(s0)
2001467c:	fff74713          	not	a4,a4
20014680:	86ba                	mv	a3,a4
20014682:	fec42703          	lw	a4,-20(s0)
20014686:	0731                	addi	a4,a4,12
20014688:	8ff5                	and	a5,a5,a3
2001468a:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
2001468c:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:79
}
2001468e:	853e                	mv	a0,a5
20014690:	50b2                	lw	ra,44(sp)
20014692:	5422                	lw	s0,40(sp)
20014694:	6145                	addi	sp,sp,48
20014696:	8082                	ret

20014698 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20014698:	7179                	addi	sp,sp,-48
2001469a:	d606                	sw	ra,44(sp)
2001469c:	d422                	sw	s0,40(sp)
2001469e:	1800                	addi	s0,sp,48
200146a0:	fca42e23          	sw	a0,-36(s0)
200146a4:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200146a8:	fdc42503          	lw	a0,-36(s0)
200146ac:	a57ff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
200146b0:	87aa                	mv	a5,a0
200146b2:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
200146b6:	fec42783          	lw	a5,-20(s0)
200146ba:	07b1                	addi	a5,a5,12
200146bc:	4398                	lw	a4,0(a5)
200146be:	fd842783          	lw	a5,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
200146c2:	fec42683          	lw	a3,-20(s0)
200146c6:	06b1                	addi	a3,a3,12
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
200146c8:	8fb9                	xor	a5,a5,a4
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
200146ca:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
200146cc:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:89
}
200146ce:	853e                	mv	a0,a5
200146d0:	50b2                	lw	ra,44(sp)
200146d2:	5422                	lw	s0,40(sp)
200146d4:	6145                	addi	sp,sp,48
200146d6:	8082                	ret

200146d8 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
200146d8:	7179                	addi	sp,sp,-48
200146da:	d606                	sw	ra,44(sp)
200146dc:	d422                	sw	s0,40(sp)
200146de:	1800                	addi	s0,sp,48
200146e0:	fca42e23          	sw	a0,-36(s0)
200146e4:	fcb42c23          	sw	a1,-40(s0)
200146e8:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200146ec:	fdc42503          	lw	a0,-36(s0)
200146f0:	a13ff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
200146f4:	87aa                	mv	a5,a0
200146f6:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
200146fa:	fec42783          	lw	a5,-20(s0)
200146fe:	03c78793          	addi	a5,a5,60
20014702:	439c                	lw	a5,0(a5)
20014704:	fd842703          	lw	a4,-40(s0)
20014708:	fff74713          	not	a4,a4
2001470c:	86ba                	mv	a3,a4
2001470e:	fec42703          	lw	a4,-20(s0)
20014712:	03c70713          	addi	a4,a4,60
20014716:	8ff5                	and	a5,a5,a3
20014718:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
2001471a:	fec42783          	lw	a5,-20(s0)
2001471e:	03878793          	addi	a5,a5,56
20014722:	4398                	lw	a4,0(a5)
20014724:	fd442783          	lw	a5,-44(s0)
20014728:	fec42683          	lw	a3,-20(s0)
2001472c:	03868693          	addi	a3,a3,56
20014730:	8fd9                	or	a5,a5,a4
20014732:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20014734:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20014736:	853e                	mv	a0,a5
20014738:	50b2                	lw	ra,44(sp)
2001473a:	5422                	lw	s0,40(sp)
2001473c:	6145                	addi	sp,sp,48
2001473e:	8082                	ret

20014740 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20014740:	7179                	addi	sp,sp,-48
20014742:	d606                	sw	ra,44(sp)
20014744:	d422                	sw	s0,40(sp)
20014746:	1800                	addi	s0,sp,48
20014748:	fca42e23          	sw	a0,-36(s0)
2001474c:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20014750:	fdc42503          	lw	a0,-36(s0)
20014754:	9afff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
20014758:	87aa                	mv	a5,a0
2001475a:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
2001475e:	fec42783          	lw	a5,-20(s0)
20014762:	03878793          	addi	a5,a5,56
20014766:	439c                	lw	a5,0(a5)
20014768:	fd842703          	lw	a4,-40(s0)
2001476c:	fff74713          	not	a4,a4
20014770:	86ba                	mv	a3,a4
20014772:	fec42703          	lw	a4,-20(s0)
20014776:	03870713          	addi	a4,a4,56
2001477a:	8ff5                	and	a5,a5,a3
2001477c:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
2001477e:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20014780:	853e                	mv	a0,a5
20014782:	50b2                	lw	ra,44(sp)
20014784:	5422                	lw	s0,40(sp)
20014786:	6145                	addi	sp,sp,48
20014788:	8082                	ret

2001478a <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
2001478a:	7179                	addi	sp,sp,-48
2001478c:	d606                	sw	ra,44(sp)
2001478e:	d422                	sw	s0,40(sp)
20014790:	1800                	addi	s0,sp,48
20014792:	fca42e23          	sw	a0,-36(s0)
20014796:	fcb42c23          	sw	a1,-40(s0)
2001479a:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001479e:	fdc42503          	lw	a0,-36(s0)
200147a2:	961ff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
200147a6:	87aa                	mv	a5,a0
200147a8:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
200147ac:	fd442703          	lw	a4,-44(s0)
200147b0:	479d                	li	a5,7
200147b2:	1ce7e963          	bltu	a5,a4,20014984 <__metal_driver_sifive_gpio0_config_int+0x1fa>
200147b6:	fd442783          	lw	a5,-44(s0)
200147ba:	00279713          	slli	a4,a5,0x2
200147be:	200167b7          	lui	a5,0x20016
200147c2:	ff478793          	addi	a5,a5,-12 # 20015ff4 <__metal_driver_vtable_sifive_fe310_g000_pll+0xc>
200147c6:	97ba                	add	a5,a5,a4
200147c8:	439c                	lw	a5,0(a5)
200147ca:	8782                	jr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
200147cc:	fec42783          	lw	a5,-20(s0)
200147d0:	07e1                	addi	a5,a5,24
200147d2:	439c                	lw	a5,0(a5)
200147d4:	fd842703          	lw	a4,-40(s0)
200147d8:	fff74713          	not	a4,a4
200147dc:	86ba                	mv	a3,a4
200147de:	fec42703          	lw	a4,-20(s0)
200147e2:	0761                	addi	a4,a4,24
200147e4:	8ff5                	and	a5,a5,a3
200147e6:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
200147e8:	fec42783          	lw	a5,-20(s0)
200147ec:	02078793          	addi	a5,a5,32
200147f0:	439c                	lw	a5,0(a5)
200147f2:	fd842703          	lw	a4,-40(s0)
200147f6:	fff74713          	not	a4,a4
200147fa:	86ba                	mv	a3,a4
200147fc:	fec42703          	lw	a4,-20(s0)
20014800:	02070713          	addi	a4,a4,32
20014804:	8ff5                	and	a5,a5,a3
20014806:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20014808:	fec42783          	lw	a5,-20(s0)
2001480c:	02878793          	addi	a5,a5,40
20014810:	439c                	lw	a5,0(a5)
20014812:	fd842703          	lw	a4,-40(s0)
20014816:	fff74713          	not	a4,a4
2001481a:	86ba                	mv	a3,a4
2001481c:	fec42703          	lw	a4,-20(s0)
20014820:	02870713          	addi	a4,a4,40
20014824:	8ff5                	and	a5,a5,a3
20014826:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20014828:	fec42783          	lw	a5,-20(s0)
2001482c:	03078793          	addi	a5,a5,48
20014830:	439c                	lw	a5,0(a5)
20014832:	fd842703          	lw	a4,-40(s0)
20014836:	fff74713          	not	a4,a4
2001483a:	86ba                	mv	a3,a4
2001483c:	fec42703          	lw	a4,-20(s0)
20014840:	03070713          	addi	a4,a4,48
20014844:	8ff5                	and	a5,a5,a3
20014846:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20014848:	aa35                	j	20014984 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2001484a:	fec42783          	lw	a5,-20(s0)
2001484e:	07e1                	addi	a5,a5,24
20014850:	4398                	lw	a4,0(a5)
20014852:	fd842783          	lw	a5,-40(s0)
20014856:	fec42683          	lw	a3,-20(s0)
2001485a:	06e1                	addi	a3,a3,24
2001485c:	8fd9                	or	a5,a5,a4
2001485e:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20014860:	a215                	j	20014984 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20014862:	fec42783          	lw	a5,-20(s0)
20014866:	02078793          	addi	a5,a5,32
2001486a:	4398                	lw	a4,0(a5)
2001486c:	fd842783          	lw	a5,-40(s0)
20014870:	fec42683          	lw	a3,-20(s0)
20014874:	02068693          	addi	a3,a3,32
20014878:	8fd9                	or	a5,a5,a4
2001487a:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
2001487c:	a221                	j	20014984 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2001487e:	fec42783          	lw	a5,-20(s0)
20014882:	07e1                	addi	a5,a5,24
20014884:	4398                	lw	a4,0(a5)
20014886:	fd842783          	lw	a5,-40(s0)
2001488a:	fec42683          	lw	a3,-20(s0)
2001488e:	06e1                	addi	a3,a3,24
20014890:	8fd9                	or	a5,a5,a4
20014892:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20014894:	fec42783          	lw	a5,-20(s0)
20014898:	02078793          	addi	a5,a5,32
2001489c:	4398                	lw	a4,0(a5)
2001489e:	fd842783          	lw	a5,-40(s0)
200148a2:	fec42683          	lw	a3,-20(s0)
200148a6:	02068693          	addi	a3,a3,32
200148aa:	8fd9                	or	a5,a5,a4
200148ac:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
200148ae:	a8d9                	j	20014984 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
200148b0:	fec42783          	lw	a5,-20(s0)
200148b4:	02878793          	addi	a5,a5,40
200148b8:	4398                	lw	a4,0(a5)
200148ba:	fd842783          	lw	a5,-40(s0)
200148be:	fec42683          	lw	a3,-20(s0)
200148c2:	02868693          	addi	a3,a3,40
200148c6:	8fd9                	or	a5,a5,a4
200148c8:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
200148ca:	a86d                	j	20014984 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
200148cc:	fec42783          	lw	a5,-20(s0)
200148d0:	03078793          	addi	a5,a5,48
200148d4:	4398                	lw	a4,0(a5)
200148d6:	fd842783          	lw	a5,-40(s0)
200148da:	fec42683          	lw	a3,-20(s0)
200148de:	03068693          	addi	a3,a3,48
200148e2:	8fd9                	or	a5,a5,a4
200148e4:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
200148e6:	a879                	j	20014984 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
200148e8:	fec42783          	lw	a5,-20(s0)
200148ec:	02878793          	addi	a5,a5,40
200148f0:	4398                	lw	a4,0(a5)
200148f2:	fd842783          	lw	a5,-40(s0)
200148f6:	fec42683          	lw	a3,-20(s0)
200148fa:	02868693          	addi	a3,a3,40
200148fe:	8fd9                	or	a5,a5,a4
20014900:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20014902:	fec42783          	lw	a5,-20(s0)
20014906:	03078793          	addi	a5,a5,48
2001490a:	4398                	lw	a4,0(a5)
2001490c:	fd842783          	lw	a5,-40(s0)
20014910:	fec42683          	lw	a3,-20(s0)
20014914:	03068693          	addi	a3,a3,48
20014918:	8fd9                	or	a5,a5,a4
2001491a:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
2001491c:	a0a5                	j	20014984 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2001491e:	fec42783          	lw	a5,-20(s0)
20014922:	07e1                	addi	a5,a5,24
20014924:	4398                	lw	a4,0(a5)
20014926:	fd842783          	lw	a5,-40(s0)
2001492a:	fec42683          	lw	a3,-20(s0)
2001492e:	06e1                	addi	a3,a3,24
20014930:	8fd9                	or	a5,a5,a4
20014932:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20014934:	fec42783          	lw	a5,-20(s0)
20014938:	02078793          	addi	a5,a5,32
2001493c:	4398                	lw	a4,0(a5)
2001493e:	fd842783          	lw	a5,-40(s0)
20014942:	fec42683          	lw	a3,-20(s0)
20014946:	02068693          	addi	a3,a3,32
2001494a:	8fd9                	or	a5,a5,a4
2001494c:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2001494e:	fec42783          	lw	a5,-20(s0)
20014952:	02878793          	addi	a5,a5,40
20014956:	4398                	lw	a4,0(a5)
20014958:	fd842783          	lw	a5,-40(s0)
2001495c:	fec42683          	lw	a3,-20(s0)
20014960:	02868693          	addi	a3,a3,40
20014964:	8fd9                	or	a5,a5,a4
20014966:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20014968:	fec42783          	lw	a5,-20(s0)
2001496c:	03078793          	addi	a5,a5,48
20014970:	4398                	lw	a4,0(a5)
20014972:	fd842783          	lw	a5,-40(s0)
20014976:	fec42683          	lw	a3,-20(s0)
2001497a:	03068693          	addi	a3,a3,48
2001497e:	8fd9                	or	a5,a5,a4
20014980:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20014982:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20014984:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20014986:	853e                	mv	a0,a5
20014988:	50b2                	lw	ra,44(sp)
2001498a:	5422                	lw	s0,40(sp)
2001498c:	6145                	addi	sp,sp,48
2001498e:	8082                	ret

20014990 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20014990:	7179                	addi	sp,sp,-48
20014992:	d606                	sw	ra,44(sp)
20014994:	d422                	sw	s0,40(sp)
20014996:	1800                	addi	s0,sp,48
20014998:	fca42e23          	sw	a0,-36(s0)
2001499c:	fcb42c23          	sw	a1,-40(s0)
200149a0:	fcc42a23          	sw	a2,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200149a4:	fdc42503          	lw	a0,-36(s0)
200149a8:	f5aff0ef          	jal	ra,20014102 <__metal_driver_sifive_gpio0_base>
200149ac:	87aa                	mv	a5,a0
200149ae:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
200149b2:	fd442703          	lw	a4,-44(s0)
200149b6:	479d                	li	a5,7
200149b8:	14e7ea63          	bltu	a5,a4,20014b0c <__metal_driver_sifive_gpio0_clear_int+0x17c>
200149bc:	fd442783          	lw	a5,-44(s0)
200149c0:	00279713          	slli	a4,a5,0x2
200149c4:	200167b7          	lui	a5,0x20016
200149c8:	01478793          	addi	a5,a5,20 # 20016014 <__metal_driver_vtable_sifive_fe310_g000_pll+0x2c>
200149cc:	97ba                	add	a5,a5,a4
200149ce:	439c                	lw	a5,0(a5)
200149d0:	8782                	jr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
200149d2:	fec42783          	lw	a5,-20(s0)
200149d6:	07f1                	addi	a5,a5,28
200149d8:	4398                	lw	a4,0(a5)
200149da:	fd842783          	lw	a5,-40(s0)
200149de:	fec42683          	lw	a3,-20(s0)
200149e2:	06f1                	addi	a3,a3,28
200149e4:	8fd9                	or	a5,a5,a4
200149e6:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
200149e8:	a215                	j	20014b0c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
200149ea:	fec42783          	lw	a5,-20(s0)
200149ee:	02478793          	addi	a5,a5,36
200149f2:	4398                	lw	a4,0(a5)
200149f4:	fd842783          	lw	a5,-40(s0)
200149f8:	fec42683          	lw	a3,-20(s0)
200149fc:	02468693          	addi	a3,a3,36
20014a00:	8fd9                	or	a5,a5,a4
20014a02:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20014a04:	a221                	j	20014b0c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20014a06:	fec42783          	lw	a5,-20(s0)
20014a0a:	07f1                	addi	a5,a5,28
20014a0c:	4398                	lw	a4,0(a5)
20014a0e:	fd842783          	lw	a5,-40(s0)
20014a12:	fec42683          	lw	a3,-20(s0)
20014a16:	06f1                	addi	a3,a3,28
20014a18:	8fd9                	or	a5,a5,a4
20014a1a:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20014a1c:	fec42783          	lw	a5,-20(s0)
20014a20:	02478793          	addi	a5,a5,36
20014a24:	4398                	lw	a4,0(a5)
20014a26:	fd842783          	lw	a5,-40(s0)
20014a2a:	fec42683          	lw	a3,-20(s0)
20014a2e:	02468693          	addi	a3,a3,36
20014a32:	8fd9                	or	a5,a5,a4
20014a34:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20014a36:	a8d9                	j	20014b0c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20014a38:	fec42783          	lw	a5,-20(s0)
20014a3c:	02c78793          	addi	a5,a5,44
20014a40:	4398                	lw	a4,0(a5)
20014a42:	fd842783          	lw	a5,-40(s0)
20014a46:	fec42683          	lw	a3,-20(s0)
20014a4a:	02c68693          	addi	a3,a3,44
20014a4e:	8fd9                	or	a5,a5,a4
20014a50:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20014a52:	a86d                	j	20014b0c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20014a54:	fec42783          	lw	a5,-20(s0)
20014a58:	03478793          	addi	a5,a5,52
20014a5c:	4398                	lw	a4,0(a5)
20014a5e:	fd842783          	lw	a5,-40(s0)
20014a62:	fec42683          	lw	a3,-20(s0)
20014a66:	03468693          	addi	a3,a3,52
20014a6a:	8fd9                	or	a5,a5,a4
20014a6c:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20014a6e:	a879                	j	20014b0c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20014a70:	fec42783          	lw	a5,-20(s0)
20014a74:	02c78793          	addi	a5,a5,44
20014a78:	4398                	lw	a4,0(a5)
20014a7a:	fd842783          	lw	a5,-40(s0)
20014a7e:	fec42683          	lw	a3,-20(s0)
20014a82:	02c68693          	addi	a3,a3,44
20014a86:	8fd9                	or	a5,a5,a4
20014a88:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20014a8a:	fec42783          	lw	a5,-20(s0)
20014a8e:	03478793          	addi	a5,a5,52
20014a92:	4398                	lw	a4,0(a5)
20014a94:	fd842783          	lw	a5,-40(s0)
20014a98:	fec42683          	lw	a3,-20(s0)
20014a9c:	03468693          	addi	a3,a3,52
20014aa0:	8fd9                	or	a5,a5,a4
20014aa2:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20014aa4:	a0a5                	j	20014b0c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20014aa6:	fec42783          	lw	a5,-20(s0)
20014aaa:	07f1                	addi	a5,a5,28
20014aac:	4398                	lw	a4,0(a5)
20014aae:	fd842783          	lw	a5,-40(s0)
20014ab2:	fec42683          	lw	a3,-20(s0)
20014ab6:	06f1                	addi	a3,a3,28
20014ab8:	8fd9                	or	a5,a5,a4
20014aba:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20014abc:	fec42783          	lw	a5,-20(s0)
20014ac0:	02478793          	addi	a5,a5,36
20014ac4:	4398                	lw	a4,0(a5)
20014ac6:	fd842783          	lw	a5,-40(s0)
20014aca:	fec42683          	lw	a3,-20(s0)
20014ace:	02468693          	addi	a3,a3,36
20014ad2:	8fd9                	or	a5,a5,a4
20014ad4:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20014ad6:	fec42783          	lw	a5,-20(s0)
20014ada:	02c78793          	addi	a5,a5,44
20014ade:	4398                	lw	a4,0(a5)
20014ae0:	fd842783          	lw	a5,-40(s0)
20014ae4:	fec42683          	lw	a3,-20(s0)
20014ae8:	02c68693          	addi	a3,a3,44
20014aec:	8fd9                	or	a5,a5,a4
20014aee:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20014af0:	fec42783          	lw	a5,-20(s0)
20014af4:	03478793          	addi	a5,a5,52
20014af8:	4398                	lw	a4,0(a5)
20014afa:	fd842783          	lw	a5,-40(s0)
20014afe:	fec42683          	lw	a3,-20(s0)
20014b02:	03468693          	addi	a3,a3,52
20014b06:	8fd9                	or	a5,a5,a4
20014b08:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20014b0a:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20014b0c:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20014b0e:	853e                	mv	a0,a5
20014b10:	50b2                	lw	ra,44(sp)
20014b12:	5422                	lw	s0,40(sp)
20014b14:	6145                	addi	sp,sp,48
20014b16:	8082                	ret

20014b18 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20014b18:	1101                	addi	sp,sp,-32
20014b1a:	ce06                	sw	ra,28(sp)
20014b1c:	cc22                	sw	s0,24(sp)
20014b1e:	1000                	addi	s0,sp,32
20014b20:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20014b24:	fec42503          	lw	a0,-20(s0)
20014b28:	e00ff0ef          	jal	ra,20014128 <__metal_driver_sifive_gpio0_interrupt_parent>
20014b2c:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20014b2e:	853e                	mv	a0,a5
20014b30:	40f2                	lw	ra,28(sp)
20014b32:	4462                	lw	s0,24(sp)
20014b34:	6105                	addi	sp,sp,32
20014b36:	8082                	ret

20014b38 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20014b38:	7179                	addi	sp,sp,-48
20014b3a:	d606                	sw	ra,44(sp)
20014b3c:	d422                	sw	s0,40(sp)
20014b3e:	1800                	addi	s0,sp,48
20014b40:	fca42e23          	sw	a0,-36(s0)
20014b44:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20014b48:	fd842583          	lw	a1,-40(s0)
20014b4c:	fdc42503          	lw	a0,-36(s0)
20014b50:	e02ff0ef          	jal	ra,20014152 <__metal_driver_sifive_gpio0_interrupt_lines>
20014b54:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20014b58:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20014b5c:	853e                	mv	a0,a5
20014b5e:	50b2                	lw	ra,44(sp)
20014b60:	5422                	lw	s0,40(sp)
20014b62:	6145                	addi	sp,sp,48
20014b64:	8082                	ret

20014b66 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:738
{
20014b66:	1101                	addi	sp,sp,-32
20014b68:	ce22                	sw	s0,28(sp)
20014b6a:	1000                	addi	s0,sp,32
20014b6c:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:739
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20014b70:	fec42703          	lw	a4,-20(s0)
20014b74:	800017b7          	lui	a5,0x80001
20014b78:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2b4>
20014b7c:	00f71563          	bne	a4,a5,20014b86 <__metal_driver_sifive_uart0_control_base+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:740
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20014b80:	100137b7          	lui	a5,0x10013
20014b84:	a829                	j	20014b9e <__metal_driver_sifive_uart0_control_base+0x38>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:742
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20014b86:	fec42703          	lw	a4,-20(s0)
20014b8a:	800017b7          	lui	a5,0x80001
20014b8e:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2d4>
20014b92:	00f71563          	bne	a4,a5,20014b9c <__metal_driver_sifive_uart0_control_base+0x36>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:743
		return METAL_SIFIVE_UART0_10023000_BASE_ADDRESS;
20014b96:	100237b7          	lui	a5,0x10023
20014b9a:	a011                	j	20014b9e <__metal_driver_sifive_uart0_control_base+0x38>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:746
		return 0;
20014b9c:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:748
}
20014b9e:	853e                	mv	a0,a5
20014ba0:	4472                	lw	s0,28(sp)
20014ba2:	6105                	addi	sp,sp,32
20014ba4:	8082                	ret

20014ba6 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:777
{
20014ba6:	1101                	addi	sp,sp,-32
20014ba8:	ce22                	sw	s0,28(sp)
20014baa:	1000                	addi	s0,sp,32
20014bac:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:778
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20014bb0:	fec42703          	lw	a4,-20(s0)
20014bb4:	800017b7          	lui	a5,0x80001
20014bb8:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2b4>
20014bbc:	00f71763          	bne	a4,a5,20014bca <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:779
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20014bc0:	800007b7          	lui	a5,0x80000
20014bc4:	44878793          	addi	a5,a5,1096 # 80000448 <metal_segment_heap_target_end+0xffffecdc>
20014bc8:	a821                	j	20014be0 <__metal_driver_sifive_uart0_interrupt_parent+0x3a>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:781
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20014bca:	fec42703          	lw	a4,-20(s0)
20014bce:	800017b7          	lui	a5,0x80001
20014bd2:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2d4>
20014bd6:	00f71463          	bne	a4,a5,20014bde <__metal_driver_sifive_uart0_interrupt_parent+0x38>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:782
		return NULL;
20014bda:	4781                	li	a5,0
20014bdc:	a011                	j	20014be0 <__metal_driver_sifive_uart0_interrupt_parent+0x3a>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:785
		return 0;
20014bde:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:787
}
20014be0:	853e                	mv	a0,a5
20014be2:	4472                	lw	s0,28(sp)
20014be4:	6105                	addi	sp,sp,32
20014be6:	8082                	ret

20014be8 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:790
{
20014be8:	1101                	addi	sp,sp,-32
20014bea:	ce22                	sw	s0,28(sp)
20014bec:	1000                	addi	s0,sp,32
20014bee:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:791
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20014bf2:	fec42703          	lw	a4,-20(s0)
20014bf6:	800017b7          	lui	a5,0x80001
20014bfa:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2b4>
20014bfe:	00f71463          	bne	a4,a5,20014c06 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:792
		return 3;
20014c02:	478d                	li	a5,3
20014c04:	a821                	j	20014c1c <__metal_driver_sifive_uart0_interrupt_line+0x34>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:794
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20014c06:	fec42703          	lw	a4,-20(s0)
20014c0a:	800017b7          	lui	a5,0x80001
20014c0e:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2d4>
20014c12:	00f71463          	bne	a4,a5,20014c1a <__metal_driver_sifive_uart0_interrupt_line+0x32>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:795
		return 4;
20014c16:	4791                	li	a5,4
20014c18:	a011                	j	20014c1c <__metal_driver_sifive_uart0_interrupt_line+0x34>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:798
		return 0;
20014c1a:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:800
}
20014c1c:	853e                	mv	a0,a5
20014c1e:	4472                	lw	s0,28(sp)
20014c20:	6105                	addi	sp,sp,32
20014c22:	8082                	ret

20014c24 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:803
{
20014c24:	1101                	addi	sp,sp,-32
20014c26:	ce22                	sw	s0,28(sp)
20014c28:	1000                	addi	s0,sp,32
20014c2a:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:804
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20014c2e:	fec42703          	lw	a4,-20(s0)
20014c32:	800017b7          	lui	a5,0x80001
20014c36:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2b4>
20014c3a:	00f71763          	bne	a4,a5,20014c48 <__metal_driver_sifive_uart0_clock+0x24>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:805
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20014c3e:	800017b7          	lui	a5,0x80001
20014c42:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xfffff30c>
20014c46:	a839                	j	20014c64 <__metal_driver_sifive_uart0_clock+0x40>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:807
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20014c48:	fec42703          	lw	a4,-20(s0)
20014c4c:	800017b7          	lui	a5,0x80001
20014c50:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2d4>
20014c54:	00f71763          	bne	a4,a5,20014c62 <__metal_driver_sifive_uart0_clock+0x3e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:808
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20014c58:	800017b7          	lui	a5,0x80001
20014c5c:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xfffff30c>
20014c60:	a011                	j	20014c64 <__metal_driver_sifive_uart0_clock+0x40>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:811
		return 0;
20014c62:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:813
}
20014c64:	853e                	mv	a0,a5
20014c66:	4472                	lw	s0,28(sp)
20014c68:	6105                	addi	sp,sp,32
20014c6a:	8082                	ret

20014c6c <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:816
{
20014c6c:	1101                	addi	sp,sp,-32
20014c6e:	ce22                	sw	s0,28(sp)
20014c70:	1000                	addi	s0,sp,32
20014c72:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:817
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20014c76:	fec42703          	lw	a4,-20(s0)
20014c7a:	800017b7          	lui	a5,0x80001
20014c7e:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2b4>
20014c82:	00f71563          	bne	a4,a5,20014c8c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:818
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20014c86:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014c8a:	a829                	j	20014ca4 <__metal_driver_sifive_uart0_pinmux+0x38>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:820
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20014c8c:	fec42703          	lw	a4,-20(s0)
20014c90:	800017b7          	lui	a5,0x80001
20014c94:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2d4>
20014c98:	00f71563          	bne	a4,a5,20014ca2 <__metal_driver_sifive_uart0_pinmux+0x36>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:821
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20014c9c:	81c18793          	addi	a5,gp,-2020 # 80000aa4 <__metal_dt_gpio_10012000>
20014ca0:	a011                	j	20014ca4 <__metal_driver_sifive_uart0_pinmux+0x38>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:824
		return 0;
20014ca2:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:826
}
20014ca4:	853e                	mv	a0,a5
20014ca6:	4472                	lw	s0,28(sp)
20014ca8:	6105                	addi	sp,sp,32
20014caa:	8082                	ret

20014cac <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:829
{
20014cac:	1101                	addi	sp,sp,-32
20014cae:	ce22                	sw	s0,28(sp)
20014cb0:	1000                	addi	s0,sp,32
20014cb2:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:830
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20014cb6:	fec42703          	lw	a4,-20(s0)
20014cba:	800017b7          	lui	a5,0x80001
20014cbe:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2b4>
20014cc2:	00f71563          	bne	a4,a5,20014ccc <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:831
		return 196608;
20014cc6:	000307b7          	lui	a5,0x30
20014cca:	a829                	j	20014ce4 <__metal_driver_sifive_uart0_pinmux_output_selector+0x38>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:833
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20014ccc:	fec42703          	lw	a4,-20(s0)
20014cd0:	800017b7          	lui	a5,0x80001
20014cd4:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2d4>
20014cd8:	00f71563          	bne	a4,a5,20014ce2 <__metal_driver_sifive_uart0_pinmux_output_selector+0x36>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:834
		return 8650752;
20014cdc:	008407b7          	lui	a5,0x840
20014ce0:	a011                	j	20014ce4 <__metal_driver_sifive_uart0_pinmux_output_selector+0x38>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:837
		return 0;
20014ce2:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:839
}
20014ce4:	853e                	mv	a0,a5
20014ce6:	4472                	lw	s0,28(sp)
20014ce8:	6105                	addi	sp,sp,32
20014cea:	8082                	ret

20014cec <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:842
{
20014cec:	1101                	addi	sp,sp,-32
20014cee:	ce22                	sw	s0,28(sp)
20014cf0:	1000                	addi	s0,sp,32
20014cf2:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:843
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20014cf6:	fec42703          	lw	a4,-20(s0)
20014cfa:	800017b7          	lui	a5,0x80001
20014cfe:	a2078793          	addi	a5,a5,-1504 # 80000a20 <metal_segment_heap_target_end+0xfffff2b4>
20014d02:	00f71563          	bne	a4,a5,20014d0c <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:844
		return 196608;
20014d06:	000307b7          	lui	a5,0x30
20014d0a:	a829                	j	20014d24 <__metal_driver_sifive_uart0_pinmux_source_selector+0x38>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:846
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20014d0c:	fec42703          	lw	a4,-20(s0)
20014d10:	800017b7          	lui	a5,0x80001
20014d14:	a4078793          	addi	a5,a5,-1472 # 80000a40 <metal_segment_heap_target_end+0xfffff2d4>
20014d18:	00f71563          	bne	a4,a5,20014d22 <__metal_driver_sifive_uart0_pinmux_source_selector+0x36>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:847
		return 8650752;
20014d1c:	008407b7          	lui	a5,0x840
20014d20:	a011                	j	20014d24 <__metal_driver_sifive_uart0_pinmux_source_selector+0x38>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:850
		return 0;
20014d22:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:852
}
20014d24:	853e                	mv	a0,a5
20014d26:	4472                	lw	s0,28(sp)
20014d28:	6105                	addi	sp,sp,32
20014d2a:	8082                	ret

20014d2c <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20014d2c:	1101                	addi	sp,sp,-32
20014d2e:	ce06                	sw	ra,28(sp)
20014d30:	cc22                	sw	s0,24(sp)
20014d32:	1000                	addi	s0,sp,32
20014d34:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20014d38:	fec42503          	lw	a0,-20(s0)
20014d3c:	e6bff0ef          	jal	ra,20014ba6 <__metal_driver_sifive_uart0_interrupt_parent>
20014d40:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:34
}
20014d42:	853e                	mv	a0,a5
20014d44:	40f2                	lw	ra,28(sp)
20014d46:	4462                	lw	s0,24(sp)
20014d48:	6105                	addi	sp,sp,32
20014d4a:	8082                	ret

20014d4c <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20014d4c:	1101                	addi	sp,sp,-32
20014d4e:	ce06                	sw	ra,28(sp)
20014d50:	cc22                	sw	s0,24(sp)
20014d52:	1000                	addi	s0,sp,32
20014d54:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20014d58:	fec42503          	lw	a0,-20(s0)
20014d5c:	e8dff0ef          	jal	ra,20014be8 <__metal_driver_sifive_uart0_interrupt_line>
20014d60:	87aa                	mv	a5,a0
20014d62:	02078793          	addi	a5,a5,32 # 840020 <__heap_size+0x83f820>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:39
}
20014d66:	853e                	mv	a0,a5
20014d68:	40f2                	lw	ra,28(sp)
20014d6a:	4462                	lw	s0,24(sp)
20014d6c:	6105                	addi	sp,sp,32
20014d6e:	8082                	ret

20014d70 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20014d70:	7179                	addi	sp,sp,-48
20014d72:	d606                	sw	ra,44(sp)
20014d74:	d422                	sw	s0,40(sp)
20014d76:	1800                	addi	s0,sp,48
20014d78:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20014d7c:	fdc42503          	lw	a0,-36(s0)
20014d80:	de7ff0ef          	jal	ra,20014b66 <__metal_driver_sifive_uart0_control_base>
20014d84:	87aa                	mv	a5,a0
20014d86:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20014d8a:	fec42783          	lw	a5,-20(s0)
20014d8e:	439c                	lw	a5,0(a5)
20014d90:	fff7c793          	not	a5,a5
20014d94:	83fd                	srli	a5,a5,0x1f
20014d96:	0ff7f793          	andi	a5,a5,255
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:47
}
20014d9a:	853e                	mv	a0,a5
20014d9c:	50b2                	lw	ra,44(sp)
20014d9e:	5422                	lw	s0,40(sp)
20014da0:	6145                	addi	sp,sp,48
20014da2:	8082                	ret

20014da4 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20014da4:	7179                	addi	sp,sp,-48
20014da6:	d606                	sw	ra,44(sp)
20014da8:	d422                	sw	s0,40(sp)
20014daa:	1800                	addi	s0,sp,48
20014dac:	fca42e23          	sw	a0,-36(s0)
20014db0:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20014db4:	fdc42503          	lw	a0,-36(s0)
20014db8:	dafff0ef          	jal	ra,20014b66 <__metal_driver_sifive_uart0_control_base>
20014dbc:	87aa                	mv	a5,a0
20014dbe:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20014dc2:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20014dc4:	fdc42503          	lw	a0,-36(s0)
20014dc8:	3765                	jal	20014d70 <__metal_driver_sifive_uart0_txready>
20014dca:	87aa                	mv	a5,a0
20014dcc:	dfe5                	beqz	a5,20014dc4 <__metal_driver_sifive_uart0_putc+0x20>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20014dce:	fec42783          	lw	a5,-20(s0)
20014dd2:	fd842703          	lw	a4,-40(s0)
20014dd6:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20014dd8:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:59
}
20014dda:	853e                	mv	a0,a5
20014ddc:	50b2                	lw	ra,44(sp)
20014dde:	5422                	lw	s0,40(sp)
20014de0:	6145                	addi	sp,sp,48
20014de2:	8082                	ret

20014de4 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20014de4:	7179                	addi	sp,sp,-48
20014de6:	d606                	sw	ra,44(sp)
20014de8:	d422                	sw	s0,40(sp)
20014dea:	1800                	addi	s0,sp,48
20014dec:	fca42e23          	sw	a0,-36(s0)
20014df0:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20014df4:	fdc42503          	lw	a0,-36(s0)
20014df8:	d6fff0ef          	jal	ra,20014b66 <__metal_driver_sifive_uart0_control_base>
20014dfc:	87aa                	mv	a5,a0
20014dfe:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20014e02:	fec42783          	lw	a5,-20(s0)
20014e06:	0791                	addi	a5,a5,4
20014e08:	439c                	lw	a5,0(a5)
20014e0a:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20014e0e:	fe842783          	lw	a5,-24(s0)
20014e12:	0007d763          	bgez	a5,20014e20 <__metal_driver_sifive_uart0_getc+0x3c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20014e16:	fd842783          	lw	a5,-40(s0)
20014e1a:	577d                	li	a4,-1
20014e1c:	c398                	sw	a4,0(a5)
20014e1e:	a801                	j	20014e2e <__metal_driver_sifive_uart0_getc+0x4a>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20014e20:	fe842783          	lw	a5,-24(s0)
20014e24:	0ff7f713          	andi	a4,a5,255
20014e28:	fd842783          	lw	a5,-40(s0)
20014e2c:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20014e2e:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:74
}
20014e30:	853e                	mv	a0,a5
20014e32:	50b2                	lw	ra,44(sp)
20014e34:	5422                	lw	s0,40(sp)
20014e36:	6145                	addi	sp,sp,48
20014e38:	8082                	ret

20014e3a <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20014e3a:	7179                	addi	sp,sp,-48
20014e3c:	d622                	sw	s0,44(sp)
20014e3e:	1800                	addi	s0,sp,48
20014e40:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20014e44:	fdc42783          	lw	a5,-36(s0)
20014e48:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20014e4c:	fec42783          	lw	a5,-20(s0)
20014e50:	43dc                	lw	a5,4(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:81
}
20014e52:	853e                	mv	a0,a5
20014e54:	5432                	lw	s0,44(sp)
20014e56:	6145                	addi	sp,sp,48
20014e58:	8082                	ret

20014e5a <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20014e5a:	7179                	addi	sp,sp,-48
20014e5c:	d606                	sw	ra,44(sp)
20014e5e:	d422                	sw	s0,40(sp)
20014e60:	1800                	addi	s0,sp,48
20014e62:	fca42e23          	sw	a0,-36(s0)
20014e66:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20014e6a:	fdc42783          	lw	a5,-36(s0)
20014e6e:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20014e72:	fdc42503          	lw	a0,-36(s0)
20014e76:	cf1ff0ef          	jal	ra,20014b66 <__metal_driver_sifive_uart0_control_base>
20014e7a:	87aa                	mv	a5,a0
20014e7c:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20014e80:	fdc42503          	lw	a0,-36(s0)
20014e84:	da1ff0ef          	jal	ra,20014c24 <__metal_driver_sifive_uart0_clock>
20014e88:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20014e8c:	fd842703          	lw	a4,-40(s0)
20014e90:	fec42783          	lw	a5,-20(s0)
20014e94:	c3d8                	sw	a4,4(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20014e96:	fe442783          	lw	a5,-28(s0)
20014e9a:	cbb1                	beqz	a5,20014eee <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20014e9c:	fe442783          	lw	a5,-28(s0)
20014ea0:	439c                	lw	a5,0(a5)
20014ea2:	439c                	lw	a5,0(a5)
20014ea4:	fe442503          	lw	a0,-28(s0)
20014ea8:	9782                	jalr	a5
20014eaa:	fea42023          	sw	a0,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20014eae:	fe042703          	lw	a4,-32(s0)
20014eb2:	fd842783          	lw	a5,-40(s0)
20014eb6:	02f747b3          	div	a5,a4,a5
20014eba:	fff78713          	addi	a4,a5,-1
20014ebe:	fe842783          	lw	a5,-24(s0)
20014ec2:	07e1                	addi	a5,a5,24
20014ec4:	c398                	sw	a4,0(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20014ec6:	fe842783          	lw	a5,-24(s0)
20014eca:	07a1                	addi	a5,a5,8
20014ecc:	439c                	lw	a5,0(a5)
20014ece:	fe842703          	lw	a4,-24(s0)
20014ed2:	0721                	addi	a4,a4,8
20014ed4:	0017e793          	ori	a5,a5,1
20014ed8:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20014eda:	fe842783          	lw	a5,-24(s0)
20014ede:	07b1                	addi	a5,a5,12
20014ee0:	439c                	lw	a5,0(a5)
20014ee2:	fe842703          	lw	a4,-24(s0)
20014ee6:	0731                	addi	a4,a4,12
20014ee8:	0017e793          	ori	a5,a5,1
20014eec:	c31c                	sw	a5,0(a4)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20014eee:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:98
}
20014ef0:	853e                	mv	a0,a5
20014ef2:	50b2                	lw	ra,44(sp)
20014ef4:	5422                	lw	s0,40(sp)
20014ef6:	6145                	addi	sp,sp,48
20014ef8:	8082                	ret

20014efa <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20014efa:	7139                	addi	sp,sp,-64
20014efc:	de06                	sw	ra,60(sp)
20014efe:	dc22                	sw	s0,56(sp)
20014f00:	0080                	addi	s0,sp,64
20014f02:	fca42623          	sw	a0,-52(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20014f06:	fcc42783          	lw	a5,-52(s0)
20014f0a:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20014f0e:	fcc42503          	lw	a0,-52(s0)
20014f12:	c55ff0ef          	jal	ra,20014b66 <__metal_driver_sifive_uart0_control_base>
20014f16:	87aa                	mv	a5,a0
20014f18:	fef42423          	sw	a5,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20014f1c:	fcc42503          	lw	a0,-52(s0)
20014f20:	d05ff0ef          	jal	ra,20014c24 <__metal_driver_sifive_uart0_clock>
20014f24:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20014f28:	fe842783          	lw	a5,-24(s0)
20014f2c:	07a1                	addi	a5,a5,8
20014f2e:	4398                	lw	a4,0(a5)
20014f30:	fe842783          	lw	a5,-24(s0)
20014f34:	07a1                	addi	a5,a5,8
20014f36:	86be                	mv	a3,a5
20014f38:	fff907b7          	lui	a5,0xfff90
20014f3c:	17fd                	addi	a5,a5,-1
20014f3e:	8ff9                	and	a5,a5,a4
20014f40:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20014f42:	fe842783          	lw	a5,-24(s0)
20014f46:	07a1                	addi	a5,a5,8
20014f48:	4398                	lw	a4,0(a5)
20014f4a:	fe842783          	lw	a5,-24(s0)
20014f4e:	07a1                	addi	a5,a5,8
20014f50:	86be                	mv	a3,a5
20014f52:	67c1                	lui	a5,0x10
20014f54:	8fd9                	or	a5,a5,a4
20014f56:	c29c                	sw	a5,0(a3)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20014f58:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20014f5a:	fe842783          	lw	a5,-24(s0)
20014f5e:	07d1                	addi	a5,a5,20
20014f60:	439c                	lw	a5,0(a5)
20014f62:	8b85                	andi	a5,a5,1
20014f64:	dbfd                	beqz	a5,20014f5a <pre_rate_change_callback_func+0x60>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20014f66:	fe842783          	lw	a5,-24(s0)
20014f6a:	07a1                	addi	a5,a5,8
20014f6c:	439c                	lw	a5,0(a5)
20014f6e:	8b89                	andi	a5,a5,2
20014f70:	c399                	beqz	a5,20014f76 <pre_rate_change_callback_func+0x7c>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20014f72:	47a5                	li	a5,9
20014f74:	a011                	j	20014f78 <pre_rate_change_callback_func+0x7e>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20014f76:	47a9                	li	a5,10
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20014f78:	fef42023          	sw	a5,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20014f7c:	fe442783          	lw	a5,-28(s0)
20014f80:	439c                	lw	a5,0(a5)
20014f82:	439c                	lw	a5,0(a5)
20014f84:	fe442503          	lw	a0,-28(s0)
20014f88:	9782                	jalr	a5
20014f8a:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20014f8e:	fe042703          	lw	a4,-32(s0)
20014f92:	fdc42783          	lw	a5,-36(s0)
20014f96:	02f707b3          	mul	a5,a4,a5
20014f9a:	873e                	mv	a4,a5
20014f9c:	fec42783          	lw	a5,-20(s0)
20014fa0:	43dc                	lw	a5,4(a5)
20014fa2:	02f757b3          	divu	a5,a4,a5
20014fa6:	fcf42c23          	sw	a5,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20014faa:	fc042a23          	sw	zero,-44(s0)
20014fae:	a039                	j	20014fbc <pre_rate_change_callback_func+0xc2>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20014fb0:	0001                	nop
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20014fb2:	fd442783          	lw	a5,-44(s0)
20014fb6:	0785                	addi	a5,a5,1
20014fb8:	fcf42a23          	sw	a5,-44(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20014fbc:	fd442783          	lw	a5,-44(s0)
20014fc0:	fd842703          	lw	a4,-40(s0)
20014fc4:	fee7c6e3          	blt	a5,a4,20014fb0 <pre_rate_change_callback_func+0xb6>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:124
}
20014fc8:	0001                	nop
20014fca:	50f2                	lw	ra,60(sp)
20014fcc:	5462                	lw	s0,56(sp)
20014fce:	6121                	addi	sp,sp,64
20014fd0:	8082                	ret

20014fd2 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20014fd2:	7179                	addi	sp,sp,-48
20014fd4:	d606                	sw	ra,44(sp)
20014fd6:	d422                	sw	s0,40(sp)
20014fd8:	1800                	addi	s0,sp,48
20014fda:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20014fde:	fdc42783          	lw	a5,-36(s0)
20014fe2:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20014fe6:	fec42703          	lw	a4,-20(s0)
20014fea:	fec42783          	lw	a5,-20(s0)
20014fee:	43dc                	lw	a5,4(a5)
20014ff0:	85be                	mv	a1,a5
20014ff2:	853a                	mv	a0,a4
20014ff4:	a5efc0ef          	jal	ra,20011252 <metal_uart_set_baud_rate>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:130
}
20014ff8:	0001                	nop
20014ffa:	50b2                	lw	ra,44(sp)
20014ffc:	5422                	lw	s0,40(sp)
20014ffe:	6145                	addi	sp,sp,48
20015000:	8082                	ret

20015002 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20015002:	7139                	addi	sp,sp,-64
20015004:	de06                	sw	ra,60(sp)
20015006:	dc22                	sw	s0,56(sp)
20015008:	0080                	addi	s0,sp,64
2001500a:	fca42623          	sw	a0,-52(s0)
2001500e:	fcb42423          	sw	a1,-56(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20015012:	fcc42783          	lw	a5,-52(s0)
20015016:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
2001501a:	fcc42503          	lw	a0,-52(s0)
2001501e:	c07ff0ef          	jal	ra,20014c24 <__metal_driver_sifive_uart0_clock>
20015022:	fea42423          	sw	a0,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20015026:	fcc42503          	lw	a0,-52(s0)
2001502a:	c43ff0ef          	jal	ra,20014c6c <__metal_driver_sifive_uart0_pinmux>
2001502e:	fea42223          	sw	a0,-28(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20015032:	fe842783          	lw	a5,-24(s0)
20015036:	c7b9                	beqz	a5,20015084 <__metal_driver_sifive_uart0_init+0x82>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20015038:	fec42783          	lw	a5,-20(s0)
2001503c:	20015737          	lui	a4,0x20015
20015040:	efa70713          	addi	a4,a4,-262 # 20014efa <pre_rate_change_callback_func>
20015044:	c798                	sw	a4,8(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20015046:	fec42783          	lw	a5,-20(s0)
2001504a:	fcc42703          	lw	a4,-52(s0)
2001504e:	c7d8                	sw	a4,12(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20015050:	fec42783          	lw	a5,-20(s0)
20015054:	07a1                	addi	a5,a5,8
20015056:	85be                	mv	a1,a5
20015058:	fe842503          	lw	a0,-24(s0)
2001505c:	2aad                	jal	200151d6 <metal_clock_register_pre_rate_change_callback>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
2001505e:	fec42783          	lw	a5,-20(s0)
20015062:	20015737          	lui	a4,0x20015
20015066:	fd270713          	addi	a4,a4,-46 # 20014fd2 <post_rate_change_callback_func>
2001506a:	cbd8                	sw	a4,20(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
2001506c:	fec42783          	lw	a5,-20(s0)
20015070:	fcc42703          	lw	a4,-52(s0)
20015074:	cf98                	sw	a4,24(a5)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20015076:	fec42783          	lw	a5,-20(s0)
2001507a:	07d1                	addi	a5,a5,20
2001507c:	85be                	mv	a1,a5
2001507e:	fe842503          	lw	a0,-24(s0)
20015082:	2251                	jal	20015206 <metal_clock_register_post_rate_change_callback>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20015084:	fec42783          	lw	a5,-20(s0)
20015088:	fc842583          	lw	a1,-56(s0)
2001508c:	853e                	mv	a0,a5
2001508e:	9c4fc0ef          	jal	ra,20011252 <metal_uart_set_baud_rate>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20015092:	fe442783          	lw	a5,-28(s0)
20015096:	cb95                	beqz	a5,200150ca <__metal_driver_sifive_uart0_init+0xc8>
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20015098:	fcc42503          	lw	a0,-52(s0)
2001509c:	c11ff0ef          	jal	ra,20014cac <__metal_driver_sifive_uart0_pinmux_output_selector>
200150a0:	87aa                	mv	a5,a0
200150a2:	fef42023          	sw	a5,-32(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
200150a6:	fcc42503          	lw	a0,-52(s0)
200150aa:	c43ff0ef          	jal	ra,20014cec <__metal_driver_sifive_uart0_pinmux_source_selector>
200150ae:	87aa                	mv	a5,a0
200150b0:	fcf42e23          	sw	a5,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
200150b4:	fe442783          	lw	a5,-28(s0)
200150b8:	439c                	lw	a5,0(a5)
200150ba:	53dc                	lw	a5,36(a5)
200150bc:	fdc42603          	lw	a2,-36(s0)
200150c0:	fe042583          	lw	a1,-32(s0)
200150c4:	fe442503          	lw	a0,-28(s0)
200150c8:	9782                	jalr	a5
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
200150ca:	0001                	nop
200150cc:	50f2                	lw	ra,60(sp)
200150ce:	5462                	lw	s0,56(sp)
200150d0:	6121                	addi	sp,sp,64
200150d2:	8082                	ret

200150d4 <_metal_clock_call_all_callbacks>:
_metal_clock_call_all_callbacks():
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:48
typedef struct _metal_clock_callback_t metal_clock_callback;

/*!
 * @brief Call all callbacks in the linked list, if any are registered
 */
__inline__ void _metal_clock_call_all_callbacks(const metal_clock_callback *const list) {
200150d4:	7179                	addi	sp,sp,-48
200150d6:	d606                	sw	ra,44(sp)
200150d8:	d422                	sw	s0,40(sp)
200150da:	1800                	addi	s0,sp,48
200150dc:	fca42e23          	sw	a0,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:49
    const metal_clock_callback *current = list;
200150e0:	fdc42783          	lw	a5,-36(s0)
200150e4:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:50
    while (current) {
200150e8:	a831                	j	20015104 <_metal_clock_call_all_callbacks+0x30>
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:51
        current->callback(current->priv);
200150ea:	fec42783          	lw	a5,-20(s0)
200150ee:	4398                	lw	a4,0(a5)
200150f0:	fec42783          	lw	a5,-20(s0)
200150f4:	43dc                	lw	a5,4(a5)
200150f6:	853e                	mv	a0,a5
200150f8:	9702                	jalr	a4
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:52
        current = current->_next;
200150fa:	fec42783          	lw	a5,-20(s0)
200150fe:	479c                	lw	a5,8(a5)
20015100:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:50
    while (current) {
20015104:	fec42783          	lw	a5,-20(s0)
20015108:	f3ed                	bnez	a5,200150ea <_metal_clock_call_all_callbacks+0x16>
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:54
    }
}
2001510a:	0001                	nop
2001510c:	50b2                	lw	ra,44(sp)
2001510e:	5422                	lw	s0,40(sp)
20015110:	6145                	addi	sp,sp,48
20015112:	8082                	ret

20015114 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:59

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20015114:	7179                	addi	sp,sp,-48
20015116:	d622                	sw	s0,44(sp)
20015118:	1800                	addi	s0,sp,48
2001511a:	fca42e23          	sw	a0,-36(s0)
2001511e:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20015122:	fd842783          	lw	a5,-40(s0)
20015126:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:62

    if (!list) {
2001512a:	fdc42783          	lw	a5,-36(s0)
2001512e:	e781                	bnez	a5,20015136 <_metal_clock_append_to_callbacks+0x22>
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:63
        return cb;
20015130:	fd842783          	lw	a5,-40(s0)
20015134:	a035                	j	20015160 <_metal_clock_append_to_callbacks+0x4c>
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20015136:	fdc42783          	lw	a5,-36(s0)
2001513a:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
2001513e:	a031                	j	2001514a <_metal_clock_append_to_callbacks+0x36>
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:69
        current = current->_next;
20015140:	fec42783          	lw	a5,-20(s0)
20015144:	479c                	lw	a5,8(a5)
20015146:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
2001514a:	fec42783          	lw	a5,-20(s0)
2001514e:	479c                	lw	a5,8(a5)
20015150:	fbe5                	bnez	a5,20015140 <_metal_clock_append_to_callbacks+0x2c>
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20015152:	fec42783          	lw	a5,-20(s0)
20015156:	fd842703          	lw	a4,-40(s0)
2001515a:	c798                	sw	a4,8(a5)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:74

    return list;
2001515c:	fdc42783          	lw	a5,-36(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:75
}
20015160:	853e                	mv	a0,a5
20015162:	5432                	lw	s0,44(sp)
20015164:	6145                	addi	sp,sp,48
20015166:	8082                	ret

20015168 <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:105
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
__inline__ long metal_clock_get_rate_hz(const struct metal_clock *clk) { return clk->vtable->get_rate_hz(clk); }
20015168:	1101                	addi	sp,sp,-32
2001516a:	ce06                	sw	ra,28(sp)
2001516c:	cc22                	sw	s0,24(sp)
2001516e:	1000                	addi	s0,sp,32
20015170:	fea42623          	sw	a0,-20(s0)
20015174:	fec42783          	lw	a5,-20(s0)
20015178:	439c                	lw	a5,0(a5)
2001517a:	439c                	lw	a5,0(a5)
2001517c:	fec42503          	lw	a0,-20(s0)
20015180:	9782                	jalr	a5
20015182:	87aa                	mv	a5,a0
20015184:	853e                	mv	a0,a5
20015186:	40f2                	lw	ra,28(sp)
20015188:	4462                	lw	s0,24(sp)
2001518a:	6105                	addi	sp,sp,32
2001518c:	8082                	ret

2001518e <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:122
 *
 * Prior to and after the rate change of the clock, this will call the registered
 * pre- and post-rate change callbacks.
 */
__inline__ long metal_clock_set_rate_hz(struct metal_clock *clk, long hz)
{
2001518e:	7179                	addi	sp,sp,-48
20015190:	d606                	sw	ra,44(sp)
20015192:	d422                	sw	s0,40(sp)
20015194:	1800                	addi	s0,sp,48
20015196:	fca42e23          	sw	a0,-36(s0)
2001519a:	fcb42c23          	sw	a1,-40(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:123
    _metal_clock_call_all_callbacks(clk->_pre_rate_change_callback);
2001519e:	fdc42783          	lw	a5,-36(s0)
200151a2:	43dc                	lw	a5,4(a5)
200151a4:	853e                	mv	a0,a5
200151a6:	373d                	jal	200150d4 <_metal_clock_call_all_callbacks>
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:125

    long out = clk->vtable->set_rate_hz(clk, hz);
200151a8:	fdc42783          	lw	a5,-36(s0)
200151ac:	439c                	lw	a5,0(a5)
200151ae:	43dc                	lw	a5,4(a5)
200151b0:	fd842583          	lw	a1,-40(s0)
200151b4:	fdc42503          	lw	a0,-36(s0)
200151b8:	9782                	jalr	a5
200151ba:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:127

    _metal_clock_call_all_callbacks(clk->_post_rate_change_callback);
200151be:	fdc42783          	lw	a5,-36(s0)
200151c2:	479c                	lw	a5,8(a5)
200151c4:	853e                	mv	a0,a5
200151c6:	3739                	jal	200150d4 <_metal_clock_call_all_callbacks>
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:129

    return out;
200151c8:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:130
}
200151cc:	853e                	mv	a0,a5
200151ce:	50b2                	lw	ra,44(sp)
200151d0:	5422                	lw	s0,40(sp)
200151d2:	6145                	addi	sp,sp,48
200151d4:	8082                	ret

200151d6 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
200151d6:	1101                	addi	sp,sp,-32
200151d8:	ce06                	sw	ra,28(sp)
200151da:	cc22                	sw	s0,24(sp)
200151dc:	1000                	addi	s0,sp,32
200151de:	fea42623          	sw	a0,-20(s0)
200151e2:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
200151e6:	fec42783          	lw	a5,-20(s0)
200151ea:	43dc                	lw	a5,4(a5)
200151ec:	fe842583          	lw	a1,-24(s0)
200151f0:	853e                	mv	a0,a5
200151f2:	370d                	jal	20015114 <_metal_clock_append_to_callbacks>
200151f4:	872a                	mv	a4,a0
200151f6:	fec42783          	lw	a5,-20(s0)
200151fa:	c3d8                	sw	a4,4(a5)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:141
}
200151fc:	0001                	nop
200151fe:	40f2                	lw	ra,28(sp)
20015200:	4462                	lw	s0,24(sp)
20015202:	6105                	addi	sp,sp,32
20015204:	8082                	ret

20015206 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20015206:	1101                	addi	sp,sp,-32
20015208:	ce06                	sw	ra,28(sp)
2001520a:	cc22                	sw	s0,24(sp)
2001520c:	1000                	addi	s0,sp,32
2001520e:	fea42623          	sw	a0,-20(s0)
20015212:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20015216:	fec42783          	lw	a5,-20(s0)
2001521a:	479c                	lw	a5,8(a5)
2001521c:	fe842583          	lw	a1,-24(s0)
20015220:	853e                	mv	a0,a5
20015222:	ef3ff0ef          	jal	ra,20015114 <_metal_clock_append_to_callbacks>
20015226:	872a                	mv	a4,a0
20015228:	fec42783          	lw	a5,-20(s0)
2001522c:	c798                	sw	a4,8(a5)
/home/picard/Documents/cleanflight/freedom-metal/metal/clock.h:152
}
2001522e:	0001                	nop
20015230:	40f2                	lw	ra,28(sp)
20015232:	4462                	lw	s0,24(sp)
20015234:	6105                	addi	sp,sp,32
20015236:	8082                	ret

20015238 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/picard/Documents/cleanflight/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20015238:	1101                	addi	sp,sp,-32
2001523a:	ce06                	sw	ra,28(sp)
2001523c:	cc22                	sw	s0,24(sp)
2001523e:	1000                	addi	s0,sp,32
20015240:	fea42623          	sw	a0,-20(s0)
20015244:	fec42783          	lw	a5,-20(s0)
20015248:	439c                	lw	a5,0(a5)
2001524a:	57dc                	lw	a5,44(a5)
2001524c:	fec42503          	lw	a0,-20(s0)
20015250:	9782                	jalr	a5
20015252:	87aa                	mv	a5,a0
20015254:	853e                	mv	a0,a5
20015256:	40f2                	lw	ra,28(sp)
20015258:	4462                	lw	s0,24(sp)
2001525a:	6105                	addi	sp,sp,32
2001525c:	8082                	ret

2001525e <metal_cpu_get>:
metal_cpu_get():
/home/picard/Documents/cleanflight/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
2001525e:	1101                	addi	sp,sp,-32
20015260:	ce22                	sw	s0,28(sp)
20015262:	1000                	addi	s0,sp,32
20015264:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20015268:	fec42783          	lw	a5,-20(s0)
2001526c:	eb89                	bnez	a5,2001527e <metal_cpu_get+0x20>
/home/picard/Documents/cleanflight/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
2001526e:	fec42703          	lw	a4,-20(s0)
20015272:	070a                	slli	a4,a4,0x2
20015274:	80c18793          	addi	a5,gp,-2036 # 80000a94 <__metal_cpu_table>
20015278:	97ba                	add	a5,a5,a4
2001527a:	439c                	lw	a5,0(a5)
2001527c:	a011                	j	20015280 <metal_cpu_get+0x22>
/home/picard/Documents/cleanflight/freedom-metal/src/cpu.c:12
    }   
    return NULL;
2001527e:	4781                	li	a5,0
/home/picard/Documents/cleanflight/freedom-metal/src/cpu.c:13
}
20015280:	853e                	mv	a0,a5
20015282:	4472                	lw	s0,28(sp)
20015284:	6105                	addi	sp,sp,32
20015286:	8082                	ret

20015288 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/picard/Documents/cleanflight/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20015288:	1101                	addi	sp,sp,-32
2001528a:	ce22                	sw	s0,28(sp)
2001528c:	1000                	addi	s0,sp,32
/home/picard/Documents/cleanflight/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
2001528e:	f14027f3          	csrr	a5,mhartid
20015292:	fef42623          	sw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/cpu.c:20
    return mhartid;
20015296:	fec42783          	lw	a5,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/cpu.c:22
#endif
}
2001529a:	853e                	mv	a0,a5
2001529c:	4472                	lw	s0,28(sp)
2001529e:	6105                	addi	sp,sp,32
200152a0:	8082                	ret

200152a2 <metal_shutdown>:
metal_shutdown():
/home/picard/Documents/cleanflight/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
200152a2:	1101                	addi	sp,sp,-32
200152a4:	ce22                	sw	s0,28(sp)
200152a6:	1000                	addi	s0,sp,32
200152a8:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
200152ac:	0001                	nop
200152ae:	bffd                	j	200152ac <metal_shutdown+0xa>
	...

20015300 <__metal_vector_table>:
IRQ_0():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20015300:	8a7fc06f          	j	20011ba6 <metal_interrupt_vector_handler>

20015304 <IRQ_1>:
IRQ_1():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20015304:	8a3fc06f          	j	20011ba6 <metal_interrupt_vector_handler>

20015308 <IRQ_2>:
IRQ_2():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20015308:	89ffc06f          	j	20011ba6 <metal_interrupt_vector_handler>

2001530c <IRQ_3>:
IRQ_3():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2001530c:	8c9fc06f          	j	20011bd4 <metal_software_interrupt_vector_handler>

20015310 <IRQ_4>:
IRQ_4():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20015310:	897fc06f          	j	20011ba6 <metal_interrupt_vector_handler>

20015314 <IRQ_5>:
IRQ_5():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20015314:	893fc06f          	j	20011ba6 <metal_interrupt_vector_handler>

20015318 <IRQ_6>:
IRQ_6():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20015318:	88ffc06f          	j	20011ba6 <metal_interrupt_vector_handler>

2001531c <IRQ_7>:
IRQ_7():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2001531c:	9abfc06f          	j	20011cc6 <metal_timer_interrupt_vector_handler>

20015320 <IRQ_8>:
IRQ_8():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20015320:	887fc06f          	j	20011ba6 <metal_interrupt_vector_handler>

20015324 <IRQ_9>:
IRQ_9():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20015324:	883fc06f          	j	20011ba6 <metal_interrupt_vector_handler>

20015328 <IRQ_10>:
IRQ_10():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20015328:	87ffc06f          	j	20011ba6 <metal_interrupt_vector_handler>

2001532c <IRQ_11>:
IRQ_11():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
2001532c:	87bfc06f          	j	20011ba6 <metal_interrupt_vector_handler>

20015330 <IRQ_12>:
IRQ_12():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20015330:	877fc06f          	j	20011ba6 <metal_interrupt_vector_handler>

20015334 <IRQ_13>:
IRQ_13():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20015334:	873fc06f          	j	20011ba6 <metal_interrupt_vector_handler>

20015338 <IRQ_14>:
IRQ_14():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20015338:	86ffc06f          	j	20011ba6 <metal_interrupt_vector_handler>

2001533c <IRQ_15>:
IRQ_15():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
2001533c:	86bfc06f          	j	20011ba6 <metal_interrupt_vector_handler>

20015340 <IRQ_LC0>:
IRQ_LC0():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20015340:	c33fc06f          	j	20011f72 <metal_lc0_interrupt_vector_handler>

20015344 <IRQ_LC1>:
IRQ_LC1():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20015344:	cc1fc06f          	j	20012004 <metal_lc1_interrupt_vector_handler>

20015348 <IRQ_LC2>:
IRQ_LC2():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20015348:	d4ffc06f          	j	20012096 <metal_lc2_interrupt_vector_handler>

2001534c <IRQ_LC3>:
IRQ_LC3():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
2001534c:	dddfc06f          	j	20012128 <metal_lc3_interrupt_vector_handler>

20015350 <IRQ_LC4>:
IRQ_LC4():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20015350:	e6bfc06f          	j	200121ba <metal_lc4_interrupt_vector_handler>

20015354 <IRQ_LC5>:
IRQ_LC5():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20015354:	ef9fc06f          	j	2001224c <metal_lc5_interrupt_vector_handler>

20015358 <IRQ_LC6>:
IRQ_LC6():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20015358:	f87fc06f          	j	200122de <metal_lc6_interrupt_vector_handler>

2001535c <IRQ_LC7>:
IRQ_LC7():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
2001535c:	814fd06f          	j	20012370 <metal_lc7_interrupt_vector_handler>

20015360 <IRQ_LC8>:
IRQ_LC8():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20015360:	8a2fd06f          	j	20012402 <metal_lc8_interrupt_vector_handler>

20015364 <IRQ_LC9>:
IRQ_LC9():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20015364:	930fd06f          	j	20012494 <metal_lc9_interrupt_vector_handler>

20015368 <IRQ_LC10>:
IRQ_LC10():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20015368:	9befd06f          	j	20012526 <metal_lc10_interrupt_vector_handler>

2001536c <IRQ_LC11>:
IRQ_LC11():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
2001536c:	a4cfd06f          	j	200125b8 <metal_lc11_interrupt_vector_handler>

20015370 <IRQ_LC12>:
IRQ_LC12():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20015370:	adafd06f          	j	2001264a <metal_lc12_interrupt_vector_handler>

20015374 <IRQ_LC13>:
IRQ_LC13():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20015374:	b68fd06f          	j	200126dc <metal_lc13_interrupt_vector_handler>

20015378 <IRQ_LC14>:
IRQ_LC14():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20015378:	bf6fd06f          	j	2001276e <metal_lc14_interrupt_vector_handler>

2001537c <IRQ_LC15>:
IRQ_LC15():
/home/picard/Documents/cleanflight/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
2001537c:	c84fd06f          	j	20012800 <metal_lc15_interrupt_vector_handler>

20015380 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:178
{
20015380:	1101                	addi	sp,sp,-32
20015382:	ce22                	sw	s0,28(sp)
20015384:	1000                	addi	s0,sp,32
20015386:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:179
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2001538a:	fec42703          	lw	a4,-20(s0)
2001538e:	800007b7          	lui	a5,0x80000
20015392:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffe8f4>
20015396:	00f71763          	bne	a4,a5,200153a4 <__metal_driver_fixed_clock_rate+0x24>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:180
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2001539a:	00f427b7          	lui	a5,0xf42
2001539e:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
200153a2:	a099                	j	200153e8 <__metal_driver_fixed_clock_rate+0x68>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:182
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
200153a4:	fec42703          	lw	a4,-20(s0)
200153a8:	800007b7          	lui	a5,0x80000
200153ac:	06c78793          	addi	a5,a5,108 # 8000006c <metal_segment_heap_target_end+0xffffe900>
200153b0:	00f71763          	bne	a4,a5,200153be <__metal_driver_fixed_clock_rate+0x3e>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:183
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
200153b4:	044aa7b7          	lui	a5,0x44aa
200153b8:	20078793          	addi	a5,a5,512 # 44aa200 <__heap_size+0x44a9a00>
200153bc:	a035                	j	200153e8 <__metal_driver_fixed_clock_rate+0x68>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:185
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
200153be:	fec42703          	lw	a4,-20(s0)
200153c2:	800007b7          	lui	a5,0x80000
200153c6:	07878793          	addi	a5,a5,120 # 80000078 <metal_segment_heap_target_end+0xffffe90c>
200153ca:	00f71463          	bne	a4,a5,200153d2 <__metal_driver_fixed_clock_rate+0x52>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:186
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
200153ce:	67a1                	lui	a5,0x8
200153d0:	a821                	j	200153e8 <__metal_driver_fixed_clock_rate+0x68>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:188
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_6) {
200153d2:	fec42703          	lw	a4,-20(s0)
200153d6:	800007b7          	lui	a5,0x80000
200153da:	08478793          	addi	a5,a5,132 # 80000084 <metal_segment_heap_target_end+0xffffe918>
200153de:	00f71463          	bne	a4,a5,200153e6 <__metal_driver_fixed_clock_rate+0x66>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:189
		return METAL_FIXED_CLOCK_6_CLOCK_FREQUENCY;
200153e2:	67a1                	lui	a5,0x8
200153e4:	a011                	j	200153e8 <__metal_driver_fixed_clock_rate+0x68>
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:192
		return 0;
200153e6:	4781                	li	a5,0
/home/picard/Documents/cleanflight/bsp/build/debug/./metal/machine.h:194
}
200153e8:	853e                	mv	a0,a5
200153ea:	4472                	lw	s0,28(sp)
200153ec:	6105                	addi	sp,sp,32
200153ee:	8082                	ret

200153f0 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
200153f0:	1101                	addi	sp,sp,-32
200153f2:	ce06                	sw	ra,28(sp)
200153f4:	cc22                	sw	s0,24(sp)
200153f6:	1000                	addi	s0,sp,32
200153f8:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
200153fc:	fec42503          	lw	a0,-20(s0)
20015400:	3741                	jal	20015380 <__metal_driver_fixed_clock_rate>
20015402:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/fixed-clock.c:15
}
20015404:	853e                	mv	a0,a5
20015406:	40f2                	lw	ra,28(sp)
20015408:	4462                	lw	s0,24(sp)
2001540a:	6105                	addi	sp,sp,32
2001540c:	8082                	ret

2001540e <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2001540e:	1101                	addi	sp,sp,-32
20015410:	ce06                	sw	ra,28(sp)
20015412:	cc22                	sw	s0,24(sp)
20015414:	1000                	addi	s0,sp,32
20015416:	fea42623          	sw	a0,-20(s0)
2001541a:	feb42423          	sw	a1,-24(s0)
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2001541e:	fec42503          	lw	a0,-20(s0)
20015422:	37f9                	jal	200153f0 <__metal_driver_fixed_clock_get_rate_hz>
20015424:	87aa                	mv	a5,a0
/home/picard/Documents/cleanflight/freedom-metal/src/drivers/fixed-clock.c:20
}
20015426:	853e                	mv	a0,a5
20015428:	40f2                	lw	ra,28(sp)
2001542a:	4462                	lw	s0,24(sp)
2001542c:	6105                	addi	sp,sp,32
2001542e:	8082                	ret

20015430 <_exit>:
_exit():
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20015430:	1101                	addi	sp,sp,-32
20015432:	ce06                	sw	ra,28(sp)
20015434:	cc22                	sw	s0,24(sp)
20015436:	1000                	addi	s0,sp,32
20015438:	fea42623          	sw	a0,-20(s0)
/home/picard/Documents/cleanflight/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2001543c:	fec42503          	lw	a0,-20(s0)
20015440:	e63ff0ef          	jal	ra,200152a2 <metal_shutdown>
